name: Main

on:
  push:
    branches:
      - main
      - master
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
  merge_group:

jobs:
  check-workflows:
    name: Check workflows
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download actionlint
        id: download-actionlint
        run: bash <(curl https://raw.githubusercontent.com/rhysd/actionlint/7fdc9630cc360ea1a469eed64ac6d78caeda1234/scripts/download-actionlint.bash) 1.6.23
        shell: bash

      - name: Check workflow files
        run: ${{ steps.download-actionlint.outputs.executable }} -color
        shell: bash

  test-deps-audit:
    name: Test deps audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup environment
        uses: metamask/github-tools/.github/actions/setup-environment@main

      - name: Run audit
        run: yarn audit

  run-tests:
    name: Run tests
    uses: ./.github/workflows/run-tests.yml

  wait-for-circleci-workflow-status:
    name: Wait for CircleCI workflow status
    uses: ./.github/workflows/wait-for-circleci-workflow-status.yml

  publish-prerelease:
    name: Publish prerelease
    runs-on: ubuntu-latest
    needs:
      - wait-for-circleci-workflow-status
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup environment
        uses: metamask/github-tools/.github/actions/setup-environment@main

      - name: Get CircleCI job details
        id: get-circleci-job-details
        env:
          REPOSITORY: ${{ github.repository }}
          BRANCH: ${{ github.head_ref }}
        run: |
          pipeline_id=$(curl --silent "https://circleci.com/api/v2/project/gh/$OWNER/$REPOSITORY/pipeline?branch=$BRANCH" | jq -r ".items[0].id")
          workflow_id=$(curl --silent "https://circleci.com/api/v2/pipeline/$pipeline_id/workflow" | jq -r ".items[0].id")
          job_details=$(curl --silent "https://circleci.com/api/v2/workflow/$workflow_id/job" | jq -r '.items[] | select(.name == "job-publish-prerelease")')
          build_num=$(echo "$job_details" | jq -r '.job_number')
          echo 'CIRCLE_BUILD_NUM='"$build_num" >> "$GITHUB_OUTPUT"
          job_id=$(echo "$job_details" | jq -r '.id')
          echo 'CIRCLE_WORKFLOW_JOB_ID='"$job_id" >> "$GITHUB_OUTPUT"

      - name: Publish prerelease
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          HEAD_COMMIT_HASH: ${{ github.event.pull_request.head.sha }}
          BASE_COMMIT_HASH: ${{ github.event.pull_request.base.sha }}
          CIRCLE_BUILD_NUM: ${{ steps.get-circleci-job-details.outputs.CIRCLE_BUILD_NUM }}
          CIRCLE_WORKFLOW_JOB_ID: ${{ steps.get-circleci-job-details.outputs.CIRCLE_WORKFLOW_JOB_ID }}
        run: ./development/metamaskbot-build-announce.js

  all-jobs-completed:
    name: All jobs completed
    runs-on: ubuntu-latest
    needs:
      - check-workflows
      - test-deps-audit
      - run-tests
      - wait-for-circleci-workflow-status
      - publish-prerelease
    outputs:
      PASSED: ${{ steps.set-output.outputs.PASSED }}
    steps:
      - name: Set PASSED output
        id: set-output
        run: echo "PASSED=true" >> "$GITHUB_OUTPUT"

  all-jobs-pass:
    name: All jobs pass
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs:
      - all-jobs-completed
    steps:
      - name: Check that all jobs have passed
        run: |
          passed="${{ needs.all-jobs-completed.outputs.PASSED }}"
          if [[ $passed != "true" ]]; then
            exit 1
          fi

  log-merge-group-failure:
    name: Log merge group failure
    # Only run this job if the merge group event fails, skip on forks
    if: ${{ github.event_name == 'merge_group' && failure() && !github.event.repository.fork }}
    needs:
      - all-jobs-pass
    uses: metamask/github-tools/.github/workflows/log-merge-group-failure.yml@6bbad335a01fce1a9ec1eabd9515542c225d46c0
    secrets:
      GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
      GOOGLE_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}
      SPREADSHEET_ID: ${{ secrets.GOOGLE_MERGE_QUEUE_SPREADSHEET_ID }}
      SHEET_NAME: ${{ secrets.GOOGLE_MERGE_QUEUE_SHEET_NAME }}
