diff --git a/dist/UserOperationController.cjs b/dist/UserOperationController.cjs
index b453cb49c528d631e50d774b150e7c19e75ff7ce..c4489d4d281286f96c9a63777fd519f8e2cf788c 100644
--- a/dist/UserOperationController.cjs
+++ b/dist/UserOperationController.cjs
@@ -13,7 +13,7 @@ var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (
 var __importDefault = (this && this.__importDefault) || function (mod) {
     return (mod && mod.__esModule) ? mod : { "default": mod };
 };
-var _UserOperationController_instances, _UserOperationController_entrypoint, _UserOperationController_getGasFeeEstimates, _UserOperationController_pendingUserOperationTracker, _UserOperationController_addUserOperation, _UserOperationController_prepareAndSubmitUserOperation, _UserOperationController_waitForConfirmation, _UserOperationController_createMetadata, _UserOperationController_prepareUserOperation, _UserOperationController_addPaymasterData, _UserOperationController_approveUserOperation, _UserOperationController_signUserOperation, _UserOperationController_submitUserOperation, _UserOperationController_failUserOperation, _UserOperationController_createEmptyUserOperation, _UserOperationController_updateMetadata, _UserOperationController_deleteMetadata, _UserOperationController_updateTransaction, _UserOperationController_addPendingUserOperationTrackerListeners, _UserOperationController_requestApproval, _UserOperationController_getTransactionType, _UserOperationController_getProvider, _UserOperationController_updateUserOperationAfterApproval, _UserOperationController_regenerateUserOperation;
+var _UserOperationController_instances, _UserOperationController_entrypoint, _UserOperationController_getGasFeeEstimates, _UserOperationController_pendingUserOperationTracker, _UserOperationController_version, _UserOperationController_addUserOperation, _UserOperationController_prepareAndSubmitUserOperation, _UserOperationController_waitForConfirmation, _UserOperationController_createMetadata, _UserOperationController_prepareUserOperation, _UserOperationController_addPaymasterData, _UserOperationController_approveUserOperation, _UserOperationController_signUserOperation, _UserOperationController_submitUserOperation, _UserOperationController_failUserOperation, _UserOperationController_createEmptyUserOperation, _UserOperationController_updateMetadata, _UserOperationController_deleteMetadata, _UserOperationController_updateTransaction, _UserOperationController_addPendingUserOperationTrackerListeners, _UserOperationController_requestApproval, _UserOperationController_getTransactionType, _UserOperationController_getProvider, _UserOperationController_updateUserOperationAfterApproval, _UserOperationController_regenerateUserOperation;
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.UserOperationController = void 0;
 const base_controller_1 = require("@metamask/base-controller");
@@ -54,8 +54,9 @@ class UserOperationController extends base_controller_1.BaseController {
      * @param options.getGasFeeEstimates - Callback to get gas fee estimates.
      * @param options.messenger - Restricted controller messenger for the user operation controller.
      * @param options.state - Initial state to set on the controller.
+     * @param options.version - Version of the 4337 specification to use.
      */
-    constructor({ entrypoint, getGasFeeEstimates, messenger, state, }) {
+    constructor({ entrypoint, getGasFeeEstimates, messenger, state, version, }) {
         super({
             name: controllerName,
             metadata: stateMetadata,
@@ -66,9 +67,11 @@ class UserOperationController extends base_controller_1.BaseController {
         _UserOperationController_entrypoint.set(this, void 0);
         _UserOperationController_getGasFeeEstimates.set(this, void 0);
         _UserOperationController_pendingUserOperationTracker.set(this, void 0);
+        _UserOperationController_version.set(this, void 0);
         this.hub = new events_1.default();
         __classPrivateFieldSet(this, _UserOperationController_entrypoint, entrypoint, "f");
         __classPrivateFieldSet(this, _UserOperationController_getGasFeeEstimates, getGasFeeEstimates, "f");
+        __classPrivateFieldSet(this, _UserOperationController_version, version ?? types_1.Version4337.V06, "f");
         __classPrivateFieldSet(this, _UserOperationController_pendingUserOperationTracker, new PendingUserOperationTracker_1.PendingUserOperationTracker({
             getUserOperations: () => (0, lodash_1.cloneDeep)(Object.values(this.state.userOperations)),
             messenger,
@@ -128,7 +131,7 @@ class UserOperationController extends base_controller_1.BaseController {
     }
 }
 exports.UserOperationController = UserOperationController;
-_UserOperationController_entrypoint = new WeakMap(), _UserOperationController_getGasFeeEstimates = new WeakMap(), _UserOperationController_pendingUserOperationTracker = new WeakMap(), _UserOperationController_instances = new WeakSet(), _UserOperationController_addUserOperation = async function _UserOperationController_addUserOperation(request, options) {
+_UserOperationController_entrypoint = new WeakMap(), _UserOperationController_getGasFeeEstimates = new WeakMap(), _UserOperationController_pendingUserOperationTracker = new WeakMap(), _UserOperationController_version = new WeakMap(), _UserOperationController_instances = new WeakSet(), _UserOperationController_addUserOperation = async function _UserOperationController_addUserOperation(request, options) {
     (0, logger_1.projectLogger)('Adding user operation', { request, options });
     const { networkClientId, origin, smartContractAccount: requestSmartContractAccount, swaps, transaction, } = options;
     const { chainId, provider } = await __classPrivateFieldGet(this, _UserOperationController_instances, "m", _UserOperationController_getProvider).call(this, networkClientId);
@@ -274,7 +277,7 @@ _UserOperationController_entrypoint = new WeakMap(), _UserOperationController_ge
     userOperation.sender = sender;
     userOperation.signature = dummySignature ?? constants_1.EMPTY_BYTES;
     metadata.bundlerUrl = bundlerUrl;
-    await (0, gas_1.updateGas)(metadata, response, __classPrivateFieldGet(this, _UserOperationController_entrypoint, "f"));
+    await (0, gas_1.updateGas)(metadata, response, __classPrivateFieldGet(this, _UserOperationController_entrypoint, "f"), __classPrivateFieldGet(this, _UserOperationController_version, "f"));
     __classPrivateFieldGet(this, _UserOperationController_instances, "m", _UserOperationController_updateMetadata).call(this, metadata);
 }, _UserOperationController_addPaymasterData = async function _UserOperationController_addPaymasterData(metadata, smartContractAccount) {
     const { id, userOperation, chainId } = metadata;
@@ -322,7 +325,10 @@ _UserOperationController_entrypoint = new WeakMap(), _UserOperationController_ge
 }, _UserOperationController_submitUserOperation = async function _UserOperationController_submitUserOperation(metadata) {
     const { userOperation } = metadata;
     (0, logger_1.projectLogger)('Submitting user operation', userOperation);
-    const bundler = new Bundler_1.Bundler(metadata.bundlerUrl);
+    const bundler = new Bundler_1.Bundler({
+        url: metadata.bundlerUrl,
+        version: __classPrivateFieldGet(this, _UserOperationController_version, "f"),
+    });
     const hash = await bundler.sendUserOperation(userOperation, __classPrivateFieldGet(this, _UserOperationController_entrypoint, "f"));
     metadata.hash = hash;
     metadata.status = types_1.UserOperationStatus.Submitted;
diff --git a/dist/UserOperationController.cjs.map b/dist/UserOperationController.cjs.map
index 59fc443f5c886c6e52b2a19552642edcf3bc6f1e..891c4d3fb5fca0d239ce6790878383426b8c0887 100644
--- a/dist/UserOperationController.cjs.map
+++ b/dist/UserOperationController.cjs.map
@@ -1 +1 @@
-{"version":3,"file":"UserOperationController.cjs","sourceRoot":"","sources":["../src/UserOperationController.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  AcceptResultCallbacks,\n  AddApprovalRequest,\n  AddResult,\n} from '@metamask/approval-controller';\nimport type { RestrictedControllerMessenger } from '@metamask/base-controller';\nimport { BaseController } from '@metamask/base-controller';\nimport { ApprovalType } from '@metamask/controller-utils';\nimport EthQuery from '@metamask/eth-query';\nimport type { GasFeeState } from '@metamask/gas-fee-controller';\nimport type {\n  KeyringControllerPrepareUserOperationAction,\n  KeyringControllerPatchUserOperationAction,\n  KeyringControllerSignUserOperationAction,\n} from '@metamask/keyring-controller';\nimport type {\n  NetworkControllerGetNetworkClientByIdAction,\n  Provider,\n} from '@metamask/network-controller';\nimport { errorCodes } from '@metamask/rpc-errors';\nimport {\n  determineTransactionType,\n  type TransactionMeta,\n  type TransactionParams,\n  type TransactionType,\n} from '@metamask/transaction-controller';\nimport { add0x } from '@metamask/utils';\nimport EventEmitter from 'events';\nimport type { Patch } from 'immer';\nimport { cloneDeep } from 'lodash';\nimport { v1 as random } from 'uuid';\n\nimport { ADDRESS_ZERO, EMPTY_BYTES, VALUE_ZERO } from './constants';\nimport { Bundler } from './helpers/Bundler';\nimport { PendingUserOperationTracker } from './helpers/PendingUserOperationTracker';\nimport { SnapSmartContractAccount } from './helpers/SnapSmartContractAccount';\nimport { projectLogger as log } from './logger';\nimport type {\n  SmartContractAccount,\n  UserOperation,\n  UserOperationMetadata,\n} from './types';\nimport { UserOperationStatus } from './types';\nimport { updateGas } from './utils/gas';\nimport { updateGasFees } from './utils/gas-fees';\nimport { getTransactionMetadata } from './utils/transaction';\nimport {\n  validateAddUserOperationOptions,\n  validateAddUserOperationRequest,\n  validatePrepareUserOperationResponse,\n  validateSignUserOperationResponse,\n  validateUpdateUserOperationResponse,\n} from './utils/validation';\n\nconst controllerName = 'UserOperationController';\n\nconst stateMetadata = {\n  userOperations: { persist: true, anonymous: false },\n};\n\nconst getDefaultState = () => ({\n  userOperations: {},\n});\n\ntype Events = {\n  'transaction-updated': [metadata: TransactionMeta];\n  'user-operation-added': [metadata: UserOperationMetadata];\n  'user-operation-confirmed': [metadata: UserOperationMetadata];\n  'user-operation-failed': [metadata: UserOperationMetadata, error: Error];\n  [key: `${string}:confirmed`]: [metadata: UserOperationMetadata];\n  [key: `${string}:failed`]: [metadata: UserOperationMetadata, error: Error];\n};\n\nexport type UserOperationControllerEventEmitter = EventEmitter & {\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  on<T extends keyof Events>(\n    eventName: T,\n    listener: (...args: Events[T]) => void,\n  ): UserOperationControllerEventEmitter;\n\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  once<T extends keyof Events>(\n    eventName: T,\n    listener: (...args: Events[T]) => void,\n  ): UserOperationControllerEventEmitter;\n\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  emit<T extends keyof Events>(eventName: T, ...args: Events[T]): boolean;\n};\n\nexport type UserOperationControllerState = {\n  userOperations: Record<string, UserOperationMetadata>;\n};\n\nexport type GetUserOperationState = {\n  type: `${typeof controllerName}:getState`;\n  handler: () => UserOperationControllerState;\n};\n\nexport type UserOperationStateChange = {\n  type: `${typeof controllerName}:stateChange`;\n  payload: [UserOperationControllerState, Patch[]];\n};\n\nexport type UserOperationControllerActions =\n  | GetUserOperationState\n  | NetworkControllerGetNetworkClientByIdAction\n  | AddApprovalRequest\n  | KeyringControllerPrepareUserOperationAction\n  | KeyringControllerPatchUserOperationAction\n  | KeyringControllerSignUserOperationAction;\n\nexport type UserOperationControllerEvents = UserOperationStateChange;\n\nexport type UserOperationControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  UserOperationControllerActions,\n  UserOperationControllerEvents,\n  UserOperationControllerActions['type'],\n  UserOperationControllerEvents['type']\n>;\n\nexport type UserOperationControllerOptions = {\n  entrypoint: string;\n  getGasFeeEstimates: () => Promise<GasFeeState>;\n  interval?: number;\n  messenger: UserOperationControllerMessenger;\n  state?: Partial<UserOperationControllerState>;\n};\n\nexport type AddUserOperationRequest = {\n  data?: string;\n  from: string;\n  maxFeePerGas?: string;\n  maxPriorityFeePerGas?: string;\n  to?: string;\n  value?: string;\n};\n\nexport type AddUserOperationSwapOptions = {\n  approvalTxId?: string;\n  destinationTokenAddress?: string;\n  destinationTokenAmount?: string;\n  destinationTokenDecimals?: number;\n  destinationTokenSymbol?: string;\n  estimatedBaseFee?: string;\n  sourceTokenAddress?: string;\n  sourceTokenAmount?: string;\n  sourceTokenDecimals?: number;\n  sourceTokenSymbol?: string;\n  swapAndSendRecipient?: string;\n  swapMetaData?: Record<string, unknown>;\n  swapTokenValue?: string;\n};\n\nexport type AddUserOperationOptions = {\n  networkClientId: string;\n  origin: string;\n  requireApproval?: boolean;\n  smartContractAccount?: SmartContractAccount;\n  swaps?: AddUserOperationSwapOptions;\n  type?: TransactionType;\n};\n\nexport type AddUserOperationResponse = {\n  id: string;\n  hash: () => Promise<string | undefined>;\n  transactionHash: () => Promise<string | undefined>;\n};\n\n/**\n * All the objects related to a pending user operation in order to:\n * - Avoid duplicated effort to derive the same properties.\n * - Minimise duplicate arguments in private methods.\n */\ntype UserOperationCache = {\n  chainId: string;\n  metadata: UserOperationMetadata;\n  options: AddUserOperationOptions & {\n    smartContractAccount: SmartContractAccount;\n  };\n  provider: Provider;\n  request: AddUserOperationRequest;\n  transaction?: TransactionParams;\n};\n\n/**\n * Controller for creating and managing the life cycle of user operations.\n */\nexport class UserOperationController extends BaseController<\n  typeof controllerName,\n  UserOperationControllerState,\n  UserOperationControllerMessenger\n> {\n  hub: UserOperationControllerEventEmitter;\n\n  #entrypoint: string;\n\n  #getGasFeeEstimates: () => Promise<GasFeeState>;\n\n  #pendingUserOperationTracker: PendingUserOperationTracker;\n\n  /**\n   * Construct a UserOperationController instance.\n   *\n   * @param options - Controller options.\n   * @param options.entrypoint - Address of the entrypoint contract.\n   * @param options.getGasFeeEstimates - Callback to get gas fee estimates.\n   * @param options.messenger - Restricted controller messenger for the user operation controller.\n   * @param options.state - Initial state to set on the controller.\n   */\n  constructor({\n    entrypoint,\n    getGasFeeEstimates,\n    messenger,\n    state,\n  }: UserOperationControllerOptions) {\n    super({\n      name: controllerName,\n      metadata: stateMetadata,\n      messenger,\n      state: { ...getDefaultState(), ...state },\n    });\n\n    this.hub = new EventEmitter() as UserOperationControllerEventEmitter;\n\n    this.#entrypoint = entrypoint;\n    this.#getGasFeeEstimates = getGasFeeEstimates;\n\n    this.#pendingUserOperationTracker = new PendingUserOperationTracker({\n      getUserOperations: () =>\n        cloneDeep(Object.values(this.state.userOperations)),\n      messenger,\n    });\n\n    this.#addPendingUserOperationTrackerListeners();\n  }\n\n  /**\n   * Create and submit a user operation.\n   *\n   * @param request - Information required to create a user operation.\n   * @param request.data - Data to include in the resulting transaction.\n   * @param request.maxFeePerGas - Maximum fee per gas to pay towards the transaction.\n   * @param request.maxPriorityFeePerGas - Maximum priority fee per gas to pay towards the transaction.\n   * @param request.to - Destination address of the resulting transaction.\n   * @param request.value - Value to include in the resulting transaction.\n   * @param options - Configuration options when creating a user operation.\n   * @param options.networkClientId - ID of the network client used to query the chain.\n   * @param options.origin - Origin of the user operation, such as the hostname of a dApp.\n   * @param options.requireApproval - Whether to require user approval before submitting the user operation. Defaults to true.\n   * @param options.smartContractAccount - Smart contract abstraction to provide the contract specific values such as call data and nonce. Defaults to the current snap account.\n   * @param options.swaps - Swap metadata to record with the user operation.\n   * @param options.type - Type of the transaction.\n   */\n  async addUserOperation(\n    request: AddUserOperationRequest,\n    options: AddUserOperationOptions,\n  ): Promise<AddUserOperationResponse> {\n    validateAddUserOperationRequest(request);\n    validateAddUserOperationOptions(options);\n\n    return await this.#addUserOperation(request, options);\n  }\n\n  /**\n   * Create and submit a user operation equivalent to the provided transaction.\n   *\n   * @param transaction - Transaction to use as the basis for the user operation.\n   * @param options - Configuration options when creating a user operation.\n   * @param options.networkClientId - ID of the network client used to query the chain.\n   * @param options.origin - Origin of the user operation, such as the hostname of a dApp.\n   * @param options.requireApproval - Whether to require user approval before submitting the user operation. Defaults to true.\n   * @param options.smartContractAccount - Smart contract abstraction to provide the contract specific values such as call data and nonce. Defaults to the current snap account.\n   * @param options.swaps - Swap metadata to record with the user operation.\n   * @param options.type - Type of the transaction.\n   */\n  async addUserOperationFromTransaction(\n    transaction: TransactionParams,\n    options: AddUserOperationOptions,\n  ): Promise<AddUserOperationResponse> {\n    validateAddUserOperationOptions(options);\n\n    const { data, from, maxFeePerGas, maxPriorityFeePerGas, to, value } =\n      transaction;\n\n    const request: AddUserOperationRequest = {\n      data: data === '' ? undefined : data,\n      from,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      to,\n      value,\n    };\n\n    validateAddUserOperationRequest(request);\n\n    return await this.#addUserOperation(request, { ...options, transaction });\n  }\n\n  startPollingByNetworkClientId(networkClientId: string): string {\n    return this.#pendingUserOperationTracker.startPollingByNetworkClientId(\n      networkClientId,\n    );\n  }\n\n  async #addUserOperation(\n    request: AddUserOperationRequest,\n    options: AddUserOperationOptions & { transaction?: TransactionParams },\n  ): Promise<AddUserOperationResponse> {\n    log('Adding user operation', { request, options });\n\n    const {\n      networkClientId,\n      origin,\n      smartContractAccount: requestSmartContractAccount,\n      swaps,\n      transaction,\n    } = options;\n\n    const { chainId, provider } = await this.#getProvider(networkClientId);\n\n    const metadata = await this.#createMetadata(\n      chainId,\n      origin,\n      transaction,\n      swaps,\n    );\n\n    const smartContractAccount =\n      requestSmartContractAccount ??\n      new SnapSmartContractAccount(this.messagingSystem);\n\n    const cache: UserOperationCache = {\n      chainId,\n      metadata,\n      options: { ...options, smartContractAccount },\n      provider,\n      request,\n      transaction,\n    };\n\n    const { id } = metadata;\n    let throwError = false;\n\n    const hashValue = (async () => {\n      try {\n        return await this.#prepareAndSubmitUserOperation(cache);\n      } catch (error) {\n        this.#failUserOperation(metadata, error);\n\n        if (throwError) {\n          throw error;\n        }\n\n        return undefined;\n      }\n    })();\n\n    const hash = async () => {\n      throwError = true;\n      return await hashValue;\n    };\n\n    const transactionHash = async () => {\n      await hash();\n\n      const { transactionHash: finalTransactionHash } =\n        await this.#waitForConfirmation(metadata);\n\n      return finalTransactionHash as string;\n    };\n\n    return {\n      id,\n      hash,\n      transactionHash,\n    };\n  }\n\n  async #prepareAndSubmitUserOperation(cache: UserOperationCache) {\n    const { metadata, options } = cache;\n    const { requireApproval, smartContractAccount } = options;\n    let resultCallbacks: AcceptResultCallbacks | undefined;\n\n    try {\n      await this.#prepareUserOperation(cache);\n      await this.#addPaymasterData(metadata, smartContractAccount);\n\n      this.hub.emit('user-operation-added', metadata);\n\n      if (requireApproval !== false) {\n        resultCallbacks = await this.#approveUserOperation(cache);\n      }\n\n      await this.#signUserOperation(metadata, smartContractAccount);\n      await this.#submitUserOperation(metadata);\n\n      resultCallbacks?.success();\n\n      return metadata.hash as string;\n    } catch (error) {\n      /* istanbul ignore next */\n      resultCallbacks?.error(error as Error);\n      throw error;\n    }\n  }\n\n  async #waitForConfirmation(\n    metadata: UserOperationMetadata,\n  ): Promise<UserOperationMetadata> {\n    const { id, hash } = metadata;\n\n    log('Waiting for confirmation', id, hash);\n\n    return new Promise((resolve, reject) => {\n      this.hub.once(`${id}:confirmed`, (finalMetadata) => {\n        resolve(finalMetadata);\n      });\n\n      this.hub.once(`${id}:failed`, (_finalMetadata, error) => {\n        reject(error);\n      });\n    });\n  }\n\n  async #createMetadata(\n    chainId: string,\n    origin: string,\n    transaction?: TransactionParams,\n    swaps?: AddUserOperationSwapOptions,\n  ): Promise<UserOperationMetadata> {\n    const metadata: UserOperationMetadata = {\n      actualGasCost: null,\n      actualGasUsed: null,\n      baseFeePerGas: null,\n      bundlerUrl: null,\n      chainId,\n      error: null,\n      hash: null,\n      id: random(),\n      origin,\n      status: UserOperationStatus.Unapproved,\n      swapsMetadata: swaps\n        ? {\n            approvalTxId: swaps.approvalTxId ?? null,\n            destinationTokenAddress: swaps.destinationTokenAddress ?? null,\n            destinationTokenAmount: swaps.destinationTokenAmount ?? null,\n            destinationTokenDecimals: swaps.destinationTokenDecimals ?? null,\n            destinationTokenSymbol: swaps.destinationTokenSymbol ?? null,\n            estimatedBaseFee: swaps.estimatedBaseFee ?? null,\n            sourceTokenAddress: swaps.sourceTokenAddress ?? null,\n            sourceTokenAmount: swaps.sourceTokenAmount ?? null,\n            sourceTokenDecimals: swaps.sourceTokenDecimals ?? null,\n            sourceTokenSymbol: swaps.sourceTokenSymbol ?? null,\n            swapAndSendRecipient: swaps.swapAndSendRecipient ?? null,\n            swapMetaData: (swaps.swapMetaData as Record<string, never>) ?? null,\n            swapTokenValue: swaps.swapTokenValue ?? null,\n          }\n        : null,\n      time: Date.now(),\n      transactionHash: null,\n      transactionParams: (transaction as Required<TransactionParams>) ?? null,\n      transactionType: null,\n      userFeeLevel: null,\n      userOperation: this.#createEmptyUserOperation(transaction),\n    };\n\n    this.#updateMetadata(metadata);\n\n    log('Added user operation', metadata.id);\n\n    return metadata;\n  }\n\n  async #prepareUserOperation(cache: UserOperationCache) {\n    const { chainId, metadata, options, provider, request, transaction } =\n      cache;\n\n    const { data, from, to, value } = request;\n    const { id, transactionParams, userOperation } = metadata;\n    const { smartContractAccount } = options;\n\n    log('Preparing user operation', { id });\n\n    const transactionType = await this.#getTransactionType(\n      transaction,\n      provider,\n      options,\n    );\n\n    metadata.transactionType = transactionType ?? null;\n\n    log('Determined transaction type', transactionType);\n\n    await updateGasFees({\n      getGasFeeEstimates: this.#getGasFeeEstimates,\n      metadata,\n      originalRequest: request,\n      provider,\n      transaction: transactionParams ?? undefined,\n    });\n\n    const response = await smartContractAccount.prepareUserOperation({\n      chainId,\n      data,\n      from,\n      to,\n      value,\n    });\n\n    validatePrepareUserOperationResponse(response);\n\n    const {\n      bundler: bundlerUrl,\n      callData,\n      dummyPaymasterAndData,\n      dummySignature,\n      initCode,\n      nonce,\n      sender,\n    } = response;\n\n    userOperation.callData = callData;\n    userOperation.initCode = initCode ?? EMPTY_BYTES;\n    userOperation.nonce = nonce;\n    userOperation.paymasterAndData = dummyPaymasterAndData ?? EMPTY_BYTES;\n    userOperation.sender = sender;\n    userOperation.signature = dummySignature ?? EMPTY_BYTES;\n\n    metadata.bundlerUrl = bundlerUrl;\n\n    await updateGas(metadata, response, this.#entrypoint);\n\n    this.#updateMetadata(metadata);\n  }\n\n  async #addPaymasterData(\n    metadata: UserOperationMetadata,\n    smartContractAccount: SmartContractAccount,\n  ) {\n    const { id, userOperation, chainId } = metadata;\n\n    log('Requesting paymaster data', { id });\n\n    const response = await smartContractAccount.updateUserOperation({\n      userOperation,\n      chainId,\n    });\n\n    validateUpdateUserOperationResponse(response);\n\n    userOperation.paymasterAndData = response.paymasterAndData ?? EMPTY_BYTES;\n    if (response.callGasLimit) {\n      userOperation.callGasLimit = response.callGasLimit;\n    }\n    if (response.preVerificationGas) {\n      userOperation.preVerificationGas = response.preVerificationGas;\n    }\n    if (response.verificationGasLimit) {\n      userOperation.verificationGasLimit = response.verificationGasLimit;\n    }\n\n    this.#updateMetadata(metadata);\n  }\n\n  async #approveUserOperation(cache: UserOperationCache) {\n    log('Requesting approval');\n\n    const { metadata } = cache;\n\n    const { resultCallbacks, value } = await this.#requestApproval(metadata);\n    const updatedTransaction = value?.txMeta;\n\n    if (updatedTransaction) {\n      await this.#updateUserOperationAfterApproval(cache, updatedTransaction);\n    }\n\n    metadata.status = UserOperationStatus.Approved;\n\n    this.#updateMetadata(metadata);\n\n    return resultCallbacks;\n  }\n\n  async #signUserOperation(\n    metadata: UserOperationMetadata,\n    smartContractAccount: SmartContractAccount,\n  ) {\n    const { id, chainId, userOperation } = metadata;\n\n    log('Signing user operation', id, userOperation);\n\n    const response = await smartContractAccount.signUserOperation({\n      userOperation,\n      chainId,\n    });\n\n    validateSignUserOperationResponse(response);\n\n    const { signature } = response;\n\n    userOperation.signature = signature;\n\n    log('Signed user operation', signature);\n\n    metadata.status = UserOperationStatus.Signed;\n\n    this.#updateMetadata(metadata);\n  }\n\n  async #submitUserOperation(metadata: UserOperationMetadata) {\n    const { userOperation } = metadata;\n\n    log('Submitting user operation', userOperation);\n\n    const bundler = new Bundler(metadata.bundlerUrl as string);\n\n    const hash = await bundler.sendUserOperation(\n      userOperation,\n      this.#entrypoint,\n    );\n\n    metadata.hash = hash;\n    metadata.status = UserOperationStatus.Submitted;\n\n    this.#updateMetadata(metadata);\n  }\n\n  #failUserOperation(metadata: UserOperationMetadata, error: unknown) {\n    const { id } = metadata;\n    const rawError = error as Record<string, string>;\n\n    log('User operation failed', id, error);\n\n    metadata.error = {\n      name: rawError.name,\n      message: rawError.message,\n      stack: rawError.stack,\n      code: rawError.code,\n      rpc: rawError.value,\n    };\n\n    metadata.status = UserOperationStatus.Failed;\n\n    this.#updateMetadata(metadata);\n\n    if (\n      String(rawError.code) === String(errorCodes.provider.userRejectedRequest)\n    ) {\n      this.#deleteMetadata(id);\n    }\n  }\n\n  #createEmptyUserOperation(transaction?: TransactionParams): UserOperation {\n    return {\n      callData: EMPTY_BYTES,\n      callGasLimit: EMPTY_BYTES,\n      initCode: EMPTY_BYTES,\n      maxFeePerGas: transaction?.maxFeePerGas ?? EMPTY_BYTES,\n      maxPriorityFeePerGas: transaction?.maxPriorityFeePerGas ?? EMPTY_BYTES,\n      nonce: EMPTY_BYTES,\n      paymasterAndData: EMPTY_BYTES,\n      preVerificationGas: EMPTY_BYTES,\n      sender: ADDRESS_ZERO,\n      signature: EMPTY_BYTES,\n      verificationGasLimit: EMPTY_BYTES,\n    };\n  }\n\n  #updateMetadata(metadata: UserOperationMetadata) {\n    const { id } = metadata;\n\n    this.update((state) => {\n      state.userOperations[id] = cloneDeep(metadata);\n    });\n\n    this.#updateTransaction(metadata);\n  }\n\n  #deleteMetadata(id: string) {\n    this.update((state) => {\n      delete state.userOperations[id];\n    });\n  }\n\n  #updateTransaction(metadata: UserOperationMetadata) {\n    if (!metadata.transactionParams) {\n      return;\n    }\n\n    const transactionMetadata = getTransactionMetadata(metadata);\n\n    this.hub.emit('transaction-updated', transactionMetadata);\n  }\n\n  #addPendingUserOperationTrackerListeners() {\n    this.#pendingUserOperationTracker.hub.on(\n      'user-operation-confirmed',\n      (metadata) => {\n        log('In listener...');\n        this.hub.emit('user-operation-confirmed', metadata);\n        // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        this.hub.emit(`${metadata.id}:confirmed`, metadata);\n      },\n    );\n\n    this.#pendingUserOperationTracker.hub.on(\n      'user-operation-failed',\n      (metadata, error) => {\n        this.hub.emit('user-operation-failed', metadata, error);\n        // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        this.hub.emit(`${metadata.id}:failed`, metadata, error);\n      },\n    );\n\n    this.#pendingUserOperationTracker.hub.on(\n      'user-operation-updated',\n      (metadata) => {\n        this.#updateMetadata(metadata);\n      },\n    );\n  }\n\n  async #requestApproval(metadata: UserOperationMetadata) {\n    const { id, origin } = metadata;\n    const type = ApprovalType.Transaction;\n    const requestData = { txId: id };\n\n    return (await this.messagingSystem.call(\n      'ApprovalController:addRequest',\n      {\n        id,\n        origin,\n        type,\n        requestData,\n        expectsResult: true,\n      },\n      true, // Should display approval request to user\n    )) as AddResult & { value?: { txMeta?: TransactionMeta } };\n  }\n\n  async #getTransactionType(\n    transaction: TransactionParams | undefined,\n    provider: Provider,\n    options: AddUserOperationOptions,\n  ): Promise<TransactionType | undefined> {\n    if (!transaction) {\n      return undefined;\n    }\n\n    if (options.type) {\n      return options.type;\n    }\n\n    const ethQuery = new EthQuery(provider);\n    const result = determineTransactionType(transaction, ethQuery);\n\n    return (await result).type;\n  }\n\n  async #getProvider(\n    networkClientId: string,\n  ): Promise<{ provider: Provider; chainId: string }> {\n    const { provider, configuration } = this.messagingSystem.call(\n      'NetworkController:getNetworkClientById',\n      networkClientId,\n    );\n\n    const { chainId } = configuration;\n\n    return { provider, chainId };\n  }\n\n  async #updateUserOperationAfterApproval(\n    cache: UserOperationCache,\n    updatedTransaction: TransactionMeta,\n  ) {\n    log('Found updated transaction in approval', { updatedTransaction });\n\n    const { metadata, request } = cache;\n\n    const { userOperation } = metadata;\n    const usingPaymaster = userOperation.paymasterAndData !== EMPTY_BYTES;\n\n    const updatedMaxFeePerGas = add0x(\n      updatedTransaction.txParams.maxFeePerGas as string,\n    );\n\n    const updatedMaxPriorityFeePerGas = add0x(\n      updatedTransaction.txParams.maxPriorityFeePerGas as string,\n    );\n\n    let regenerateUserOperation = false;\n    const previousMaxFeePerGas = userOperation.maxFeePerGas;\n    const previousMaxPriorityFeePerGas = userOperation.maxPriorityFeePerGas;\n\n    const gasFeesUpdated =\n      previousMaxFeePerGas !== updatedMaxFeePerGas ||\n      previousMaxPriorityFeePerGas !== updatedMaxPriorityFeePerGas;\n\n    /**\n     * true when we detect {@link getTransactionMetadata} has set the gas fees to zero\n     * because the userOperation has a paymaster. This should not be mistaken for gas\n     * fees being updated during the approval process.\n     */\n    const areGasFeesZeroBecauseOfPaymaster =\n      usingPaymaster &&\n      updatedMaxFeePerGas === VALUE_ZERO &&\n      updatedMaxPriorityFeePerGas === VALUE_ZERO;\n\n    if (gasFeesUpdated && !areGasFeesZeroBecauseOfPaymaster) {\n      log('Gas fees updated during approval', {\n        previousMaxFeePerGas,\n        previousMaxPriorityFeePerGas,\n        updatedMaxFeePerGas,\n        updatedMaxPriorityFeePerGas,\n      });\n\n      userOperation.maxFeePerGas = updatedMaxFeePerGas;\n      userOperation.maxPriorityFeePerGas = updatedMaxPriorityFeePerGas;\n\n      regenerateUserOperation = usingPaymaster;\n    }\n\n    const previousData = request.data ?? EMPTY_BYTES;\n    const updatedData = updatedTransaction.txParams.data ?? EMPTY_BYTES;\n\n    if (previousData !== updatedData) {\n      log('Data updated during approval', { previousData, updatedData });\n      regenerateUserOperation = true;\n    }\n\n    const previousValue = request.value ?? VALUE_ZERO;\n    const updatedValue = updatedTransaction.txParams.value ?? VALUE_ZERO;\n\n    if (previousValue !== updatedValue) {\n      log('Value updated during approval', { previousValue, updatedValue });\n      regenerateUserOperation = true;\n    }\n\n    if (regenerateUserOperation) {\n      const updatedRequest = {\n        ...request,\n        data: updatedData,\n        maxFeePerGas: updatedMaxFeePerGas,\n        maxPriorityFeePerGas: updatedMaxPriorityFeePerGas,\n        value: updatedValue,\n      };\n\n      await this.#regenerateUserOperation({\n        ...cache,\n        request: updatedRequest,\n      });\n    }\n  }\n\n  async #regenerateUserOperation(cache: UserOperationCache) {\n    log(\n      'Regenerating user operation as parameters were updated during approval',\n    );\n\n    const {\n      options: { smartContractAccount },\n      metadata,\n    } = cache;\n\n    await this.#prepareUserOperation(cache);\n    await this.#addPaymasterData(metadata, smartContractAccount);\n\n    log('Regenerated user operation', metadata.userOperation);\n  }\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"UserOperationController.cjs","sourceRoot":"","sources":["../src/UserOperationController.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  AcceptResultCallbacks,\n  AddApprovalRequest,\n  AddResult,\n} from '@metamask/approval-controller';\nimport type { RestrictedControllerMessenger } from '@metamask/base-controller';\nimport { BaseController } from '@metamask/base-controller';\nimport { ApprovalType } from '@metamask/controller-utils';\nimport EthQuery from '@metamask/eth-query';\nimport type { GasFeeState } from '@metamask/gas-fee-controller';\nimport type {\n  KeyringControllerPrepareUserOperationAction,\n  KeyringControllerPatchUserOperationAction,\n  KeyringControllerSignUserOperationAction,\n} from '@metamask/keyring-controller';\nimport type {\n  NetworkControllerGetNetworkClientByIdAction,\n  Provider,\n} from '@metamask/network-controller';\nimport { errorCodes } from '@metamask/rpc-errors';\nimport {\n  determineTransactionType,\n  type TransactionMeta,\n  type TransactionParams,\n  type TransactionType,\n} from '@metamask/transaction-controller';\nimport { add0x } from '@metamask/utils';\nimport EventEmitter from 'events';\nimport type { Patch } from 'immer';\nimport { cloneDeep } from 'lodash';\nimport { v1 as random } from 'uuid';\n\nimport { ADDRESS_ZERO, EMPTY_BYTES, VALUE_ZERO } from './constants';\nimport { Bundler } from './helpers/Bundler';\nimport { PendingUserOperationTracker } from './helpers/PendingUserOperationTracker';\nimport { SnapSmartContractAccount } from './helpers/SnapSmartContractAccount';\nimport { projectLogger as log } from './logger';\nimport type {\n  SmartContractAccount,\n  UserOperation,\n  UserOperationMetadata,\n} from './types';\nimport { Version4337, UserOperationStatus } from './types';\nimport { updateGas } from './utils/gas';\nimport { updateGasFees } from './utils/gas-fees';\nimport { getTransactionMetadata } from './utils/transaction';\nimport {\n  validateAddUserOperationOptions,\n  validateAddUserOperationRequest,\n  validatePrepareUserOperationResponse,\n  validateSignUserOperationResponse,\n  validateUpdateUserOperationResponse,\n} from './utils/validation';\n\nconst controllerName = 'UserOperationController';\n\nconst stateMetadata = {\n  userOperations: { persist: true, anonymous: false },\n};\n\nconst getDefaultState = () => ({\n  userOperations: {},\n});\n\ntype Events = {\n  'transaction-updated': [metadata: TransactionMeta];\n  'user-operation-added': [metadata: UserOperationMetadata];\n  'user-operation-confirmed': [metadata: UserOperationMetadata];\n  'user-operation-failed': [metadata: UserOperationMetadata, error: Error];\n  [key: `${string}:confirmed`]: [metadata: UserOperationMetadata];\n  [key: `${string}:failed`]: [metadata: UserOperationMetadata, error: Error];\n};\n\nexport type UserOperationControllerEventEmitter = EventEmitter & {\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  on<T extends keyof Events>(\n    eventName: T,\n    listener: (...args: Events[T]) => void,\n  ): UserOperationControllerEventEmitter;\n\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  once<T extends keyof Events>(\n    eventName: T,\n    listener: (...args: Events[T]) => void,\n  ): UserOperationControllerEventEmitter;\n\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  emit<T extends keyof Events>(eventName: T, ...args: Events[T]): boolean;\n};\n\nexport type UserOperationControllerState = {\n  userOperations: Record<string, UserOperationMetadata>;\n};\n\nexport type GetUserOperationState = {\n  type: `${typeof controllerName}:getState`;\n  handler: () => UserOperationControllerState;\n};\n\nexport type UserOperationStateChange = {\n  type: `${typeof controllerName}:stateChange`;\n  payload: [UserOperationControllerState, Patch[]];\n};\n\nexport type UserOperationControllerActions =\n  | GetUserOperationState\n  | NetworkControllerGetNetworkClientByIdAction\n  | AddApprovalRequest\n  | KeyringControllerPrepareUserOperationAction\n  | KeyringControllerPatchUserOperationAction\n  | KeyringControllerSignUserOperationAction;\n\nexport type UserOperationControllerEvents = UserOperationStateChange;\n\nexport type UserOperationControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  UserOperationControllerActions,\n  UserOperationControllerEvents,\n  UserOperationControllerActions['type'],\n  UserOperationControllerEvents['type']\n>;\n\nexport type UserOperationControllerOptions = {\n  entrypoint: string;\n  getGasFeeEstimates: () => Promise<GasFeeState>;\n  interval?: number;\n  messenger: UserOperationControllerMessenger;\n  state?: Partial<UserOperationControllerState>;\n  version?: Version4337;\n};\n\nexport type AddUserOperationRequest = {\n  data?: string;\n  from: string;\n  maxFeePerGas?: string;\n  maxPriorityFeePerGas?: string;\n  to?: string;\n  value?: string;\n};\n\nexport type AddUserOperationSwapOptions = {\n  approvalTxId?: string;\n  destinationTokenAddress?: string;\n  destinationTokenAmount?: string;\n  destinationTokenDecimals?: number;\n  destinationTokenSymbol?: string;\n  estimatedBaseFee?: string;\n  sourceTokenAddress?: string;\n  sourceTokenAmount?: string;\n  sourceTokenDecimals?: number;\n  sourceTokenSymbol?: string;\n  swapAndSendRecipient?: string;\n  swapMetaData?: Record<string, unknown>;\n  swapTokenValue?: string;\n};\n\nexport type AddUserOperationOptions = {\n  networkClientId: string;\n  origin: string;\n  requireApproval?: boolean;\n  smartContractAccount?: SmartContractAccount;\n  swaps?: AddUserOperationSwapOptions;\n  type?: TransactionType;\n};\n\nexport type AddUserOperationResponse = {\n  id: string;\n  hash: () => Promise<string | undefined>;\n  transactionHash: () => Promise<string | undefined>;\n};\n\n/**\n * All the objects related to a pending user operation in order to:\n * - Avoid duplicated effort to derive the same properties.\n * - Minimise duplicate arguments in private methods.\n */\ntype UserOperationCache = {\n  chainId: string;\n  metadata: UserOperationMetadata;\n  options: AddUserOperationOptions & {\n    smartContractAccount: SmartContractAccount;\n  };\n  provider: Provider;\n  request: AddUserOperationRequest;\n  transaction?: TransactionParams;\n};\n\n/**\n * Controller for creating and managing the life cycle of user operations.\n */\nexport class UserOperationController extends BaseController<\n  typeof controllerName,\n  UserOperationControllerState,\n  UserOperationControllerMessenger\n> {\n  hub: UserOperationControllerEventEmitter;\n\n  #entrypoint: string;\n\n  #getGasFeeEstimates: () => Promise<GasFeeState>;\n\n  #pendingUserOperationTracker: PendingUserOperationTracker;\n\n  #version: Version4337;\n\n  /**\n   * Construct a UserOperationController instance.\n   *\n   * @param options - Controller options.\n   * @param options.entrypoint - Address of the entrypoint contract.\n   * @param options.getGasFeeEstimates - Callback to get gas fee estimates.\n   * @param options.messenger - Restricted controller messenger for the user operation controller.\n   * @param options.state - Initial state to set on the controller.\n   * @param options.version - Version of the 4337 specification to use.\n   */\n  constructor({\n    entrypoint,\n    getGasFeeEstimates,\n    messenger,\n    state,\n    version,\n  }: UserOperationControllerOptions) {\n    super({\n      name: controllerName,\n      metadata: stateMetadata,\n      messenger,\n      state: { ...getDefaultState(), ...state },\n    });\n\n    this.hub = new EventEmitter() as UserOperationControllerEventEmitter;\n\n    this.#entrypoint = entrypoint;\n    this.#getGasFeeEstimates = getGasFeeEstimates;\n    this.#version = version ?? Version4337.V06;\n\n    this.#pendingUserOperationTracker = new PendingUserOperationTracker({\n      getUserOperations: () =>\n        cloneDeep(Object.values(this.state.userOperations)),\n      messenger,\n    });\n\n    this.#addPendingUserOperationTrackerListeners();\n  }\n\n  /**\n   * Create and submit a user operation.\n   *\n   * @param request - Information required to create a user operation.\n   * @param request.data - Data to include in the resulting transaction.\n   * @param request.maxFeePerGas - Maximum fee per gas to pay towards the transaction.\n   * @param request.maxPriorityFeePerGas - Maximum priority fee per gas to pay towards the transaction.\n   * @param request.to - Destination address of the resulting transaction.\n   * @param request.value - Value to include in the resulting transaction.\n   * @param options - Configuration options when creating a user operation.\n   * @param options.networkClientId - ID of the network client used to query the chain.\n   * @param options.origin - Origin of the user operation, such as the hostname of a dApp.\n   * @param options.requireApproval - Whether to require user approval before submitting the user operation. Defaults to true.\n   * @param options.smartContractAccount - Smart contract abstraction to provide the contract specific values such as call data and nonce. Defaults to the current snap account.\n   * @param options.swaps - Swap metadata to record with the user operation.\n   * @param options.type - Type of the transaction.\n   */\n  async addUserOperation(\n    request: AddUserOperationRequest,\n    options: AddUserOperationOptions,\n  ): Promise<AddUserOperationResponse> {\n    validateAddUserOperationRequest(request);\n    validateAddUserOperationOptions(options);\n\n    return await this.#addUserOperation(request, options);\n  }\n\n  /**\n   * Create and submit a user operation equivalent to the provided transaction.\n   *\n   * @param transaction - Transaction to use as the basis for the user operation.\n   * @param options - Configuration options when creating a user operation.\n   * @param options.networkClientId - ID of the network client used to query the chain.\n   * @param options.origin - Origin of the user operation, such as the hostname of a dApp.\n   * @param options.requireApproval - Whether to require user approval before submitting the user operation. Defaults to true.\n   * @param options.smartContractAccount - Smart contract abstraction to provide the contract specific values such as call data and nonce. Defaults to the current snap account.\n   * @param options.swaps - Swap metadata to record with the user operation.\n   * @param options.type - Type of the transaction.\n   */\n  async addUserOperationFromTransaction(\n    transaction: TransactionParams,\n    options: AddUserOperationOptions,\n  ): Promise<AddUserOperationResponse> {\n    validateAddUserOperationOptions(options);\n\n    const { data, from, maxFeePerGas, maxPriorityFeePerGas, to, value } =\n      transaction;\n\n    const request: AddUserOperationRequest = {\n      data: data === '' ? undefined : data,\n      from,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      to,\n      value,\n    };\n\n    validateAddUserOperationRequest(request);\n\n    return await this.#addUserOperation(request, { ...options, transaction });\n  }\n\n  startPollingByNetworkClientId(networkClientId: string): string {\n    return this.#pendingUserOperationTracker.startPollingByNetworkClientId(\n      networkClientId,\n    );\n  }\n\n  async #addUserOperation(\n    request: AddUserOperationRequest,\n    options: AddUserOperationOptions & { transaction?: TransactionParams },\n  ): Promise<AddUserOperationResponse> {\n    log('Adding user operation', { request, options });\n\n    const {\n      networkClientId,\n      origin,\n      smartContractAccount: requestSmartContractAccount,\n      swaps,\n      transaction,\n    } = options;\n\n    const { chainId, provider } = await this.#getProvider(networkClientId);\n\n    const metadata = await this.#createMetadata(\n      chainId,\n      origin,\n      transaction,\n      swaps,\n    );\n\n    const smartContractAccount =\n      requestSmartContractAccount ??\n      new SnapSmartContractAccount(this.messagingSystem);\n\n    const cache: UserOperationCache = {\n      chainId,\n      metadata,\n      options: { ...options, smartContractAccount },\n      provider,\n      request,\n      transaction,\n    };\n\n    const { id } = metadata;\n    let throwError = false;\n\n    const hashValue = (async () => {\n      try {\n        return await this.#prepareAndSubmitUserOperation(cache);\n      } catch (error) {\n        this.#failUserOperation(metadata, error);\n\n        if (throwError) {\n          throw error;\n        }\n\n        return undefined;\n      }\n    })();\n\n    const hash = async () => {\n      throwError = true;\n      return await hashValue;\n    };\n\n    const transactionHash = async () => {\n      await hash();\n\n      const { transactionHash: finalTransactionHash } =\n        await this.#waitForConfirmation(metadata);\n\n      return finalTransactionHash as string;\n    };\n\n    return {\n      id,\n      hash,\n      transactionHash,\n    };\n  }\n\n  async #prepareAndSubmitUserOperation(cache: UserOperationCache) {\n    const { metadata, options } = cache;\n    const { requireApproval, smartContractAccount } = options;\n    let resultCallbacks: AcceptResultCallbacks | undefined;\n\n    try {\n      await this.#prepareUserOperation(cache);\n      await this.#addPaymasterData(metadata, smartContractAccount);\n\n      this.hub.emit('user-operation-added', metadata);\n\n      if (requireApproval !== false) {\n        resultCallbacks = await this.#approveUserOperation(cache);\n      }\n\n      await this.#signUserOperation(metadata, smartContractAccount);\n      await this.#submitUserOperation(metadata);\n\n      resultCallbacks?.success();\n\n      return metadata.hash as string;\n    } catch (error) {\n      /* istanbul ignore next */\n      resultCallbacks?.error(error as Error);\n      throw error;\n    }\n  }\n\n  async #waitForConfirmation(\n    metadata: UserOperationMetadata,\n  ): Promise<UserOperationMetadata> {\n    const { id, hash } = metadata;\n\n    log('Waiting for confirmation', id, hash);\n\n    return new Promise((resolve, reject) => {\n      this.hub.once(`${id}:confirmed`, (finalMetadata) => {\n        resolve(finalMetadata);\n      });\n\n      this.hub.once(`${id}:failed`, (_finalMetadata, error) => {\n        reject(error);\n      });\n    });\n  }\n\n  async #createMetadata(\n    chainId: string,\n    origin: string,\n    transaction?: TransactionParams,\n    swaps?: AddUserOperationSwapOptions,\n  ): Promise<UserOperationMetadata> {\n    const metadata: UserOperationMetadata = {\n      actualGasCost: null,\n      actualGasUsed: null,\n      baseFeePerGas: null,\n      bundlerUrl: null,\n      chainId,\n      error: null,\n      hash: null,\n      id: random(),\n      origin,\n      status: UserOperationStatus.Unapproved,\n      swapsMetadata: swaps\n        ? {\n            approvalTxId: swaps.approvalTxId ?? null,\n            destinationTokenAddress: swaps.destinationTokenAddress ?? null,\n            destinationTokenAmount: swaps.destinationTokenAmount ?? null,\n            destinationTokenDecimals: swaps.destinationTokenDecimals ?? null,\n            destinationTokenSymbol: swaps.destinationTokenSymbol ?? null,\n            estimatedBaseFee: swaps.estimatedBaseFee ?? null,\n            sourceTokenAddress: swaps.sourceTokenAddress ?? null,\n            sourceTokenAmount: swaps.sourceTokenAmount ?? null,\n            sourceTokenDecimals: swaps.sourceTokenDecimals ?? null,\n            sourceTokenSymbol: swaps.sourceTokenSymbol ?? null,\n            swapAndSendRecipient: swaps.swapAndSendRecipient ?? null,\n            swapMetaData: (swaps.swapMetaData as Record<string, never>) ?? null,\n            swapTokenValue: swaps.swapTokenValue ?? null,\n          }\n        : null,\n      time: Date.now(),\n      transactionHash: null,\n      transactionParams: (transaction as Required<TransactionParams>) ?? null,\n      transactionType: null,\n      userFeeLevel: null,\n      userOperation: this.#createEmptyUserOperation(transaction),\n    };\n\n    this.#updateMetadata(metadata);\n\n    log('Added user operation', metadata.id);\n\n    return metadata;\n  }\n\n  async #prepareUserOperation(cache: UserOperationCache) {\n    const { chainId, metadata, options, provider, request, transaction } =\n      cache;\n\n    const { data, from, to, value } = request;\n    const { id, transactionParams, userOperation } = metadata;\n    const { smartContractAccount } = options;\n\n    log('Preparing user operation', { id });\n\n    const transactionType = await this.#getTransactionType(\n      transaction,\n      provider,\n      options,\n    );\n\n    metadata.transactionType = transactionType ?? null;\n\n    log('Determined transaction type', transactionType);\n\n    await updateGasFees({\n      getGasFeeEstimates: this.#getGasFeeEstimates,\n      metadata,\n      originalRequest: request,\n      provider,\n      transaction: transactionParams ?? undefined,\n    });\n\n    const response = await smartContractAccount.prepareUserOperation({\n      chainId,\n      data,\n      from,\n      to,\n      value,\n    });\n\n    validatePrepareUserOperationResponse(response);\n\n    const {\n      bundler: bundlerUrl,\n      callData,\n      dummyPaymasterAndData,\n      dummySignature,\n      initCode,\n      nonce,\n      sender,\n    } = response;\n\n    userOperation.callData = callData;\n    userOperation.initCode = initCode ?? EMPTY_BYTES;\n    userOperation.nonce = nonce;\n    userOperation.paymasterAndData = dummyPaymasterAndData ?? EMPTY_BYTES;\n    userOperation.sender = sender;\n    userOperation.signature = dummySignature ?? EMPTY_BYTES;\n\n    metadata.bundlerUrl = bundlerUrl;\n\n    await updateGas(metadata, response, this.#entrypoint, this.#version);\n\n    this.#updateMetadata(metadata);\n  }\n\n  async #addPaymasterData(\n    metadata: UserOperationMetadata,\n    smartContractAccount: SmartContractAccount,\n  ) {\n    const { id, userOperation, chainId } = metadata;\n\n    log('Requesting paymaster data', { id });\n\n    const response = await smartContractAccount.updateUserOperation({\n      userOperation,\n      chainId,\n    });\n\n    validateUpdateUserOperationResponse(response);\n\n    userOperation.paymasterAndData = response.paymasterAndData ?? EMPTY_BYTES;\n    if (response.callGasLimit) {\n      userOperation.callGasLimit = response.callGasLimit;\n    }\n    if (response.preVerificationGas) {\n      userOperation.preVerificationGas = response.preVerificationGas;\n    }\n    if (response.verificationGasLimit) {\n      userOperation.verificationGasLimit = response.verificationGasLimit;\n    }\n\n    this.#updateMetadata(metadata);\n  }\n\n  async #approveUserOperation(cache: UserOperationCache) {\n    log('Requesting approval');\n\n    const { metadata } = cache;\n\n    const { resultCallbacks, value } = await this.#requestApproval(metadata);\n    const updatedTransaction = value?.txMeta;\n\n    if (updatedTransaction) {\n      await this.#updateUserOperationAfterApproval(cache, updatedTransaction);\n    }\n\n    metadata.status = UserOperationStatus.Approved;\n\n    this.#updateMetadata(metadata);\n\n    return resultCallbacks;\n  }\n\n  async #signUserOperation(\n    metadata: UserOperationMetadata,\n    smartContractAccount: SmartContractAccount,\n  ) {\n    const { id, chainId, userOperation } = metadata;\n\n    log('Signing user operation', id, userOperation);\n\n    const response = await smartContractAccount.signUserOperation({\n      userOperation,\n      chainId,\n    });\n\n    validateSignUserOperationResponse(response);\n\n    const { signature } = response;\n\n    userOperation.signature = signature;\n\n    log('Signed user operation', signature);\n\n    metadata.status = UserOperationStatus.Signed;\n\n    this.#updateMetadata(metadata);\n  }\n\n  async #submitUserOperation(metadata: UserOperationMetadata) {\n    const { userOperation } = metadata;\n\n    log('Submitting user operation', userOperation);\n\n    const bundler = new Bundler({\n      url: metadata.bundlerUrl as string,\n      version: this.#version,\n    });\n\n    const hash = await bundler.sendUserOperation(\n      userOperation,\n      this.#entrypoint,\n    );\n\n    metadata.hash = hash;\n    metadata.status = UserOperationStatus.Submitted;\n\n    this.#updateMetadata(metadata);\n  }\n\n  #failUserOperation(metadata: UserOperationMetadata, error: unknown) {\n    const { id } = metadata;\n    const rawError = error as Record<string, string>;\n\n    log('User operation failed', id, error);\n\n    metadata.error = {\n      name: rawError.name,\n      message: rawError.message,\n      stack: rawError.stack,\n      code: rawError.code,\n      rpc: rawError.value,\n    };\n\n    metadata.status = UserOperationStatus.Failed;\n\n    this.#updateMetadata(metadata);\n\n    if (\n      String(rawError.code) === String(errorCodes.provider.userRejectedRequest)\n    ) {\n      this.#deleteMetadata(id);\n    }\n  }\n\n  #createEmptyUserOperation(transaction?: TransactionParams): UserOperation {\n    return {\n      callData: EMPTY_BYTES,\n      callGasLimit: EMPTY_BYTES,\n      initCode: EMPTY_BYTES,\n      maxFeePerGas: transaction?.maxFeePerGas ?? EMPTY_BYTES,\n      maxPriorityFeePerGas: transaction?.maxPriorityFeePerGas ?? EMPTY_BYTES,\n      nonce: EMPTY_BYTES,\n      paymasterAndData: EMPTY_BYTES,\n      preVerificationGas: EMPTY_BYTES,\n      sender: ADDRESS_ZERO,\n      signature: EMPTY_BYTES,\n      verificationGasLimit: EMPTY_BYTES,\n    };\n  }\n\n  #updateMetadata(metadata: UserOperationMetadata) {\n    const { id } = metadata;\n\n    this.update((state) => {\n      state.userOperations[id] = cloneDeep(metadata);\n    });\n\n    this.#updateTransaction(metadata);\n  }\n\n  #deleteMetadata(id: string) {\n    this.update((state) => {\n      delete state.userOperations[id];\n    });\n  }\n\n  #updateTransaction(metadata: UserOperationMetadata) {\n    if (!metadata.transactionParams) {\n      return;\n    }\n\n    const transactionMetadata = getTransactionMetadata(metadata);\n\n    this.hub.emit('transaction-updated', transactionMetadata);\n  }\n\n  #addPendingUserOperationTrackerListeners() {\n    this.#pendingUserOperationTracker.hub.on(\n      'user-operation-confirmed',\n      (metadata) => {\n        log('In listener...');\n        this.hub.emit('user-operation-confirmed', metadata);\n        // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        this.hub.emit(`${metadata.id}:confirmed`, metadata);\n      },\n    );\n\n    this.#pendingUserOperationTracker.hub.on(\n      'user-operation-failed',\n      (metadata, error) => {\n        this.hub.emit('user-operation-failed', metadata, error);\n        // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        this.hub.emit(`${metadata.id}:failed`, metadata, error);\n      },\n    );\n\n    this.#pendingUserOperationTracker.hub.on(\n      'user-operation-updated',\n      (metadata) => {\n        this.#updateMetadata(metadata);\n      },\n    );\n  }\n\n  async #requestApproval(metadata: UserOperationMetadata) {\n    const { id, origin } = metadata;\n    const type = ApprovalType.Transaction;\n    const requestData = { txId: id };\n\n    return (await this.messagingSystem.call(\n      'ApprovalController:addRequest',\n      {\n        id,\n        origin,\n        type,\n        requestData,\n        expectsResult: true,\n      },\n      true, // Should display approval request to user\n    )) as AddResult & { value?: { txMeta?: TransactionMeta } };\n  }\n\n  async #getTransactionType(\n    transaction: TransactionParams | undefined,\n    provider: Provider,\n    options: AddUserOperationOptions,\n  ): Promise<TransactionType | undefined> {\n    if (!transaction) {\n      return undefined;\n    }\n\n    if (options.type) {\n      return options.type;\n    }\n\n    const ethQuery = new EthQuery(provider);\n    const result = determineTransactionType(transaction, ethQuery);\n\n    return (await result).type;\n  }\n\n  async #getProvider(\n    networkClientId: string,\n  ): Promise<{ provider: Provider; chainId: string }> {\n    const { provider, configuration } = this.messagingSystem.call(\n      'NetworkController:getNetworkClientById',\n      networkClientId,\n    );\n\n    const { chainId } = configuration;\n\n    return { provider, chainId };\n  }\n\n  async #updateUserOperationAfterApproval(\n    cache: UserOperationCache,\n    updatedTransaction: TransactionMeta,\n  ) {\n    log('Found updated transaction in approval', { updatedTransaction });\n\n    const { metadata, request } = cache;\n\n    const { userOperation } = metadata;\n    const usingPaymaster = userOperation.paymasterAndData !== EMPTY_BYTES;\n\n    const updatedMaxFeePerGas = add0x(\n      updatedTransaction.txParams.maxFeePerGas as string,\n    );\n\n    const updatedMaxPriorityFeePerGas = add0x(\n      updatedTransaction.txParams.maxPriorityFeePerGas as string,\n    );\n\n    let regenerateUserOperation = false;\n    const previousMaxFeePerGas = userOperation.maxFeePerGas;\n    const previousMaxPriorityFeePerGas = userOperation.maxPriorityFeePerGas;\n\n    const gasFeesUpdated =\n      previousMaxFeePerGas !== updatedMaxFeePerGas ||\n      previousMaxPriorityFeePerGas !== updatedMaxPriorityFeePerGas;\n\n    /**\n     * true when we detect {@link getTransactionMetadata} has set the gas fees to zero\n     * because the userOperation has a paymaster. This should not be mistaken for gas\n     * fees being updated during the approval process.\n     */\n    const areGasFeesZeroBecauseOfPaymaster =\n      usingPaymaster &&\n      updatedMaxFeePerGas === VALUE_ZERO &&\n      updatedMaxPriorityFeePerGas === VALUE_ZERO;\n\n    if (gasFeesUpdated && !areGasFeesZeroBecauseOfPaymaster) {\n      log('Gas fees updated during approval', {\n        previousMaxFeePerGas,\n        previousMaxPriorityFeePerGas,\n        updatedMaxFeePerGas,\n        updatedMaxPriorityFeePerGas,\n      });\n\n      userOperation.maxFeePerGas = updatedMaxFeePerGas;\n      userOperation.maxPriorityFeePerGas = updatedMaxPriorityFeePerGas;\n\n      regenerateUserOperation = usingPaymaster;\n    }\n\n    const previousData = request.data ?? EMPTY_BYTES;\n    const updatedData = updatedTransaction.txParams.data ?? EMPTY_BYTES;\n\n    if (previousData !== updatedData) {\n      log('Data updated during approval', { previousData, updatedData });\n      regenerateUserOperation = true;\n    }\n\n    const previousValue = request.value ?? VALUE_ZERO;\n    const updatedValue = updatedTransaction.txParams.value ?? VALUE_ZERO;\n\n    if (previousValue !== updatedValue) {\n      log('Value updated during approval', { previousValue, updatedValue });\n      regenerateUserOperation = true;\n    }\n\n    if (regenerateUserOperation) {\n      const updatedRequest = {\n        ...request,\n        data: updatedData,\n        maxFeePerGas: updatedMaxFeePerGas,\n        maxPriorityFeePerGas: updatedMaxPriorityFeePerGas,\n        value: updatedValue,\n      };\n\n      await this.#regenerateUserOperation({\n        ...cache,\n        request: updatedRequest,\n      });\n    }\n  }\n\n  async #regenerateUserOperation(cache: UserOperationCache) {\n    log(\n      'Regenerating user operation as parameters were updated during approval',\n    );\n\n    const {\n      options: { smartContractAccount },\n      metadata,\n    } = cache;\n\n    await this.#prepareUserOperation(cache);\n    await this.#addPaymasterData(metadata, smartContractAccount);\n\n    log('Regenerated user operation', metadata.userOperation);\n  }\n}\n"]}
\ No newline at end of file
diff --git a/dist/UserOperationController.d.cts b/dist/UserOperationController.d.cts
index 0203c1b3dbd4eb1a1cfa8af321471c0b675a141a..00c914e4d19a9c483a242ac5a274ff28b2283dc3 100644
--- a/dist/UserOperationController.d.cts
+++ b/dist/UserOperationController.d.cts
@@ -9,6 +9,7 @@ import { type TransactionMeta, type TransactionParams, type TransactionType } fr
 import EventEmitter from "events";
 import type { Patch } from "immer";
 import type { SmartContractAccount, UserOperationMetadata } from "./types.cjs";
+import { Version4337 } from "./types.cjs";
 declare const controllerName = "UserOperationController";
 type Events = {
     'transaction-updated': [metadata: TransactionMeta];
@@ -43,6 +44,7 @@ export type UserOperationControllerOptions = {
     interval?: number;
     messenger: UserOperationControllerMessenger;
     state?: Partial<UserOperationControllerState>;
+    version?: Version4337;
 };
 export type AddUserOperationRequest = {
     data?: string;
@@ -94,8 +96,9 @@ export declare class UserOperationController extends BaseController<typeof contr
      * @param options.getGasFeeEstimates - Callback to get gas fee estimates.
      * @param options.messenger - Restricted controller messenger for the user operation controller.
      * @param options.state - Initial state to set on the controller.
+     * @param options.version - Version of the 4337 specification to use.
      */
-    constructor({ entrypoint, getGasFeeEstimates, messenger, state, }: UserOperationControllerOptions);
+    constructor({ entrypoint, getGasFeeEstimates, messenger, state, version, }: UserOperationControllerOptions);
     /**
      * Create and submit a user operation.
      *
diff --git a/dist/UserOperationController.d.cts.map b/dist/UserOperationController.d.cts.map
index 9329618b0ade10de0a0502f83fd34d47f7628047..8c41d7179460c9aa7b811deadb3705b6e732dd0d 100644
--- a/dist/UserOperationController.d.cts.map
+++ b/dist/UserOperationController.d.cts.map
@@ -1 +1 @@
-{"version":3,"file":"UserOperationController.d.cts","sourceRoot":"","sources":["../src/UserOperationController.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"UserOperationController.d.cts","sourceRoot":"","sources":["../src/UserOperationController.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/UserOperationController.d.mts b/dist/UserOperationController.d.mts
index a2064e402aecb9a80f3a82993013cb7969ce671d..e91dda1fca414eba7a246e45e26262bb85f60c0a 100644
--- a/dist/UserOperationController.d.mts
+++ b/dist/UserOperationController.d.mts
@@ -9,6 +9,7 @@ import { type TransactionMeta, type TransactionParams, type TransactionType } fr
 import EventEmitter from "events";
 import type { Patch } from "immer";
 import type { SmartContractAccount, UserOperationMetadata } from "./types.mjs";
+import { Version4337 } from "./types.mjs";
 declare const controllerName = "UserOperationController";
 type Events = {
     'transaction-updated': [metadata: TransactionMeta];
@@ -43,6 +44,7 @@ export type UserOperationControllerOptions = {
     interval?: number;
     messenger: UserOperationControllerMessenger;
     state?: Partial<UserOperationControllerState>;
+    version?: Version4337;
 };
 export type AddUserOperationRequest = {
     data?: string;
@@ -94,8 +96,9 @@ export declare class UserOperationController extends BaseController<typeof contr
      * @param options.getGasFeeEstimates - Callback to get gas fee estimates.
      * @param options.messenger - Restricted controller messenger for the user operation controller.
      * @param options.state - Initial state to set on the controller.
+     * @param options.version - Version of the 4337 specification to use.
      */
-    constructor({ entrypoint, getGasFeeEstimates, messenger, state, }: UserOperationControllerOptions);
+    constructor({ entrypoint, getGasFeeEstimates, messenger, state, version, }: UserOperationControllerOptions);
     /**
      * Create and submit a user operation.
      *
diff --git a/dist/UserOperationController.d.mts.map b/dist/UserOperationController.d.mts.map
index 1d3d8af7304f9e7117e34218bbeb70e0a8715b13..bee25a4758c0f269e47a794e03e6f85ae5cea439 100644
--- a/dist/UserOperationController.d.mts.map
+++ b/dist/UserOperationController.d.mts.map
@@ -1 +1 @@
-{"version":3,"file":"UserOperationController.d.mts","sourceRoot":"","sources":["../src/UserOperationController.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"UserOperationController.d.mts","sourceRoot":"","sources":["../src/UserOperationController.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/UserOperationController.mjs b/dist/UserOperationController.mjs
index a3767c4478972ba6635ce62f1f8a67c81df85c04..71c91d69b0b27b96d77c0c268afa144209b966c4 100644
--- a/dist/UserOperationController.mjs
+++ b/dist/UserOperationController.mjs
@@ -9,7 +9,7 @@ var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (
     if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
     return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
 };
-var _UserOperationController_instances, _UserOperationController_entrypoint, _UserOperationController_getGasFeeEstimates, _UserOperationController_pendingUserOperationTracker, _UserOperationController_addUserOperation, _UserOperationController_prepareAndSubmitUserOperation, _UserOperationController_waitForConfirmation, _UserOperationController_createMetadata, _UserOperationController_prepareUserOperation, _UserOperationController_addPaymasterData, _UserOperationController_approveUserOperation, _UserOperationController_signUserOperation, _UserOperationController_submitUserOperation, _UserOperationController_failUserOperation, _UserOperationController_createEmptyUserOperation, _UserOperationController_updateMetadata, _UserOperationController_deleteMetadata, _UserOperationController_updateTransaction, _UserOperationController_addPendingUserOperationTrackerListeners, _UserOperationController_requestApproval, _UserOperationController_getTransactionType, _UserOperationController_getProvider, _UserOperationController_updateUserOperationAfterApproval, _UserOperationController_regenerateUserOperation;
+var _UserOperationController_instances, _UserOperationController_entrypoint, _UserOperationController_getGasFeeEstimates, _UserOperationController_pendingUserOperationTracker, _UserOperationController_version, _UserOperationController_addUserOperation, _UserOperationController_prepareAndSubmitUserOperation, _UserOperationController_waitForConfirmation, _UserOperationController_createMetadata, _UserOperationController_prepareUserOperation, _UserOperationController_addPaymasterData, _UserOperationController_approveUserOperation, _UserOperationController_signUserOperation, _UserOperationController_submitUserOperation, _UserOperationController_failUserOperation, _UserOperationController_createEmptyUserOperation, _UserOperationController_updateMetadata, _UserOperationController_deleteMetadata, _UserOperationController_updateTransaction, _UserOperationController_addPendingUserOperationTrackerListeners, _UserOperationController_requestApproval, _UserOperationController_getTransactionType, _UserOperationController_getProvider, _UserOperationController_updateUserOperationAfterApproval, _UserOperationController_regenerateUserOperation;
 function $importDefault(module) {
     if (module?.__esModule) {
         return module.default;
@@ -32,7 +32,7 @@ import { Bundler } from "./helpers/Bundler.mjs";
 import { PendingUserOperationTracker } from "./helpers/PendingUserOperationTracker.mjs";
 import { SnapSmartContractAccount } from "./helpers/SnapSmartContractAccount.mjs";
 import { projectLogger as log } from "./logger.mjs";
-import { UserOperationStatus } from "./types.mjs";
+import { Version4337, UserOperationStatus } from "./types.mjs";
 import { updateGas } from "./utils/gas.mjs";
 import { updateGasFees } from "./utils/gas-fees.mjs";
 import { getTransactionMetadata } from "./utils/transaction.mjs";
@@ -56,8 +56,9 @@ export class UserOperationController extends BaseController {
      * @param options.getGasFeeEstimates - Callback to get gas fee estimates.
      * @param options.messenger - Restricted controller messenger for the user operation controller.
      * @param options.state - Initial state to set on the controller.
+     * @param options.version - Version of the 4337 specification to use.
      */
-    constructor({ entrypoint, getGasFeeEstimates, messenger, state, }) {
+    constructor({ entrypoint, getGasFeeEstimates, messenger, state, version, }) {
         super({
             name: controllerName,
             metadata: stateMetadata,
@@ -68,9 +69,11 @@ export class UserOperationController extends BaseController {
         _UserOperationController_entrypoint.set(this, void 0);
         _UserOperationController_getGasFeeEstimates.set(this, void 0);
         _UserOperationController_pendingUserOperationTracker.set(this, void 0);
+        _UserOperationController_version.set(this, void 0);
         this.hub = new EventEmitter();
         __classPrivateFieldSet(this, _UserOperationController_entrypoint, entrypoint, "f");
         __classPrivateFieldSet(this, _UserOperationController_getGasFeeEstimates, getGasFeeEstimates, "f");
+        __classPrivateFieldSet(this, _UserOperationController_version, version ?? Version4337.V06, "f");
         __classPrivateFieldSet(this, _UserOperationController_pendingUserOperationTracker, new PendingUserOperationTracker({
             getUserOperations: () => cloneDeep(Object.values(this.state.userOperations)),
             messenger,
@@ -129,7 +132,7 @@ export class UserOperationController extends BaseController {
         return __classPrivateFieldGet(this, _UserOperationController_pendingUserOperationTracker, "f").startPollingByNetworkClientId(networkClientId);
     }
 }
-_UserOperationController_entrypoint = new WeakMap(), _UserOperationController_getGasFeeEstimates = new WeakMap(), _UserOperationController_pendingUserOperationTracker = new WeakMap(), _UserOperationController_instances = new WeakSet(), _UserOperationController_addUserOperation = async function _UserOperationController_addUserOperation(request, options) {
+_UserOperationController_entrypoint = new WeakMap(), _UserOperationController_getGasFeeEstimates = new WeakMap(), _UserOperationController_pendingUserOperationTracker = new WeakMap(), _UserOperationController_version = new WeakMap(), _UserOperationController_instances = new WeakSet(), _UserOperationController_addUserOperation = async function _UserOperationController_addUserOperation(request, options) {
     log('Adding user operation', { request, options });
     const { networkClientId, origin, smartContractAccount: requestSmartContractAccount, swaps, transaction, } = options;
     const { chainId, provider } = await __classPrivateFieldGet(this, _UserOperationController_instances, "m", _UserOperationController_getProvider).call(this, networkClientId);
@@ -275,7 +278,7 @@ _UserOperationController_entrypoint = new WeakMap(), _UserOperationController_ge
     userOperation.sender = sender;
     userOperation.signature = dummySignature ?? EMPTY_BYTES;
     metadata.bundlerUrl = bundlerUrl;
-    await updateGas(metadata, response, __classPrivateFieldGet(this, _UserOperationController_entrypoint, "f"));
+    await updateGas(metadata, response, __classPrivateFieldGet(this, _UserOperationController_entrypoint, "f"), __classPrivateFieldGet(this, _UserOperationController_version, "f"));
     __classPrivateFieldGet(this, _UserOperationController_instances, "m", _UserOperationController_updateMetadata).call(this, metadata);
 }, _UserOperationController_addPaymasterData = async function _UserOperationController_addPaymasterData(metadata, smartContractAccount) {
     const { id, userOperation, chainId } = metadata;
@@ -323,7 +326,10 @@ _UserOperationController_entrypoint = new WeakMap(), _UserOperationController_ge
 }, _UserOperationController_submitUserOperation = async function _UserOperationController_submitUserOperation(metadata) {
     const { userOperation } = metadata;
     log('Submitting user operation', userOperation);
-    const bundler = new Bundler(metadata.bundlerUrl);
+    const bundler = new Bundler({
+        url: metadata.bundlerUrl,
+        version: __classPrivateFieldGet(this, _UserOperationController_version, "f"),
+    });
     const hash = await bundler.sendUserOperation(userOperation, __classPrivateFieldGet(this, _UserOperationController_entrypoint, "f"));
     metadata.hash = hash;
     metadata.status = UserOperationStatus.Submitted;
diff --git a/dist/UserOperationController.mjs.map b/dist/UserOperationController.mjs.map
index 1c5fe91107526246f9be2e789ff8c8aba677beff..e4d1e3b3159ef130ed511d1e5cf8a3e5a426428a 100644
--- a/dist/UserOperationController.mjs.map
+++ b/dist/UserOperationController.mjs.map
@@ -1 +1 @@
-{"version":3,"file":"UserOperationController.mjs","sourceRoot":"","sources":["../src/UserOperationController.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  AcceptResultCallbacks,\n  AddApprovalRequest,\n  AddResult,\n} from '@metamask/approval-controller';\nimport type { RestrictedControllerMessenger } from '@metamask/base-controller';\nimport { BaseController } from '@metamask/base-controller';\nimport { ApprovalType } from '@metamask/controller-utils';\nimport EthQuery from '@metamask/eth-query';\nimport type { GasFeeState } from '@metamask/gas-fee-controller';\nimport type {\n  KeyringControllerPrepareUserOperationAction,\n  KeyringControllerPatchUserOperationAction,\n  KeyringControllerSignUserOperationAction,\n} from '@metamask/keyring-controller';\nimport type {\n  NetworkControllerGetNetworkClientByIdAction,\n  Provider,\n} from '@metamask/network-controller';\nimport { errorCodes } from '@metamask/rpc-errors';\nimport {\n  determineTransactionType,\n  type TransactionMeta,\n  type TransactionParams,\n  type TransactionType,\n} from '@metamask/transaction-controller';\nimport { add0x } from '@metamask/utils';\nimport EventEmitter from 'events';\nimport type { Patch } from 'immer';\nimport { cloneDeep } from 'lodash';\nimport { v1 as random } from 'uuid';\n\nimport { ADDRESS_ZERO, EMPTY_BYTES, VALUE_ZERO } from './constants';\nimport { Bundler } from './helpers/Bundler';\nimport { PendingUserOperationTracker } from './helpers/PendingUserOperationTracker';\nimport { SnapSmartContractAccount } from './helpers/SnapSmartContractAccount';\nimport { projectLogger as log } from './logger';\nimport type {\n  SmartContractAccount,\n  UserOperation,\n  UserOperationMetadata,\n} from './types';\nimport { UserOperationStatus } from './types';\nimport { updateGas } from './utils/gas';\nimport { updateGasFees } from './utils/gas-fees';\nimport { getTransactionMetadata } from './utils/transaction';\nimport {\n  validateAddUserOperationOptions,\n  validateAddUserOperationRequest,\n  validatePrepareUserOperationResponse,\n  validateSignUserOperationResponse,\n  validateUpdateUserOperationResponse,\n} from './utils/validation';\n\nconst controllerName = 'UserOperationController';\n\nconst stateMetadata = {\n  userOperations: { persist: true, anonymous: false },\n};\n\nconst getDefaultState = () => ({\n  userOperations: {},\n});\n\ntype Events = {\n  'transaction-updated': [metadata: TransactionMeta];\n  'user-operation-added': [metadata: UserOperationMetadata];\n  'user-operation-confirmed': [metadata: UserOperationMetadata];\n  'user-operation-failed': [metadata: UserOperationMetadata, error: Error];\n  [key: `${string}:confirmed`]: [metadata: UserOperationMetadata];\n  [key: `${string}:failed`]: [metadata: UserOperationMetadata, error: Error];\n};\n\nexport type UserOperationControllerEventEmitter = EventEmitter & {\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  on<T extends keyof Events>(\n    eventName: T,\n    listener: (...args: Events[T]) => void,\n  ): UserOperationControllerEventEmitter;\n\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  once<T extends keyof Events>(\n    eventName: T,\n    listener: (...args: Events[T]) => void,\n  ): UserOperationControllerEventEmitter;\n\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  emit<T extends keyof Events>(eventName: T, ...args: Events[T]): boolean;\n};\n\nexport type UserOperationControllerState = {\n  userOperations: Record<string, UserOperationMetadata>;\n};\n\nexport type GetUserOperationState = {\n  type: `${typeof controllerName}:getState`;\n  handler: () => UserOperationControllerState;\n};\n\nexport type UserOperationStateChange = {\n  type: `${typeof controllerName}:stateChange`;\n  payload: [UserOperationControllerState, Patch[]];\n};\n\nexport type UserOperationControllerActions =\n  | GetUserOperationState\n  | NetworkControllerGetNetworkClientByIdAction\n  | AddApprovalRequest\n  | KeyringControllerPrepareUserOperationAction\n  | KeyringControllerPatchUserOperationAction\n  | KeyringControllerSignUserOperationAction;\n\nexport type UserOperationControllerEvents = UserOperationStateChange;\n\nexport type UserOperationControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  UserOperationControllerActions,\n  UserOperationControllerEvents,\n  UserOperationControllerActions['type'],\n  UserOperationControllerEvents['type']\n>;\n\nexport type UserOperationControllerOptions = {\n  entrypoint: string;\n  getGasFeeEstimates: () => Promise<GasFeeState>;\n  interval?: number;\n  messenger: UserOperationControllerMessenger;\n  state?: Partial<UserOperationControllerState>;\n};\n\nexport type AddUserOperationRequest = {\n  data?: string;\n  from: string;\n  maxFeePerGas?: string;\n  maxPriorityFeePerGas?: string;\n  to?: string;\n  value?: string;\n};\n\nexport type AddUserOperationSwapOptions = {\n  approvalTxId?: string;\n  destinationTokenAddress?: string;\n  destinationTokenAmount?: string;\n  destinationTokenDecimals?: number;\n  destinationTokenSymbol?: string;\n  estimatedBaseFee?: string;\n  sourceTokenAddress?: string;\n  sourceTokenAmount?: string;\n  sourceTokenDecimals?: number;\n  sourceTokenSymbol?: string;\n  swapAndSendRecipient?: string;\n  swapMetaData?: Record<string, unknown>;\n  swapTokenValue?: string;\n};\n\nexport type AddUserOperationOptions = {\n  networkClientId: string;\n  origin: string;\n  requireApproval?: boolean;\n  smartContractAccount?: SmartContractAccount;\n  swaps?: AddUserOperationSwapOptions;\n  type?: TransactionType;\n};\n\nexport type AddUserOperationResponse = {\n  id: string;\n  hash: () => Promise<string | undefined>;\n  transactionHash: () => Promise<string | undefined>;\n};\n\n/**\n * All the objects related to a pending user operation in order to:\n * - Avoid duplicated effort to derive the same properties.\n * - Minimise duplicate arguments in private methods.\n */\ntype UserOperationCache = {\n  chainId: string;\n  metadata: UserOperationMetadata;\n  options: AddUserOperationOptions & {\n    smartContractAccount: SmartContractAccount;\n  };\n  provider: Provider;\n  request: AddUserOperationRequest;\n  transaction?: TransactionParams;\n};\n\n/**\n * Controller for creating and managing the life cycle of user operations.\n */\nexport class UserOperationController extends BaseController<\n  typeof controllerName,\n  UserOperationControllerState,\n  UserOperationControllerMessenger\n> {\n  hub: UserOperationControllerEventEmitter;\n\n  #entrypoint: string;\n\n  #getGasFeeEstimates: () => Promise<GasFeeState>;\n\n  #pendingUserOperationTracker: PendingUserOperationTracker;\n\n  /**\n   * Construct a UserOperationController instance.\n   *\n   * @param options - Controller options.\n   * @param options.entrypoint - Address of the entrypoint contract.\n   * @param options.getGasFeeEstimates - Callback to get gas fee estimates.\n   * @param options.messenger - Restricted controller messenger for the user operation controller.\n   * @param options.state - Initial state to set on the controller.\n   */\n  constructor({\n    entrypoint,\n    getGasFeeEstimates,\n    messenger,\n    state,\n  }: UserOperationControllerOptions) {\n    super({\n      name: controllerName,\n      metadata: stateMetadata,\n      messenger,\n      state: { ...getDefaultState(), ...state },\n    });\n\n    this.hub = new EventEmitter() as UserOperationControllerEventEmitter;\n\n    this.#entrypoint = entrypoint;\n    this.#getGasFeeEstimates = getGasFeeEstimates;\n\n    this.#pendingUserOperationTracker = new PendingUserOperationTracker({\n      getUserOperations: () =>\n        cloneDeep(Object.values(this.state.userOperations)),\n      messenger,\n    });\n\n    this.#addPendingUserOperationTrackerListeners();\n  }\n\n  /**\n   * Create and submit a user operation.\n   *\n   * @param request - Information required to create a user operation.\n   * @param request.data - Data to include in the resulting transaction.\n   * @param request.maxFeePerGas - Maximum fee per gas to pay towards the transaction.\n   * @param request.maxPriorityFeePerGas - Maximum priority fee per gas to pay towards the transaction.\n   * @param request.to - Destination address of the resulting transaction.\n   * @param request.value - Value to include in the resulting transaction.\n   * @param options - Configuration options when creating a user operation.\n   * @param options.networkClientId - ID of the network client used to query the chain.\n   * @param options.origin - Origin of the user operation, such as the hostname of a dApp.\n   * @param options.requireApproval - Whether to require user approval before submitting the user operation. Defaults to true.\n   * @param options.smartContractAccount - Smart contract abstraction to provide the contract specific values such as call data and nonce. Defaults to the current snap account.\n   * @param options.swaps - Swap metadata to record with the user operation.\n   * @param options.type - Type of the transaction.\n   */\n  async addUserOperation(\n    request: AddUserOperationRequest,\n    options: AddUserOperationOptions,\n  ): Promise<AddUserOperationResponse> {\n    validateAddUserOperationRequest(request);\n    validateAddUserOperationOptions(options);\n\n    return await this.#addUserOperation(request, options);\n  }\n\n  /**\n   * Create and submit a user operation equivalent to the provided transaction.\n   *\n   * @param transaction - Transaction to use as the basis for the user operation.\n   * @param options - Configuration options when creating a user operation.\n   * @param options.networkClientId - ID of the network client used to query the chain.\n   * @param options.origin - Origin of the user operation, such as the hostname of a dApp.\n   * @param options.requireApproval - Whether to require user approval before submitting the user operation. Defaults to true.\n   * @param options.smartContractAccount - Smart contract abstraction to provide the contract specific values such as call data and nonce. Defaults to the current snap account.\n   * @param options.swaps - Swap metadata to record with the user operation.\n   * @param options.type - Type of the transaction.\n   */\n  async addUserOperationFromTransaction(\n    transaction: TransactionParams,\n    options: AddUserOperationOptions,\n  ): Promise<AddUserOperationResponse> {\n    validateAddUserOperationOptions(options);\n\n    const { data, from, maxFeePerGas, maxPriorityFeePerGas, to, value } =\n      transaction;\n\n    const request: AddUserOperationRequest = {\n      data: data === '' ? undefined : data,\n      from,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      to,\n      value,\n    };\n\n    validateAddUserOperationRequest(request);\n\n    return await this.#addUserOperation(request, { ...options, transaction });\n  }\n\n  startPollingByNetworkClientId(networkClientId: string): string {\n    return this.#pendingUserOperationTracker.startPollingByNetworkClientId(\n      networkClientId,\n    );\n  }\n\n  async #addUserOperation(\n    request: AddUserOperationRequest,\n    options: AddUserOperationOptions & { transaction?: TransactionParams },\n  ): Promise<AddUserOperationResponse> {\n    log('Adding user operation', { request, options });\n\n    const {\n      networkClientId,\n      origin,\n      smartContractAccount: requestSmartContractAccount,\n      swaps,\n      transaction,\n    } = options;\n\n    const { chainId, provider } = await this.#getProvider(networkClientId);\n\n    const metadata = await this.#createMetadata(\n      chainId,\n      origin,\n      transaction,\n      swaps,\n    );\n\n    const smartContractAccount =\n      requestSmartContractAccount ??\n      new SnapSmartContractAccount(this.messagingSystem);\n\n    const cache: UserOperationCache = {\n      chainId,\n      metadata,\n      options: { ...options, smartContractAccount },\n      provider,\n      request,\n      transaction,\n    };\n\n    const { id } = metadata;\n    let throwError = false;\n\n    const hashValue = (async () => {\n      try {\n        return await this.#prepareAndSubmitUserOperation(cache);\n      } catch (error) {\n        this.#failUserOperation(metadata, error);\n\n        if (throwError) {\n          throw error;\n        }\n\n        return undefined;\n      }\n    })();\n\n    const hash = async () => {\n      throwError = true;\n      return await hashValue;\n    };\n\n    const transactionHash = async () => {\n      await hash();\n\n      const { transactionHash: finalTransactionHash } =\n        await this.#waitForConfirmation(metadata);\n\n      return finalTransactionHash as string;\n    };\n\n    return {\n      id,\n      hash,\n      transactionHash,\n    };\n  }\n\n  async #prepareAndSubmitUserOperation(cache: UserOperationCache) {\n    const { metadata, options } = cache;\n    const { requireApproval, smartContractAccount } = options;\n    let resultCallbacks: AcceptResultCallbacks | undefined;\n\n    try {\n      await this.#prepareUserOperation(cache);\n      await this.#addPaymasterData(metadata, smartContractAccount);\n\n      this.hub.emit('user-operation-added', metadata);\n\n      if (requireApproval !== false) {\n        resultCallbacks = await this.#approveUserOperation(cache);\n      }\n\n      await this.#signUserOperation(metadata, smartContractAccount);\n      await this.#submitUserOperation(metadata);\n\n      resultCallbacks?.success();\n\n      return metadata.hash as string;\n    } catch (error) {\n      /* istanbul ignore next */\n      resultCallbacks?.error(error as Error);\n      throw error;\n    }\n  }\n\n  async #waitForConfirmation(\n    metadata: UserOperationMetadata,\n  ): Promise<UserOperationMetadata> {\n    const { id, hash } = metadata;\n\n    log('Waiting for confirmation', id, hash);\n\n    return new Promise((resolve, reject) => {\n      this.hub.once(`${id}:confirmed`, (finalMetadata) => {\n        resolve(finalMetadata);\n      });\n\n      this.hub.once(`${id}:failed`, (_finalMetadata, error) => {\n        reject(error);\n      });\n    });\n  }\n\n  async #createMetadata(\n    chainId: string,\n    origin: string,\n    transaction?: TransactionParams,\n    swaps?: AddUserOperationSwapOptions,\n  ): Promise<UserOperationMetadata> {\n    const metadata: UserOperationMetadata = {\n      actualGasCost: null,\n      actualGasUsed: null,\n      baseFeePerGas: null,\n      bundlerUrl: null,\n      chainId,\n      error: null,\n      hash: null,\n      id: random(),\n      origin,\n      status: UserOperationStatus.Unapproved,\n      swapsMetadata: swaps\n        ? {\n            approvalTxId: swaps.approvalTxId ?? null,\n            destinationTokenAddress: swaps.destinationTokenAddress ?? null,\n            destinationTokenAmount: swaps.destinationTokenAmount ?? null,\n            destinationTokenDecimals: swaps.destinationTokenDecimals ?? null,\n            destinationTokenSymbol: swaps.destinationTokenSymbol ?? null,\n            estimatedBaseFee: swaps.estimatedBaseFee ?? null,\n            sourceTokenAddress: swaps.sourceTokenAddress ?? null,\n            sourceTokenAmount: swaps.sourceTokenAmount ?? null,\n            sourceTokenDecimals: swaps.sourceTokenDecimals ?? null,\n            sourceTokenSymbol: swaps.sourceTokenSymbol ?? null,\n            swapAndSendRecipient: swaps.swapAndSendRecipient ?? null,\n            swapMetaData: (swaps.swapMetaData as Record<string, never>) ?? null,\n            swapTokenValue: swaps.swapTokenValue ?? null,\n          }\n        : null,\n      time: Date.now(),\n      transactionHash: null,\n      transactionParams: (transaction as Required<TransactionParams>) ?? null,\n      transactionType: null,\n      userFeeLevel: null,\n      userOperation: this.#createEmptyUserOperation(transaction),\n    };\n\n    this.#updateMetadata(metadata);\n\n    log('Added user operation', metadata.id);\n\n    return metadata;\n  }\n\n  async #prepareUserOperation(cache: UserOperationCache) {\n    const { chainId, metadata, options, provider, request, transaction } =\n      cache;\n\n    const { data, from, to, value } = request;\n    const { id, transactionParams, userOperation } = metadata;\n    const { smartContractAccount } = options;\n\n    log('Preparing user operation', { id });\n\n    const transactionType = await this.#getTransactionType(\n      transaction,\n      provider,\n      options,\n    );\n\n    metadata.transactionType = transactionType ?? null;\n\n    log('Determined transaction type', transactionType);\n\n    await updateGasFees({\n      getGasFeeEstimates: this.#getGasFeeEstimates,\n      metadata,\n      originalRequest: request,\n      provider,\n      transaction: transactionParams ?? undefined,\n    });\n\n    const response = await smartContractAccount.prepareUserOperation({\n      chainId,\n      data,\n      from,\n      to,\n      value,\n    });\n\n    validatePrepareUserOperationResponse(response);\n\n    const {\n      bundler: bundlerUrl,\n      callData,\n      dummyPaymasterAndData,\n      dummySignature,\n      initCode,\n      nonce,\n      sender,\n    } = response;\n\n    userOperation.callData = callData;\n    userOperation.initCode = initCode ?? EMPTY_BYTES;\n    userOperation.nonce = nonce;\n    userOperation.paymasterAndData = dummyPaymasterAndData ?? EMPTY_BYTES;\n    userOperation.sender = sender;\n    userOperation.signature = dummySignature ?? EMPTY_BYTES;\n\n    metadata.bundlerUrl = bundlerUrl;\n\n    await updateGas(metadata, response, this.#entrypoint);\n\n    this.#updateMetadata(metadata);\n  }\n\n  async #addPaymasterData(\n    metadata: UserOperationMetadata,\n    smartContractAccount: SmartContractAccount,\n  ) {\n    const { id, userOperation, chainId } = metadata;\n\n    log('Requesting paymaster data', { id });\n\n    const response = await smartContractAccount.updateUserOperation({\n      userOperation,\n      chainId,\n    });\n\n    validateUpdateUserOperationResponse(response);\n\n    userOperation.paymasterAndData = response.paymasterAndData ?? EMPTY_BYTES;\n    if (response.callGasLimit) {\n      userOperation.callGasLimit = response.callGasLimit;\n    }\n    if (response.preVerificationGas) {\n      userOperation.preVerificationGas = response.preVerificationGas;\n    }\n    if (response.verificationGasLimit) {\n      userOperation.verificationGasLimit = response.verificationGasLimit;\n    }\n\n    this.#updateMetadata(metadata);\n  }\n\n  async #approveUserOperation(cache: UserOperationCache) {\n    log('Requesting approval');\n\n    const { metadata } = cache;\n\n    const { resultCallbacks, value } = await this.#requestApproval(metadata);\n    const updatedTransaction = value?.txMeta;\n\n    if (updatedTransaction) {\n      await this.#updateUserOperationAfterApproval(cache, updatedTransaction);\n    }\n\n    metadata.status = UserOperationStatus.Approved;\n\n    this.#updateMetadata(metadata);\n\n    return resultCallbacks;\n  }\n\n  async #signUserOperation(\n    metadata: UserOperationMetadata,\n    smartContractAccount: SmartContractAccount,\n  ) {\n    const { id, chainId, userOperation } = metadata;\n\n    log('Signing user operation', id, userOperation);\n\n    const response = await smartContractAccount.signUserOperation({\n      userOperation,\n      chainId,\n    });\n\n    validateSignUserOperationResponse(response);\n\n    const { signature } = response;\n\n    userOperation.signature = signature;\n\n    log('Signed user operation', signature);\n\n    metadata.status = UserOperationStatus.Signed;\n\n    this.#updateMetadata(metadata);\n  }\n\n  async #submitUserOperation(metadata: UserOperationMetadata) {\n    const { userOperation } = metadata;\n\n    log('Submitting user operation', userOperation);\n\n    const bundler = new Bundler(metadata.bundlerUrl as string);\n\n    const hash = await bundler.sendUserOperation(\n      userOperation,\n      this.#entrypoint,\n    );\n\n    metadata.hash = hash;\n    metadata.status = UserOperationStatus.Submitted;\n\n    this.#updateMetadata(metadata);\n  }\n\n  #failUserOperation(metadata: UserOperationMetadata, error: unknown) {\n    const { id } = metadata;\n    const rawError = error as Record<string, string>;\n\n    log('User operation failed', id, error);\n\n    metadata.error = {\n      name: rawError.name,\n      message: rawError.message,\n      stack: rawError.stack,\n      code: rawError.code,\n      rpc: rawError.value,\n    };\n\n    metadata.status = UserOperationStatus.Failed;\n\n    this.#updateMetadata(metadata);\n\n    if (\n      String(rawError.code) === String(errorCodes.provider.userRejectedRequest)\n    ) {\n      this.#deleteMetadata(id);\n    }\n  }\n\n  #createEmptyUserOperation(transaction?: TransactionParams): UserOperation {\n    return {\n      callData: EMPTY_BYTES,\n      callGasLimit: EMPTY_BYTES,\n      initCode: EMPTY_BYTES,\n      maxFeePerGas: transaction?.maxFeePerGas ?? EMPTY_BYTES,\n      maxPriorityFeePerGas: transaction?.maxPriorityFeePerGas ?? EMPTY_BYTES,\n      nonce: EMPTY_BYTES,\n      paymasterAndData: EMPTY_BYTES,\n      preVerificationGas: EMPTY_BYTES,\n      sender: ADDRESS_ZERO,\n      signature: EMPTY_BYTES,\n      verificationGasLimit: EMPTY_BYTES,\n    };\n  }\n\n  #updateMetadata(metadata: UserOperationMetadata) {\n    const { id } = metadata;\n\n    this.update((state) => {\n      state.userOperations[id] = cloneDeep(metadata);\n    });\n\n    this.#updateTransaction(metadata);\n  }\n\n  #deleteMetadata(id: string) {\n    this.update((state) => {\n      delete state.userOperations[id];\n    });\n  }\n\n  #updateTransaction(metadata: UserOperationMetadata) {\n    if (!metadata.transactionParams) {\n      return;\n    }\n\n    const transactionMetadata = getTransactionMetadata(metadata);\n\n    this.hub.emit('transaction-updated', transactionMetadata);\n  }\n\n  #addPendingUserOperationTrackerListeners() {\n    this.#pendingUserOperationTracker.hub.on(\n      'user-operation-confirmed',\n      (metadata) => {\n        log('In listener...');\n        this.hub.emit('user-operation-confirmed', metadata);\n        // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        this.hub.emit(`${metadata.id}:confirmed`, metadata);\n      },\n    );\n\n    this.#pendingUserOperationTracker.hub.on(\n      'user-operation-failed',\n      (metadata, error) => {\n        this.hub.emit('user-operation-failed', metadata, error);\n        // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        this.hub.emit(`${metadata.id}:failed`, metadata, error);\n      },\n    );\n\n    this.#pendingUserOperationTracker.hub.on(\n      'user-operation-updated',\n      (metadata) => {\n        this.#updateMetadata(metadata);\n      },\n    );\n  }\n\n  async #requestApproval(metadata: UserOperationMetadata) {\n    const { id, origin } = metadata;\n    const type = ApprovalType.Transaction;\n    const requestData = { txId: id };\n\n    return (await this.messagingSystem.call(\n      'ApprovalController:addRequest',\n      {\n        id,\n        origin,\n        type,\n        requestData,\n        expectsResult: true,\n      },\n      true, // Should display approval request to user\n    )) as AddResult & { value?: { txMeta?: TransactionMeta } };\n  }\n\n  async #getTransactionType(\n    transaction: TransactionParams | undefined,\n    provider: Provider,\n    options: AddUserOperationOptions,\n  ): Promise<TransactionType | undefined> {\n    if (!transaction) {\n      return undefined;\n    }\n\n    if (options.type) {\n      return options.type;\n    }\n\n    const ethQuery = new EthQuery(provider);\n    const result = determineTransactionType(transaction, ethQuery);\n\n    return (await result).type;\n  }\n\n  async #getProvider(\n    networkClientId: string,\n  ): Promise<{ provider: Provider; chainId: string }> {\n    const { provider, configuration } = this.messagingSystem.call(\n      'NetworkController:getNetworkClientById',\n      networkClientId,\n    );\n\n    const { chainId } = configuration;\n\n    return { provider, chainId };\n  }\n\n  async #updateUserOperationAfterApproval(\n    cache: UserOperationCache,\n    updatedTransaction: TransactionMeta,\n  ) {\n    log('Found updated transaction in approval', { updatedTransaction });\n\n    const { metadata, request } = cache;\n\n    const { userOperation } = metadata;\n    const usingPaymaster = userOperation.paymasterAndData !== EMPTY_BYTES;\n\n    const updatedMaxFeePerGas = add0x(\n      updatedTransaction.txParams.maxFeePerGas as string,\n    );\n\n    const updatedMaxPriorityFeePerGas = add0x(\n      updatedTransaction.txParams.maxPriorityFeePerGas as string,\n    );\n\n    let regenerateUserOperation = false;\n    const previousMaxFeePerGas = userOperation.maxFeePerGas;\n    const previousMaxPriorityFeePerGas = userOperation.maxPriorityFeePerGas;\n\n    const gasFeesUpdated =\n      previousMaxFeePerGas !== updatedMaxFeePerGas ||\n      previousMaxPriorityFeePerGas !== updatedMaxPriorityFeePerGas;\n\n    /**\n     * true when we detect {@link getTransactionMetadata} has set the gas fees to zero\n     * because the userOperation has a paymaster. This should not be mistaken for gas\n     * fees being updated during the approval process.\n     */\n    const areGasFeesZeroBecauseOfPaymaster =\n      usingPaymaster &&\n      updatedMaxFeePerGas === VALUE_ZERO &&\n      updatedMaxPriorityFeePerGas === VALUE_ZERO;\n\n    if (gasFeesUpdated && !areGasFeesZeroBecauseOfPaymaster) {\n      log('Gas fees updated during approval', {\n        previousMaxFeePerGas,\n        previousMaxPriorityFeePerGas,\n        updatedMaxFeePerGas,\n        updatedMaxPriorityFeePerGas,\n      });\n\n      userOperation.maxFeePerGas = updatedMaxFeePerGas;\n      userOperation.maxPriorityFeePerGas = updatedMaxPriorityFeePerGas;\n\n      regenerateUserOperation = usingPaymaster;\n    }\n\n    const previousData = request.data ?? EMPTY_BYTES;\n    const updatedData = updatedTransaction.txParams.data ?? EMPTY_BYTES;\n\n    if (previousData !== updatedData) {\n      log('Data updated during approval', { previousData, updatedData });\n      regenerateUserOperation = true;\n    }\n\n    const previousValue = request.value ?? VALUE_ZERO;\n    const updatedValue = updatedTransaction.txParams.value ?? VALUE_ZERO;\n\n    if (previousValue !== updatedValue) {\n      log('Value updated during approval', { previousValue, updatedValue });\n      regenerateUserOperation = true;\n    }\n\n    if (regenerateUserOperation) {\n      const updatedRequest = {\n        ...request,\n        data: updatedData,\n        maxFeePerGas: updatedMaxFeePerGas,\n        maxPriorityFeePerGas: updatedMaxPriorityFeePerGas,\n        value: updatedValue,\n      };\n\n      await this.#regenerateUserOperation({\n        ...cache,\n        request: updatedRequest,\n      });\n    }\n  }\n\n  async #regenerateUserOperation(cache: UserOperationCache) {\n    log(\n      'Regenerating user operation as parameters were updated during approval',\n    );\n\n    const {\n      options: { smartContractAccount },\n      metadata,\n    } = cache;\n\n    await this.#prepareUserOperation(cache);\n    await this.#addPaymasterData(metadata, smartContractAccount);\n\n    log('Regenerated user operation', metadata.userOperation);\n  }\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"UserOperationController.mjs","sourceRoot":"","sources":["../src/UserOperationController.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  AcceptResultCallbacks,\n  AddApprovalRequest,\n  AddResult,\n} from '@metamask/approval-controller';\nimport type { RestrictedControllerMessenger } from '@metamask/base-controller';\nimport { BaseController } from '@metamask/base-controller';\nimport { ApprovalType } from '@metamask/controller-utils';\nimport EthQuery from '@metamask/eth-query';\nimport type { GasFeeState } from '@metamask/gas-fee-controller';\nimport type {\n  KeyringControllerPrepareUserOperationAction,\n  KeyringControllerPatchUserOperationAction,\n  KeyringControllerSignUserOperationAction,\n} from '@metamask/keyring-controller';\nimport type {\n  NetworkControllerGetNetworkClientByIdAction,\n  Provider,\n} from '@metamask/network-controller';\nimport { errorCodes } from '@metamask/rpc-errors';\nimport {\n  determineTransactionType,\n  type TransactionMeta,\n  type TransactionParams,\n  type TransactionType,\n} from '@metamask/transaction-controller';\nimport { add0x } from '@metamask/utils';\nimport EventEmitter from 'events';\nimport type { Patch } from 'immer';\nimport { cloneDeep } from 'lodash';\nimport { v1 as random } from 'uuid';\n\nimport { ADDRESS_ZERO, EMPTY_BYTES, VALUE_ZERO } from './constants';\nimport { Bundler } from './helpers/Bundler';\nimport { PendingUserOperationTracker } from './helpers/PendingUserOperationTracker';\nimport { SnapSmartContractAccount } from './helpers/SnapSmartContractAccount';\nimport { projectLogger as log } from './logger';\nimport type {\n  SmartContractAccount,\n  UserOperation,\n  UserOperationMetadata,\n} from './types';\nimport { Version4337, UserOperationStatus } from './types';\nimport { updateGas } from './utils/gas';\nimport { updateGasFees } from './utils/gas-fees';\nimport { getTransactionMetadata } from './utils/transaction';\nimport {\n  validateAddUserOperationOptions,\n  validateAddUserOperationRequest,\n  validatePrepareUserOperationResponse,\n  validateSignUserOperationResponse,\n  validateUpdateUserOperationResponse,\n} from './utils/validation';\n\nconst controllerName = 'UserOperationController';\n\nconst stateMetadata = {\n  userOperations: { persist: true, anonymous: false },\n};\n\nconst getDefaultState = () => ({\n  userOperations: {},\n});\n\ntype Events = {\n  'transaction-updated': [metadata: TransactionMeta];\n  'user-operation-added': [metadata: UserOperationMetadata];\n  'user-operation-confirmed': [metadata: UserOperationMetadata];\n  'user-operation-failed': [metadata: UserOperationMetadata, error: Error];\n  [key: `${string}:confirmed`]: [metadata: UserOperationMetadata];\n  [key: `${string}:failed`]: [metadata: UserOperationMetadata, error: Error];\n};\n\nexport type UserOperationControllerEventEmitter = EventEmitter & {\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  on<T extends keyof Events>(\n    eventName: T,\n    listener: (...args: Events[T]) => void,\n  ): UserOperationControllerEventEmitter;\n\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  once<T extends keyof Events>(\n    eventName: T,\n    listener: (...args: Events[T]) => void,\n  ): UserOperationControllerEventEmitter;\n\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  emit<T extends keyof Events>(eventName: T, ...args: Events[T]): boolean;\n};\n\nexport type UserOperationControllerState = {\n  userOperations: Record<string, UserOperationMetadata>;\n};\n\nexport type GetUserOperationState = {\n  type: `${typeof controllerName}:getState`;\n  handler: () => UserOperationControllerState;\n};\n\nexport type UserOperationStateChange = {\n  type: `${typeof controllerName}:stateChange`;\n  payload: [UserOperationControllerState, Patch[]];\n};\n\nexport type UserOperationControllerActions =\n  | GetUserOperationState\n  | NetworkControllerGetNetworkClientByIdAction\n  | AddApprovalRequest\n  | KeyringControllerPrepareUserOperationAction\n  | KeyringControllerPatchUserOperationAction\n  | KeyringControllerSignUserOperationAction;\n\nexport type UserOperationControllerEvents = UserOperationStateChange;\n\nexport type UserOperationControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  UserOperationControllerActions,\n  UserOperationControllerEvents,\n  UserOperationControllerActions['type'],\n  UserOperationControllerEvents['type']\n>;\n\nexport type UserOperationControllerOptions = {\n  entrypoint: string;\n  getGasFeeEstimates: () => Promise<GasFeeState>;\n  interval?: number;\n  messenger: UserOperationControllerMessenger;\n  state?: Partial<UserOperationControllerState>;\n  version?: Version4337;\n};\n\nexport type AddUserOperationRequest = {\n  data?: string;\n  from: string;\n  maxFeePerGas?: string;\n  maxPriorityFeePerGas?: string;\n  to?: string;\n  value?: string;\n};\n\nexport type AddUserOperationSwapOptions = {\n  approvalTxId?: string;\n  destinationTokenAddress?: string;\n  destinationTokenAmount?: string;\n  destinationTokenDecimals?: number;\n  destinationTokenSymbol?: string;\n  estimatedBaseFee?: string;\n  sourceTokenAddress?: string;\n  sourceTokenAmount?: string;\n  sourceTokenDecimals?: number;\n  sourceTokenSymbol?: string;\n  swapAndSendRecipient?: string;\n  swapMetaData?: Record<string, unknown>;\n  swapTokenValue?: string;\n};\n\nexport type AddUserOperationOptions = {\n  networkClientId: string;\n  origin: string;\n  requireApproval?: boolean;\n  smartContractAccount?: SmartContractAccount;\n  swaps?: AddUserOperationSwapOptions;\n  type?: TransactionType;\n};\n\nexport type AddUserOperationResponse = {\n  id: string;\n  hash: () => Promise<string | undefined>;\n  transactionHash: () => Promise<string | undefined>;\n};\n\n/**\n * All the objects related to a pending user operation in order to:\n * - Avoid duplicated effort to derive the same properties.\n * - Minimise duplicate arguments in private methods.\n */\ntype UserOperationCache = {\n  chainId: string;\n  metadata: UserOperationMetadata;\n  options: AddUserOperationOptions & {\n    smartContractAccount: SmartContractAccount;\n  };\n  provider: Provider;\n  request: AddUserOperationRequest;\n  transaction?: TransactionParams;\n};\n\n/**\n * Controller for creating and managing the life cycle of user operations.\n */\nexport class UserOperationController extends BaseController<\n  typeof controllerName,\n  UserOperationControllerState,\n  UserOperationControllerMessenger\n> {\n  hub: UserOperationControllerEventEmitter;\n\n  #entrypoint: string;\n\n  #getGasFeeEstimates: () => Promise<GasFeeState>;\n\n  #pendingUserOperationTracker: PendingUserOperationTracker;\n\n  #version: Version4337;\n\n  /**\n   * Construct a UserOperationController instance.\n   *\n   * @param options - Controller options.\n   * @param options.entrypoint - Address of the entrypoint contract.\n   * @param options.getGasFeeEstimates - Callback to get gas fee estimates.\n   * @param options.messenger - Restricted controller messenger for the user operation controller.\n   * @param options.state - Initial state to set on the controller.\n   * @param options.version - Version of the 4337 specification to use.\n   */\n  constructor({\n    entrypoint,\n    getGasFeeEstimates,\n    messenger,\n    state,\n    version,\n  }: UserOperationControllerOptions) {\n    super({\n      name: controllerName,\n      metadata: stateMetadata,\n      messenger,\n      state: { ...getDefaultState(), ...state },\n    });\n\n    this.hub = new EventEmitter() as UserOperationControllerEventEmitter;\n\n    this.#entrypoint = entrypoint;\n    this.#getGasFeeEstimates = getGasFeeEstimates;\n    this.#version = version ?? Version4337.V06;\n\n    this.#pendingUserOperationTracker = new PendingUserOperationTracker({\n      getUserOperations: () =>\n        cloneDeep(Object.values(this.state.userOperations)),\n      messenger,\n    });\n\n    this.#addPendingUserOperationTrackerListeners();\n  }\n\n  /**\n   * Create and submit a user operation.\n   *\n   * @param request - Information required to create a user operation.\n   * @param request.data - Data to include in the resulting transaction.\n   * @param request.maxFeePerGas - Maximum fee per gas to pay towards the transaction.\n   * @param request.maxPriorityFeePerGas - Maximum priority fee per gas to pay towards the transaction.\n   * @param request.to - Destination address of the resulting transaction.\n   * @param request.value - Value to include in the resulting transaction.\n   * @param options - Configuration options when creating a user operation.\n   * @param options.networkClientId - ID of the network client used to query the chain.\n   * @param options.origin - Origin of the user operation, such as the hostname of a dApp.\n   * @param options.requireApproval - Whether to require user approval before submitting the user operation. Defaults to true.\n   * @param options.smartContractAccount - Smart contract abstraction to provide the contract specific values such as call data and nonce. Defaults to the current snap account.\n   * @param options.swaps - Swap metadata to record with the user operation.\n   * @param options.type - Type of the transaction.\n   */\n  async addUserOperation(\n    request: AddUserOperationRequest,\n    options: AddUserOperationOptions,\n  ): Promise<AddUserOperationResponse> {\n    validateAddUserOperationRequest(request);\n    validateAddUserOperationOptions(options);\n\n    return await this.#addUserOperation(request, options);\n  }\n\n  /**\n   * Create and submit a user operation equivalent to the provided transaction.\n   *\n   * @param transaction - Transaction to use as the basis for the user operation.\n   * @param options - Configuration options when creating a user operation.\n   * @param options.networkClientId - ID of the network client used to query the chain.\n   * @param options.origin - Origin of the user operation, such as the hostname of a dApp.\n   * @param options.requireApproval - Whether to require user approval before submitting the user operation. Defaults to true.\n   * @param options.smartContractAccount - Smart contract abstraction to provide the contract specific values such as call data and nonce. Defaults to the current snap account.\n   * @param options.swaps - Swap metadata to record with the user operation.\n   * @param options.type - Type of the transaction.\n   */\n  async addUserOperationFromTransaction(\n    transaction: TransactionParams,\n    options: AddUserOperationOptions,\n  ): Promise<AddUserOperationResponse> {\n    validateAddUserOperationOptions(options);\n\n    const { data, from, maxFeePerGas, maxPriorityFeePerGas, to, value } =\n      transaction;\n\n    const request: AddUserOperationRequest = {\n      data: data === '' ? undefined : data,\n      from,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      to,\n      value,\n    };\n\n    validateAddUserOperationRequest(request);\n\n    return await this.#addUserOperation(request, { ...options, transaction });\n  }\n\n  startPollingByNetworkClientId(networkClientId: string): string {\n    return this.#pendingUserOperationTracker.startPollingByNetworkClientId(\n      networkClientId,\n    );\n  }\n\n  async #addUserOperation(\n    request: AddUserOperationRequest,\n    options: AddUserOperationOptions & { transaction?: TransactionParams },\n  ): Promise<AddUserOperationResponse> {\n    log('Adding user operation', { request, options });\n\n    const {\n      networkClientId,\n      origin,\n      smartContractAccount: requestSmartContractAccount,\n      swaps,\n      transaction,\n    } = options;\n\n    const { chainId, provider } = await this.#getProvider(networkClientId);\n\n    const metadata = await this.#createMetadata(\n      chainId,\n      origin,\n      transaction,\n      swaps,\n    );\n\n    const smartContractAccount =\n      requestSmartContractAccount ??\n      new SnapSmartContractAccount(this.messagingSystem);\n\n    const cache: UserOperationCache = {\n      chainId,\n      metadata,\n      options: { ...options, smartContractAccount },\n      provider,\n      request,\n      transaction,\n    };\n\n    const { id } = metadata;\n    let throwError = false;\n\n    const hashValue = (async () => {\n      try {\n        return await this.#prepareAndSubmitUserOperation(cache);\n      } catch (error) {\n        this.#failUserOperation(metadata, error);\n\n        if (throwError) {\n          throw error;\n        }\n\n        return undefined;\n      }\n    })();\n\n    const hash = async () => {\n      throwError = true;\n      return await hashValue;\n    };\n\n    const transactionHash = async () => {\n      await hash();\n\n      const { transactionHash: finalTransactionHash } =\n        await this.#waitForConfirmation(metadata);\n\n      return finalTransactionHash as string;\n    };\n\n    return {\n      id,\n      hash,\n      transactionHash,\n    };\n  }\n\n  async #prepareAndSubmitUserOperation(cache: UserOperationCache) {\n    const { metadata, options } = cache;\n    const { requireApproval, smartContractAccount } = options;\n    let resultCallbacks: AcceptResultCallbacks | undefined;\n\n    try {\n      await this.#prepareUserOperation(cache);\n      await this.#addPaymasterData(metadata, smartContractAccount);\n\n      this.hub.emit('user-operation-added', metadata);\n\n      if (requireApproval !== false) {\n        resultCallbacks = await this.#approveUserOperation(cache);\n      }\n\n      await this.#signUserOperation(metadata, smartContractAccount);\n      await this.#submitUserOperation(metadata);\n\n      resultCallbacks?.success();\n\n      return metadata.hash as string;\n    } catch (error) {\n      /* istanbul ignore next */\n      resultCallbacks?.error(error as Error);\n      throw error;\n    }\n  }\n\n  async #waitForConfirmation(\n    metadata: UserOperationMetadata,\n  ): Promise<UserOperationMetadata> {\n    const { id, hash } = metadata;\n\n    log('Waiting for confirmation', id, hash);\n\n    return new Promise((resolve, reject) => {\n      this.hub.once(`${id}:confirmed`, (finalMetadata) => {\n        resolve(finalMetadata);\n      });\n\n      this.hub.once(`${id}:failed`, (_finalMetadata, error) => {\n        reject(error);\n      });\n    });\n  }\n\n  async #createMetadata(\n    chainId: string,\n    origin: string,\n    transaction?: TransactionParams,\n    swaps?: AddUserOperationSwapOptions,\n  ): Promise<UserOperationMetadata> {\n    const metadata: UserOperationMetadata = {\n      actualGasCost: null,\n      actualGasUsed: null,\n      baseFeePerGas: null,\n      bundlerUrl: null,\n      chainId,\n      error: null,\n      hash: null,\n      id: random(),\n      origin,\n      status: UserOperationStatus.Unapproved,\n      swapsMetadata: swaps\n        ? {\n            approvalTxId: swaps.approvalTxId ?? null,\n            destinationTokenAddress: swaps.destinationTokenAddress ?? null,\n            destinationTokenAmount: swaps.destinationTokenAmount ?? null,\n            destinationTokenDecimals: swaps.destinationTokenDecimals ?? null,\n            destinationTokenSymbol: swaps.destinationTokenSymbol ?? null,\n            estimatedBaseFee: swaps.estimatedBaseFee ?? null,\n            sourceTokenAddress: swaps.sourceTokenAddress ?? null,\n            sourceTokenAmount: swaps.sourceTokenAmount ?? null,\n            sourceTokenDecimals: swaps.sourceTokenDecimals ?? null,\n            sourceTokenSymbol: swaps.sourceTokenSymbol ?? null,\n            swapAndSendRecipient: swaps.swapAndSendRecipient ?? null,\n            swapMetaData: (swaps.swapMetaData as Record<string, never>) ?? null,\n            swapTokenValue: swaps.swapTokenValue ?? null,\n          }\n        : null,\n      time: Date.now(),\n      transactionHash: null,\n      transactionParams: (transaction as Required<TransactionParams>) ?? null,\n      transactionType: null,\n      userFeeLevel: null,\n      userOperation: this.#createEmptyUserOperation(transaction),\n    };\n\n    this.#updateMetadata(metadata);\n\n    log('Added user operation', metadata.id);\n\n    return metadata;\n  }\n\n  async #prepareUserOperation(cache: UserOperationCache) {\n    const { chainId, metadata, options, provider, request, transaction } =\n      cache;\n\n    const { data, from, to, value } = request;\n    const { id, transactionParams, userOperation } = metadata;\n    const { smartContractAccount } = options;\n\n    log('Preparing user operation', { id });\n\n    const transactionType = await this.#getTransactionType(\n      transaction,\n      provider,\n      options,\n    );\n\n    metadata.transactionType = transactionType ?? null;\n\n    log('Determined transaction type', transactionType);\n\n    await updateGasFees({\n      getGasFeeEstimates: this.#getGasFeeEstimates,\n      metadata,\n      originalRequest: request,\n      provider,\n      transaction: transactionParams ?? undefined,\n    });\n\n    const response = await smartContractAccount.prepareUserOperation({\n      chainId,\n      data,\n      from,\n      to,\n      value,\n    });\n\n    validatePrepareUserOperationResponse(response);\n\n    const {\n      bundler: bundlerUrl,\n      callData,\n      dummyPaymasterAndData,\n      dummySignature,\n      initCode,\n      nonce,\n      sender,\n    } = response;\n\n    userOperation.callData = callData;\n    userOperation.initCode = initCode ?? EMPTY_BYTES;\n    userOperation.nonce = nonce;\n    userOperation.paymasterAndData = dummyPaymasterAndData ?? EMPTY_BYTES;\n    userOperation.sender = sender;\n    userOperation.signature = dummySignature ?? EMPTY_BYTES;\n\n    metadata.bundlerUrl = bundlerUrl;\n\n    await updateGas(metadata, response, this.#entrypoint, this.#version);\n\n    this.#updateMetadata(metadata);\n  }\n\n  async #addPaymasterData(\n    metadata: UserOperationMetadata,\n    smartContractAccount: SmartContractAccount,\n  ) {\n    const { id, userOperation, chainId } = metadata;\n\n    log('Requesting paymaster data', { id });\n\n    const response = await smartContractAccount.updateUserOperation({\n      userOperation,\n      chainId,\n    });\n\n    validateUpdateUserOperationResponse(response);\n\n    userOperation.paymasterAndData = response.paymasterAndData ?? EMPTY_BYTES;\n    if (response.callGasLimit) {\n      userOperation.callGasLimit = response.callGasLimit;\n    }\n    if (response.preVerificationGas) {\n      userOperation.preVerificationGas = response.preVerificationGas;\n    }\n    if (response.verificationGasLimit) {\n      userOperation.verificationGasLimit = response.verificationGasLimit;\n    }\n\n    this.#updateMetadata(metadata);\n  }\n\n  async #approveUserOperation(cache: UserOperationCache) {\n    log('Requesting approval');\n\n    const { metadata } = cache;\n\n    const { resultCallbacks, value } = await this.#requestApproval(metadata);\n    const updatedTransaction = value?.txMeta;\n\n    if (updatedTransaction) {\n      await this.#updateUserOperationAfterApproval(cache, updatedTransaction);\n    }\n\n    metadata.status = UserOperationStatus.Approved;\n\n    this.#updateMetadata(metadata);\n\n    return resultCallbacks;\n  }\n\n  async #signUserOperation(\n    metadata: UserOperationMetadata,\n    smartContractAccount: SmartContractAccount,\n  ) {\n    const { id, chainId, userOperation } = metadata;\n\n    log('Signing user operation', id, userOperation);\n\n    const response = await smartContractAccount.signUserOperation({\n      userOperation,\n      chainId,\n    });\n\n    validateSignUserOperationResponse(response);\n\n    const { signature } = response;\n\n    userOperation.signature = signature;\n\n    log('Signed user operation', signature);\n\n    metadata.status = UserOperationStatus.Signed;\n\n    this.#updateMetadata(metadata);\n  }\n\n  async #submitUserOperation(metadata: UserOperationMetadata) {\n    const { userOperation } = metadata;\n\n    log('Submitting user operation', userOperation);\n\n    const bundler = new Bundler({\n      url: metadata.bundlerUrl as string,\n      version: this.#version,\n    });\n\n    const hash = await bundler.sendUserOperation(\n      userOperation,\n      this.#entrypoint,\n    );\n\n    metadata.hash = hash;\n    metadata.status = UserOperationStatus.Submitted;\n\n    this.#updateMetadata(metadata);\n  }\n\n  #failUserOperation(metadata: UserOperationMetadata, error: unknown) {\n    const { id } = metadata;\n    const rawError = error as Record<string, string>;\n\n    log('User operation failed', id, error);\n\n    metadata.error = {\n      name: rawError.name,\n      message: rawError.message,\n      stack: rawError.stack,\n      code: rawError.code,\n      rpc: rawError.value,\n    };\n\n    metadata.status = UserOperationStatus.Failed;\n\n    this.#updateMetadata(metadata);\n\n    if (\n      String(rawError.code) === String(errorCodes.provider.userRejectedRequest)\n    ) {\n      this.#deleteMetadata(id);\n    }\n  }\n\n  #createEmptyUserOperation(transaction?: TransactionParams): UserOperation {\n    return {\n      callData: EMPTY_BYTES,\n      callGasLimit: EMPTY_BYTES,\n      initCode: EMPTY_BYTES,\n      maxFeePerGas: transaction?.maxFeePerGas ?? EMPTY_BYTES,\n      maxPriorityFeePerGas: transaction?.maxPriorityFeePerGas ?? EMPTY_BYTES,\n      nonce: EMPTY_BYTES,\n      paymasterAndData: EMPTY_BYTES,\n      preVerificationGas: EMPTY_BYTES,\n      sender: ADDRESS_ZERO,\n      signature: EMPTY_BYTES,\n      verificationGasLimit: EMPTY_BYTES,\n    };\n  }\n\n  #updateMetadata(metadata: UserOperationMetadata) {\n    const { id } = metadata;\n\n    this.update((state) => {\n      state.userOperations[id] = cloneDeep(metadata);\n    });\n\n    this.#updateTransaction(metadata);\n  }\n\n  #deleteMetadata(id: string) {\n    this.update((state) => {\n      delete state.userOperations[id];\n    });\n  }\n\n  #updateTransaction(metadata: UserOperationMetadata) {\n    if (!metadata.transactionParams) {\n      return;\n    }\n\n    const transactionMetadata = getTransactionMetadata(metadata);\n\n    this.hub.emit('transaction-updated', transactionMetadata);\n  }\n\n  #addPendingUserOperationTrackerListeners() {\n    this.#pendingUserOperationTracker.hub.on(\n      'user-operation-confirmed',\n      (metadata) => {\n        log('In listener...');\n        this.hub.emit('user-operation-confirmed', metadata);\n        // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        this.hub.emit(`${metadata.id}:confirmed`, metadata);\n      },\n    );\n\n    this.#pendingUserOperationTracker.hub.on(\n      'user-operation-failed',\n      (metadata, error) => {\n        this.hub.emit('user-operation-failed', metadata, error);\n        // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        this.hub.emit(`${metadata.id}:failed`, metadata, error);\n      },\n    );\n\n    this.#pendingUserOperationTracker.hub.on(\n      'user-operation-updated',\n      (metadata) => {\n        this.#updateMetadata(metadata);\n      },\n    );\n  }\n\n  async #requestApproval(metadata: UserOperationMetadata) {\n    const { id, origin } = metadata;\n    const type = ApprovalType.Transaction;\n    const requestData = { txId: id };\n\n    return (await this.messagingSystem.call(\n      'ApprovalController:addRequest',\n      {\n        id,\n        origin,\n        type,\n        requestData,\n        expectsResult: true,\n      },\n      true, // Should display approval request to user\n    )) as AddResult & { value?: { txMeta?: TransactionMeta } };\n  }\n\n  async #getTransactionType(\n    transaction: TransactionParams | undefined,\n    provider: Provider,\n    options: AddUserOperationOptions,\n  ): Promise<TransactionType | undefined> {\n    if (!transaction) {\n      return undefined;\n    }\n\n    if (options.type) {\n      return options.type;\n    }\n\n    const ethQuery = new EthQuery(provider);\n    const result = determineTransactionType(transaction, ethQuery);\n\n    return (await result).type;\n  }\n\n  async #getProvider(\n    networkClientId: string,\n  ): Promise<{ provider: Provider; chainId: string }> {\n    const { provider, configuration } = this.messagingSystem.call(\n      'NetworkController:getNetworkClientById',\n      networkClientId,\n    );\n\n    const { chainId } = configuration;\n\n    return { provider, chainId };\n  }\n\n  async #updateUserOperationAfterApproval(\n    cache: UserOperationCache,\n    updatedTransaction: TransactionMeta,\n  ) {\n    log('Found updated transaction in approval', { updatedTransaction });\n\n    const { metadata, request } = cache;\n\n    const { userOperation } = metadata;\n    const usingPaymaster = userOperation.paymasterAndData !== EMPTY_BYTES;\n\n    const updatedMaxFeePerGas = add0x(\n      updatedTransaction.txParams.maxFeePerGas as string,\n    );\n\n    const updatedMaxPriorityFeePerGas = add0x(\n      updatedTransaction.txParams.maxPriorityFeePerGas as string,\n    );\n\n    let regenerateUserOperation = false;\n    const previousMaxFeePerGas = userOperation.maxFeePerGas;\n    const previousMaxPriorityFeePerGas = userOperation.maxPriorityFeePerGas;\n\n    const gasFeesUpdated =\n      previousMaxFeePerGas !== updatedMaxFeePerGas ||\n      previousMaxPriorityFeePerGas !== updatedMaxPriorityFeePerGas;\n\n    /**\n     * true when we detect {@link getTransactionMetadata} has set the gas fees to zero\n     * because the userOperation has a paymaster. This should not be mistaken for gas\n     * fees being updated during the approval process.\n     */\n    const areGasFeesZeroBecauseOfPaymaster =\n      usingPaymaster &&\n      updatedMaxFeePerGas === VALUE_ZERO &&\n      updatedMaxPriorityFeePerGas === VALUE_ZERO;\n\n    if (gasFeesUpdated && !areGasFeesZeroBecauseOfPaymaster) {\n      log('Gas fees updated during approval', {\n        previousMaxFeePerGas,\n        previousMaxPriorityFeePerGas,\n        updatedMaxFeePerGas,\n        updatedMaxPriorityFeePerGas,\n      });\n\n      userOperation.maxFeePerGas = updatedMaxFeePerGas;\n      userOperation.maxPriorityFeePerGas = updatedMaxPriorityFeePerGas;\n\n      regenerateUserOperation = usingPaymaster;\n    }\n\n    const previousData = request.data ?? EMPTY_BYTES;\n    const updatedData = updatedTransaction.txParams.data ?? EMPTY_BYTES;\n\n    if (previousData !== updatedData) {\n      log('Data updated during approval', { previousData, updatedData });\n      regenerateUserOperation = true;\n    }\n\n    const previousValue = request.value ?? VALUE_ZERO;\n    const updatedValue = updatedTransaction.txParams.value ?? VALUE_ZERO;\n\n    if (previousValue !== updatedValue) {\n      log('Value updated during approval', { previousValue, updatedValue });\n      regenerateUserOperation = true;\n    }\n\n    if (regenerateUserOperation) {\n      const updatedRequest = {\n        ...request,\n        data: updatedData,\n        maxFeePerGas: updatedMaxFeePerGas,\n        maxPriorityFeePerGas: updatedMaxPriorityFeePerGas,\n        value: updatedValue,\n      };\n\n      await this.#regenerateUserOperation({\n        ...cache,\n        request: updatedRequest,\n      });\n    }\n  }\n\n  async #regenerateUserOperation(cache: UserOperationCache) {\n    log(\n      'Regenerating user operation as parameters were updated during approval',\n    );\n\n    const {\n      options: { smartContractAccount },\n      metadata,\n    } = cache;\n\n    await this.#prepareUserOperation(cache);\n    await this.#addPaymasterData(metadata, smartContractAccount);\n\n    log('Regenerated user operation', metadata.userOperation);\n  }\n}\n"]}
\ No newline at end of file
diff --git a/dist/helpers/Bundler.cjs b/dist/helpers/Bundler.cjs
index d4be83243d51bb03092f1df870ac46190bdb009a..a41c2f4ef52e78088e5c0ccd36ee80163fbad478 100644
--- a/dist/helpers/Bundler.cjs
+++ b/dist/helpers/Bundler.cjs
@@ -11,19 +11,23 @@ var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (
     if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
     return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
 };
-var _Bundler_instances, _Bundler_url, _Bundler_query;
+var _Bundler_instances, _Bundler_url, _Bundler_version, _Bundler_query, _Bundler_getCompatibleUserOperation;
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.Bundler = void 0;
 const logger_1 = require("../logger.cjs");
+const types_1 = require("../types.cjs");
+const compatability_1 = require("../utils/compatability.cjs");
 const log = (0, logger_1.createModuleLogger)(logger_1.projectLogger, 'bundler');
 /**
  * A helper class for interacting with a bundler.
  */
 class Bundler {
-    constructor(url) {
+    constructor({ url, version }) {
         _Bundler_instances.add(this);
         _Bundler_url.set(this, void 0);
+        _Bundler_version.set(this, void 0);
         __classPrivateFieldSet(this, _Bundler_url, url, "f");
+        __classPrivateFieldSet(this, _Bundler_version, version ?? types_1.Version4337.V06, "f");
     }
     /**
      * Estimate the gas required to execute a user operation.
@@ -33,8 +37,13 @@ class Bundler {
      * @returns The estimated gas limits for the user operation.
      */
     async estimateUserOperationGas(userOperation, entrypoint) {
-        log('Estimating gas', { url: __classPrivateFieldGet(this, _Bundler_url, "f"), userOperation, entrypoint });
-        const response = await __classPrivateFieldGet(this, _Bundler_instances, "m", _Bundler_query).call(this, 'eth_estimateUserOperationGas', [userOperation, entrypoint]);
+        const finalUserOperation = __classPrivateFieldGet(this, _Bundler_instances, "m", _Bundler_getCompatibleUserOperation).call(this, userOperation);
+        log('Estimating gas', {
+            url: __classPrivateFieldGet(this, _Bundler_url, "f"),
+            userOperation: finalUserOperation,
+            entrypoint,
+        });
+        const response = await __classPrivateFieldGet(this, _Bundler_instances, "m", _Bundler_query).call(this, 'eth_estimateUserOperationGas', [finalUserOperation, entrypoint]);
         log('Estimated gas', { response });
         return response;
     }
@@ -54,13 +63,14 @@ class Bundler {
      * @returns The hash of the user operation.
      */
     async sendUserOperation(userOperation, entrypoint) {
+        const finalUserOperation = __classPrivateFieldGet(this, _Bundler_instances, "m", _Bundler_getCompatibleUserOperation).call(this, userOperation);
         log('Sending user operation', {
             url: __classPrivateFieldGet(this, _Bundler_url, "f"),
-            userOperation,
+            userOperation: finalUserOperation,
             entrypoint,
         });
         const hash = await __classPrivateFieldGet(this, _Bundler_instances, "m", _Bundler_query).call(this, 'eth_sendUserOperation', [
-            userOperation,
+            finalUserOperation,
             entrypoint,
         ]);
         log('Sent user operation', hash);
@@ -68,7 +78,7 @@ class Bundler {
     }
 }
 exports.Bundler = Bundler;
-_Bundler_url = new WeakMap(), _Bundler_instances = new WeakSet(), _Bundler_query = 
+_Bundler_url = new WeakMap(), _Bundler_version = new WeakMap(), _Bundler_instances = new WeakSet(), _Bundler_query = 
 // TODO: Either fix this lint violation or explain why it's necessary to ignore.
 // eslint-disable-next-line @typescript-eslint/naming-convention
 async function _Bundler_query(method, params) {
@@ -89,5 +99,9 @@ async function _Bundler_query(method, params) {
         throw error;
     }
     return responseJson.result;
+}, _Bundler_getCompatibleUserOperation = function _Bundler_getCompatibleUserOperation(userOperation) {
+    return __classPrivateFieldGet(this, _Bundler_version, "f") === types_1.Version4337.V07
+        ? (0, compatability_1.toUserOperationV07)(userOperation)
+        : userOperation;
 };
 //# sourceMappingURL=Bundler.cjs.map
\ No newline at end of file
diff --git a/dist/helpers/Bundler.cjs.map b/dist/helpers/Bundler.cjs.map
index 18bb46fdcac5f46ae9f17df02aadb95a01962a35..b3399eb3f5a8b55ff181f48456de7abf0d1eff66 100644
--- a/dist/helpers/Bundler.cjs.map
+++ b/dist/helpers/Bundler.cjs.map
@@ -1 +1 @@
-{"version":3,"file":"Bundler.cjs","sourceRoot":"","sources":["../../src/helpers/Bundler.ts"],"names":[],"mappings":";AAAA,wCAAwC;;;;;;;;;;;;;;;AAExC,0CAA8D;AAG9D,MAAM,GAAG,GAAG,IAAA,2BAAkB,EAAC,sBAAa,EAAE,SAAS,CAAC,CAAC;AAoBzD;;GAEG;AACH,MAAa,OAAO;IAGlB,YAAY,GAAW;;QAFvB,+BAAa;QAGX,uBAAA,IAAI,gBAAQ,GAAG,MAAA,CAAC;IAClB,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,wBAAwB,CAC5B,aAA4B,EAC5B,UAAkB;QAElB,GAAG,CAAC,gBAAgB,EAAE,EAAE,GAAG,EAAE,uBAAA,IAAI,oBAAK,EAAE,aAAa,EAAE,UAAU,EAAE,CAAC,CAAC;QAErE,MAAM,QAAQ,GAA4C,MAAM,uBAAA,IAAI,0CAAO,MAAX,IAAI,EAClE,8BAA8B,EAC9B,CAAC,aAAa,EAAE,UAAU,CAAC,CAC5B,CAAC;QAEF,GAAG,CAAC,eAAe,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAC;QAEnC,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,uBAAuB,CAC3B,IAAa;QAEb,GAAG,CAAC,gCAAgC,EAAE,EAAE,GAAG,EAAE,uBAAA,IAAI,oBAAK,EAAE,IAAI,EAAE,CAAC,CAAC;QAEhE,OAAO,MAAM,uBAAA,IAAI,0CAAO,MAAX,IAAI,EACf,6BAA6B,EAC7B,CAAC,IAAI,CAAC,CACP,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,iBAAiB,CACrB,aAA4B,EAC5B,UAAkB;QAElB,GAAG,CAAC,wBAAwB,EAAE;YAC5B,GAAG,EAAE,uBAAA,IAAI,oBAAK;YACd,aAAa;YACb,UAAU;SACX,CAAC,CAAC;QAEH,MAAM,IAAI,GAAW,MAAM,uBAAA,IAAI,0CAAO,MAAX,IAAI,EAAQ,uBAAuB,EAAE;YAC9D,aAAa;YACb,UAAU;SACX,CAAC,CAAC;QAEH,GAAG,CAAC,qBAAqB,EAAE,IAAI,CAAC,CAAC;QAEjC,OAAO,IAAI,CAAC;IACd,CAAC;CA4BF;AAlGD,0BAkGC;;AA1BC,gFAAgF;AAChF,gEAAgE;AAChE,KAAK,yBAAW,MAAc,EAAE,MAAiB;IAC/C,MAAM,OAAO,GAAG;QACd,MAAM,EAAE,MAAM;QACd,OAAO,EAAE;YACP,MAAM,EAAE,kBAAkB;YAC1B,cAAc,EAAE,kBAAkB;SACnC;QACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC;KAChE,CAAC;IAEF,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,uBAAA,IAAI,oBAAK,EAAE,OAAO,CAAC,CAAC;IACjD,MAAM,YAAY,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;IAE3C,IAAI,YAAY,CAAC,KAAK,EAAE;QACtB,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,OAAO,IAAI,YAAY,CAAC,KAAK,CAAC,CAAC;QAEzE,KAA2C,CAAC,IAAI;YAC/C,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC;QAE1B,MAAM,KAAK,CAAC;KACb;IAED,OAAO,YAAY,CAAC,MAAM,CAAC;AAC7B,CAAC","sourcesContent":["/* eslint-disable jsdoc/require-jsdoc */\n\nimport { createModuleLogger, projectLogger } from '../logger';\nimport type { UserOperation, UserOperationReceipt } from '../types';\n\nconst log = createModuleLogger(projectLogger, 'bundler');\n\n/**\n * Response from the `eth_estimateUserOperationGas` bundler method.\n * Includes the estimated gas limits required by a user operation.\n */\nexport type BundlerEstimateUserOperationGasResponse = {\n  /** Estimated gas required to compensate the bundler for any pre-verification. */\n  preVerificationGas: number | string;\n\n  /** Estimated gas required to verify the user operation. */\n  verificationGas?: number | string;\n\n  /** Estimated gas required to verify the user operation. */\n  verificationGasLimit?: number | string;\n\n  /** Estimated gas required for the execution of the user operation. */\n  callGasLimit: number | string;\n};\n\n/**\n * A helper class for interacting with a bundler.\n */\nexport class Bundler {\n  #url: string;\n\n  constructor(url: string) {\n    this.#url = url;\n  }\n\n  /**\n   * Estimate the gas required to execute a user operation.\n   *\n   * @param userOperation - The user operation to estimate gas for.\n   * @param entrypoint - The address of entrypoint to use for the user operation.\n   * @returns The estimated gas limits for the user operation.\n   */\n  async estimateUserOperationGas(\n    userOperation: UserOperation,\n    entrypoint: string,\n  ): Promise<BundlerEstimateUserOperationGasResponse> {\n    log('Estimating gas', { url: this.#url, userOperation, entrypoint });\n\n    const response: BundlerEstimateUserOperationGasResponse = await this.#query(\n      'eth_estimateUserOperationGas',\n      [userOperation, entrypoint],\n    );\n\n    log('Estimated gas', { response });\n\n    return response;\n  }\n\n  /**\n   * Retrieve the receipt for a user operation.\n   * @param hash - The hash of the user operation.\n   * @returns The receipt for the user operation, or `undefined` if the user operation is pending.\n   */\n  async getUserOperationReceipt(\n    hash?: string,\n  ): Promise<UserOperationReceipt | undefined> {\n    log('Getting user operation receipt', { url: this.#url, hash });\n\n    return await this.#query<UserOperationReceipt | undefined>(\n      'eth_getUserOperationReceipt',\n      [hash],\n    );\n  }\n\n  /**\n   * Submit a user operation to the bundler.\n   * @param userOperation - The signed user operation to submit.\n   * @param entrypoint - The address of entrypoint to use for the user operation.\n   * @returns The hash of the user operation.\n   */\n  async sendUserOperation(\n    userOperation: UserOperation,\n    entrypoint: string,\n  ): Promise<string> {\n    log('Sending user operation', {\n      url: this.#url,\n      userOperation,\n      entrypoint,\n    });\n\n    const hash: string = await this.#query('eth_sendUserOperation', [\n      userOperation,\n      entrypoint,\n    ]);\n\n    log('Sent user operation', hash);\n\n    return hash;\n  }\n\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  async #query<T>(method: string, params: unknown[]): Promise<T> {\n    const request = {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ jsonrpc: '2.0', id: 1, method, params }),\n    };\n\n    const response = await fetch(this.#url, request);\n    const responseJson = await response.json();\n\n    if (responseJson.error) {\n      const error = new Error(responseJson.error.message || responseJson.error);\n\n      (error as unknown as Record<string, string>).code =\n        responseJson.error.code;\n\n      throw error;\n    }\n\n    return responseJson.result;\n  }\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"Bundler.cjs","sourceRoot":"","sources":["../../src/helpers/Bundler.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable jsdoc/require-jsdoc */\n\nimport { createModuleLogger, projectLogger } from '../logger';\nimport type {\n  UserOperation,\n  UserOperationReceipt,\n  UserOperationV07,\n} from '../types';\nimport { Version4337 } from '../types';\nimport { toUserOperationV07 } from '../utils/compatability';\n\nconst log = createModuleLogger(projectLogger, 'bundler');\n\n/**\n * Response from the `eth_estimateUserOperationGas` bundler method.\n * Includes the estimated gas limits required by a user operation.\n */\nexport type BundlerEstimateUserOperationGasResponse = {\n  /** Estimated gas required to compensate the bundler for any pre-verification. */\n  preVerificationGas: number | string;\n\n  /** Estimated gas required to verify the user operation. */\n  verificationGas?: number | string;\n\n  /** Estimated gas required to verify the user operation. */\n  verificationGasLimit?: number | string;\n\n  /** Estimated gas required for the execution of the user operation. */\n  callGasLimit: number | string;\n};\n\n/**\n * A helper class for interacting with a bundler.\n */\nexport class Bundler {\n  #url: string;\n\n  #version: Version4337;\n\n  constructor({ url, version }: { url: string; version?: Version4337 }) {\n    this.#url = url;\n    this.#version = version ?? Version4337.V06;\n  }\n\n  /**\n   * Estimate the gas required to execute a user operation.\n   *\n   * @param userOperation - The user operation to estimate gas for.\n   * @param entrypoint - The address of entrypoint to use for the user operation.\n   * @returns The estimated gas limits for the user operation.\n   */\n  async estimateUserOperationGas(\n    userOperation: UserOperation,\n    entrypoint: string,\n  ): Promise<BundlerEstimateUserOperationGasResponse> {\n    const finalUserOperation = this.#getCompatibleUserOperation(userOperation);\n\n    log('Estimating gas', {\n      url: this.#url,\n      userOperation: finalUserOperation,\n      entrypoint,\n    });\n\n    const response: BundlerEstimateUserOperationGasResponse = await this.#query(\n      'eth_estimateUserOperationGas',\n      [finalUserOperation, entrypoint],\n    );\n\n    log('Estimated gas', { response });\n\n    return response;\n  }\n\n  /**\n   * Retrieve the receipt for a user operation.\n   * @param hash - The hash of the user operation.\n   * @returns The receipt for the user operation, or `undefined` if the user operation is pending.\n   */\n  async getUserOperationReceipt(\n    hash?: string,\n  ): Promise<UserOperationReceipt | undefined> {\n    log('Getting user operation receipt', { url: this.#url, hash });\n\n    return await this.#query<UserOperationReceipt | undefined>(\n      'eth_getUserOperationReceipt',\n      [hash],\n    );\n  }\n\n  /**\n   * Submit a user operation to the bundler.\n   * @param userOperation - The signed user operation to submit.\n   * @param entrypoint - The address of entrypoint to use for the user operation.\n   * @returns The hash of the user operation.\n   */\n  async sendUserOperation(\n    userOperation: UserOperation,\n    entrypoint: string,\n  ): Promise<string> {\n    const finalUserOperation = this.#getCompatibleUserOperation(userOperation);\n\n    log('Sending user operation', {\n      url: this.#url,\n      userOperation: finalUserOperation,\n      entrypoint,\n    });\n\n    const hash: string = await this.#query('eth_sendUserOperation', [\n      finalUserOperation,\n      entrypoint,\n    ]);\n\n    log('Sent user operation', hash);\n\n    return hash;\n  }\n\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  async #query<T>(method: string, params: unknown[]): Promise<T> {\n    const request = {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ jsonrpc: '2.0', id: 1, method, params }),\n    };\n\n    const response = await fetch(this.#url, request);\n    const responseJson = await response.json();\n\n    if (responseJson.error) {\n      const error = new Error(responseJson.error.message || responseJson.error);\n\n      (error as unknown as Record<string, string>).code =\n        responseJson.error.code;\n\n      throw error;\n    }\n\n    return responseJson.result;\n  }\n\n  #getCompatibleUserOperation(\n    userOperation: UserOperation,\n  ): UserOperation | UserOperationV07 {\n    return this.#version === Version4337.V07\n      ? toUserOperationV07(userOperation)\n      : userOperation;\n  }\n}\n"]}
\ No newline at end of file
diff --git a/dist/helpers/Bundler.d.cts b/dist/helpers/Bundler.d.cts
index 1ee0ad6ea43fea212203c856aae333db899552b1..1e148b8539706d96f8ce68d66463f071f551f843 100644
--- a/dist/helpers/Bundler.d.cts
+++ b/dist/helpers/Bundler.d.cts
@@ -1,4 +1,5 @@
 import type { UserOperation, UserOperationReceipt } from "../types.cjs";
+import { Version4337 } from "../types.cjs";
 /**
  * Response from the `eth_estimateUserOperationGas` bundler method.
  * Includes the estimated gas limits required by a user operation.
@@ -18,7 +19,10 @@ export type BundlerEstimateUserOperationGasResponse = {
  */
 export declare class Bundler {
     #private;
-    constructor(url: string);
+    constructor({ url, version }: {
+        url: string;
+        version?: Version4337;
+    });
     /**
      * Estimate the gas required to execute a user operation.
      *
diff --git a/dist/helpers/Bundler.d.cts.map b/dist/helpers/Bundler.d.cts.map
index 9fffacc2c604314babbf767428e4295f4fe5c9c8..20bb8e61605f57b0c5ae77ee46487668b0b484ea 100644
--- a/dist/helpers/Bundler.d.cts.map
+++ b/dist/helpers/Bundler.d.cts.map
@@ -1 +1 @@
-{"version":3,"file":"Bundler.d.cts","sourceRoot":"","sources":["../../src/helpers/Bundler.ts"],"names":[],"mappings":"AAGA,OAAO,KAAK,EAAE,aAAa,EAAE,oBAAoB,EAAE,qBAAiB;AAIpE;;;GAGG;AACH,MAAM,MAAM,uCAAuC,GAAG;IACpD,iFAAiF;IACjF,kBAAkB,EAAE,MAAM,GAAG,MAAM,CAAC;IAEpC,2DAA2D;IAC3D,eAAe,CAAC,EAAE,MAAM,GAAG,MAAM,CAAC;IAElC,2DAA2D;IAC3D,oBAAoB,CAAC,EAAE,MAAM,GAAG,MAAM,CAAC;IAEvC,sEAAsE;IACtE,YAAY,EAAE,MAAM,GAAG,MAAM,CAAC;CAC/B,CAAC;AAEF;;GAEG;AACH,qBAAa,OAAO;;gBAGN,GAAG,EAAE,MAAM;IAIvB;;;;;;OAMG;IACG,wBAAwB,CAC5B,aAAa,EAAE,aAAa,EAC5B,UAAU,EAAE,MAAM,GACjB,OAAO,CAAC,uCAAuC,CAAC;IAanD;;;;OAIG;IACG,uBAAuB,CAC3B,IAAI,CAAC,EAAE,MAAM,GACZ,OAAO,CAAC,oBAAoB,GAAG,SAAS,CAAC;IAS5C;;;;;OAKG;IACG,iBAAiB,CACrB,aAAa,EAAE,aAAa,EAC5B,UAAU,EAAE,MAAM,GACjB,OAAO,CAAC,MAAM,CAAC;CA2CnB"}
\ No newline at end of file
+{"version":3,"file":"Bundler.d.cts","sourceRoot":"","sources":["../../src/helpers/Bundler.ts"],"names":[],"mappings":"AAGA,OAAO,KAAK,EACV,aAAa,EACb,oBAAoB,EAErB,qBAAiB;AAClB,OAAO,EAAE,WAAW,EAAE,qBAAiB;AAKvC;;;GAGG;AACH,MAAM,MAAM,uCAAuC,GAAG;IACpD,iFAAiF;IACjF,kBAAkB,EAAE,MAAM,GAAG,MAAM,CAAC;IAEpC,2DAA2D;IAC3D,eAAe,CAAC,EAAE,MAAM,GAAG,MAAM,CAAC;IAElC,2DAA2D;IAC3D,oBAAoB,CAAC,EAAE,MAAM,GAAG,MAAM,CAAC;IAEvC,sEAAsE;IACtE,YAAY,EAAE,MAAM,GAAG,MAAM,CAAC;CAC/B,CAAC;AAEF;;GAEG;AACH,qBAAa,OAAO;;gBAKN,EAAE,GAAG,EAAE,OAAO,EAAE,EAAE;QAAE,GAAG,EAAE,MAAM,CAAC;QAAC,OAAO,CAAC,EAAE,WAAW,CAAA;KAAE;IAKpE;;;;;;OAMG;IACG,wBAAwB,CAC5B,aAAa,EAAE,aAAa,EAC5B,UAAU,EAAE,MAAM,GACjB,OAAO,CAAC,uCAAuC,CAAC;IAmBnD;;;;OAIG;IACG,uBAAuB,CAC3B,IAAI,CAAC,EAAE,MAAM,GACZ,OAAO,CAAC,oBAAoB,GAAG,SAAS,CAAC;IAS5C;;;;;OAKG;IACG,iBAAiB,CACrB,aAAa,EAAE,aAAa,EAC5B,UAAU,EAAE,MAAM,GACjB,OAAO,CAAC,MAAM,CAAC;CAqDnB"}
\ No newline at end of file
diff --git a/dist/helpers/Bundler.d.mts b/dist/helpers/Bundler.d.mts
index c198fe67138bbd47d28f2057df09863ffea4cdf9..0ac330179b196f0e53846e1b921394575580efde 100644
--- a/dist/helpers/Bundler.d.mts
+++ b/dist/helpers/Bundler.d.mts
@@ -1,4 +1,5 @@
 import type { UserOperation, UserOperationReceipt } from "../types.mjs";
+import { Version4337 } from "../types.mjs";
 /**
  * Response from the `eth_estimateUserOperationGas` bundler method.
  * Includes the estimated gas limits required by a user operation.
@@ -18,7 +19,10 @@ export type BundlerEstimateUserOperationGasResponse = {
  */
 export declare class Bundler {
     #private;
-    constructor(url: string);
+    constructor({ url, version }: {
+        url: string;
+        version?: Version4337;
+    });
     /**
      * Estimate the gas required to execute a user operation.
      *
diff --git a/dist/helpers/Bundler.d.mts.map b/dist/helpers/Bundler.d.mts.map
index 3c36d9c50dc74e436195f117af03bad0e2e5ada2..8d4905a227adeb06b76e3e1a79ea582a698f794b 100644
--- a/dist/helpers/Bundler.d.mts.map
+++ b/dist/helpers/Bundler.d.mts.map
@@ -1 +1 @@
-{"version":3,"file":"Bundler.d.mts","sourceRoot":"","sources":["../../src/helpers/Bundler.ts"],"names":[],"mappings":"AAGA,OAAO,KAAK,EAAE,aAAa,EAAE,oBAAoB,EAAE,qBAAiB;AAIpE;;;GAGG;AACH,MAAM,MAAM,uCAAuC,GAAG;IACpD,iFAAiF;IACjF,kBAAkB,EAAE,MAAM,GAAG,MAAM,CAAC;IAEpC,2DAA2D;IAC3D,eAAe,CAAC,EAAE,MAAM,GAAG,MAAM,CAAC;IAElC,2DAA2D;IAC3D,oBAAoB,CAAC,EAAE,MAAM,GAAG,MAAM,CAAC;IAEvC,sEAAsE;IACtE,YAAY,EAAE,MAAM,GAAG,MAAM,CAAC;CAC/B,CAAC;AAEF;;GAEG;AACH,qBAAa,OAAO;;gBAGN,GAAG,EAAE,MAAM;IAIvB;;;;;;OAMG;IACG,wBAAwB,CAC5B,aAAa,EAAE,aAAa,EAC5B,UAAU,EAAE,MAAM,GACjB,OAAO,CAAC,uCAAuC,CAAC;IAanD;;;;OAIG;IACG,uBAAuB,CAC3B,IAAI,CAAC,EAAE,MAAM,GACZ,OAAO,CAAC,oBAAoB,GAAG,SAAS,CAAC;IAS5C;;;;;OAKG;IACG,iBAAiB,CACrB,aAAa,EAAE,aAAa,EAC5B,UAAU,EAAE,MAAM,GACjB,OAAO,CAAC,MAAM,CAAC;CA2CnB"}
\ No newline at end of file
+{"version":3,"file":"Bundler.d.mts","sourceRoot":"","sources":["../../src/helpers/Bundler.ts"],"names":[],"mappings":"AAGA,OAAO,KAAK,EACV,aAAa,EACb,oBAAoB,EAErB,qBAAiB;AAClB,OAAO,EAAE,WAAW,EAAE,qBAAiB;AAKvC;;;GAGG;AACH,MAAM,MAAM,uCAAuC,GAAG;IACpD,iFAAiF;IACjF,kBAAkB,EAAE,MAAM,GAAG,MAAM,CAAC;IAEpC,2DAA2D;IAC3D,eAAe,CAAC,EAAE,MAAM,GAAG,MAAM,CAAC;IAElC,2DAA2D;IAC3D,oBAAoB,CAAC,EAAE,MAAM,GAAG,MAAM,CAAC;IAEvC,sEAAsE;IACtE,YAAY,EAAE,MAAM,GAAG,MAAM,CAAC;CAC/B,CAAC;AAEF;;GAEG;AACH,qBAAa,OAAO;;gBAKN,EAAE,GAAG,EAAE,OAAO,EAAE,EAAE;QAAE,GAAG,EAAE,MAAM,CAAC;QAAC,OAAO,CAAC,EAAE,WAAW,CAAA;KAAE;IAKpE;;;;;;OAMG;IACG,wBAAwB,CAC5B,aAAa,EAAE,aAAa,EAC5B,UAAU,EAAE,MAAM,GACjB,OAAO,CAAC,uCAAuC,CAAC;IAmBnD;;;;OAIG;IACG,uBAAuB,CAC3B,IAAI,CAAC,EAAE,MAAM,GACZ,OAAO,CAAC,oBAAoB,GAAG,SAAS,CAAC;IAS5C;;;;;OAKG;IACG,iBAAiB,CACrB,aAAa,EAAE,aAAa,EAC5B,UAAU,EAAE,MAAM,GACjB,OAAO,CAAC,MAAM,CAAC;CAqDnB"}
\ No newline at end of file
diff --git a/dist/helpers/Bundler.mjs b/dist/helpers/Bundler.mjs
index 38eae0a573d57b80b9c1eba3243fd1ee9983edf2..36e8c5c3992858ee8219273ed3519d2a82240488 100644
--- a/dist/helpers/Bundler.mjs
+++ b/dist/helpers/Bundler.mjs
@@ -10,17 +10,21 @@ var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (
     if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
     return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
 };
-var _Bundler_instances, _Bundler_url, _Bundler_query;
+var _Bundler_instances, _Bundler_url, _Bundler_version, _Bundler_query, _Bundler_getCompatibleUserOperation;
 import { createModuleLogger, projectLogger } from "../logger.mjs";
+import { Version4337 } from "../types.mjs";
+import { toUserOperationV07 } from "../utils/compatability.mjs";
 const log = createModuleLogger(projectLogger, 'bundler');
 /**
  * A helper class for interacting with a bundler.
  */
 export class Bundler {
-    constructor(url) {
+    constructor({ url, version }) {
         _Bundler_instances.add(this);
         _Bundler_url.set(this, void 0);
+        _Bundler_version.set(this, void 0);
         __classPrivateFieldSet(this, _Bundler_url, url, "f");
+        __classPrivateFieldSet(this, _Bundler_version, version ?? Version4337.V06, "f");
     }
     /**
      * Estimate the gas required to execute a user operation.
@@ -30,8 +34,13 @@ export class Bundler {
      * @returns The estimated gas limits for the user operation.
      */
     async estimateUserOperationGas(userOperation, entrypoint) {
-        log('Estimating gas', { url: __classPrivateFieldGet(this, _Bundler_url, "f"), userOperation, entrypoint });
-        const response = await __classPrivateFieldGet(this, _Bundler_instances, "m", _Bundler_query).call(this, 'eth_estimateUserOperationGas', [userOperation, entrypoint]);
+        const finalUserOperation = __classPrivateFieldGet(this, _Bundler_instances, "m", _Bundler_getCompatibleUserOperation).call(this, userOperation);
+        log('Estimating gas', {
+            url: __classPrivateFieldGet(this, _Bundler_url, "f"),
+            userOperation: finalUserOperation,
+            entrypoint,
+        });
+        const response = await __classPrivateFieldGet(this, _Bundler_instances, "m", _Bundler_query).call(this, 'eth_estimateUserOperationGas', [finalUserOperation, entrypoint]);
         log('Estimated gas', { response });
         return response;
     }
@@ -51,20 +60,21 @@ export class Bundler {
      * @returns The hash of the user operation.
      */
     async sendUserOperation(userOperation, entrypoint) {
+        const finalUserOperation = __classPrivateFieldGet(this, _Bundler_instances, "m", _Bundler_getCompatibleUserOperation).call(this, userOperation);
         log('Sending user operation', {
             url: __classPrivateFieldGet(this, _Bundler_url, "f"),
-            userOperation,
+            userOperation: finalUserOperation,
             entrypoint,
         });
         const hash = await __classPrivateFieldGet(this, _Bundler_instances, "m", _Bundler_query).call(this, 'eth_sendUserOperation', [
-            userOperation,
+            finalUserOperation,
             entrypoint,
         ]);
         log('Sent user operation', hash);
         return hash;
     }
 }
-_Bundler_url = new WeakMap(), _Bundler_instances = new WeakSet(), _Bundler_query = 
+_Bundler_url = new WeakMap(), _Bundler_version = new WeakMap(), _Bundler_instances = new WeakSet(), _Bundler_query = 
 // TODO: Either fix this lint violation or explain why it's necessary to ignore.
 // eslint-disable-next-line @typescript-eslint/naming-convention
 async function _Bundler_query(method, params) {
@@ -85,5 +95,9 @@ async function _Bundler_query(method, params) {
         throw error;
     }
     return responseJson.result;
+}, _Bundler_getCompatibleUserOperation = function _Bundler_getCompatibleUserOperation(userOperation) {
+    return __classPrivateFieldGet(this, _Bundler_version, "f") === Version4337.V07
+        ? toUserOperationV07(userOperation)
+        : userOperation;
 };
 //# sourceMappingURL=Bundler.mjs.map
\ No newline at end of file
diff --git a/dist/helpers/Bundler.mjs.map b/dist/helpers/Bundler.mjs.map
index a256d4a70df4bfc6a9582ac7acbb34a713de5a3e..8ac014a0813d6441058a3ca872dfc9a5407e1f57 100644
--- a/dist/helpers/Bundler.mjs.map
+++ b/dist/helpers/Bundler.mjs.map
@@ -1 +1 @@
-{"version":3,"file":"Bundler.mjs","sourceRoot":"","sources":["../../src/helpers/Bundler.ts"],"names":[],"mappings":"AAAA,wCAAwC;;;;;;;;;;;;;AAExC,OAAO,EAAE,kBAAkB,EAAE,aAAa,EAAE,sBAAkB;AAG9D,MAAM,GAAG,GAAG,kBAAkB,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC;AAoBzD;;GAEG;AACH,MAAM,OAAO,OAAO;IAGlB,YAAY,GAAW;;QAFvB,+BAAa;QAGX,uBAAA,IAAI,gBAAQ,GAAG,MAAA,CAAC;IAClB,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,wBAAwB,CAC5B,aAA4B,EAC5B,UAAkB;QAElB,GAAG,CAAC,gBAAgB,EAAE,EAAE,GAAG,EAAE,uBAAA,IAAI,oBAAK,EAAE,aAAa,EAAE,UAAU,EAAE,CAAC,CAAC;QAErE,MAAM,QAAQ,GAA4C,MAAM,uBAAA,IAAI,0CAAO,MAAX,IAAI,EAClE,8BAA8B,EAC9B,CAAC,aAAa,EAAE,UAAU,CAAC,CAC5B,CAAC;QAEF,GAAG,CAAC,eAAe,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAC;QAEnC,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,uBAAuB,CAC3B,IAAa;QAEb,GAAG,CAAC,gCAAgC,EAAE,EAAE,GAAG,EAAE,uBAAA,IAAI,oBAAK,EAAE,IAAI,EAAE,CAAC,CAAC;QAEhE,OAAO,MAAM,uBAAA,IAAI,0CAAO,MAAX,IAAI,EACf,6BAA6B,EAC7B,CAAC,IAAI,CAAC,CACP,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,iBAAiB,CACrB,aAA4B,EAC5B,UAAkB;QAElB,GAAG,CAAC,wBAAwB,EAAE;YAC5B,GAAG,EAAE,uBAAA,IAAI,oBAAK;YACd,aAAa;YACb,UAAU;SACX,CAAC,CAAC;QAEH,MAAM,IAAI,GAAW,MAAM,uBAAA,IAAI,0CAAO,MAAX,IAAI,EAAQ,uBAAuB,EAAE;YAC9D,aAAa;YACb,UAAU;SACX,CAAC,CAAC;QAEH,GAAG,CAAC,qBAAqB,EAAE,IAAI,CAAC,CAAC;QAEjC,OAAO,IAAI,CAAC;IACd,CAAC;CA4BF;;AA1BC,gFAAgF;AAChF,gEAAgE;AAChE,KAAK,yBAAW,MAAc,EAAE,MAAiB;IAC/C,MAAM,OAAO,GAAG;QACd,MAAM,EAAE,MAAM;QACd,OAAO,EAAE;YACP,MAAM,EAAE,kBAAkB;YAC1B,cAAc,EAAE,kBAAkB;SACnC;QACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC;KAChE,CAAC;IAEF,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,uBAAA,IAAI,oBAAK,EAAE,OAAO,CAAC,CAAC;IACjD,MAAM,YAAY,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;IAE3C,IAAI,YAAY,CAAC,KAAK,EAAE;QACtB,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,OAAO,IAAI,YAAY,CAAC,KAAK,CAAC,CAAC;QAEzE,KAA2C,CAAC,IAAI;YAC/C,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC;QAE1B,MAAM,KAAK,CAAC;KACb;IAED,OAAO,YAAY,CAAC,MAAM,CAAC;AAC7B,CAAC","sourcesContent":["/* eslint-disable jsdoc/require-jsdoc */\n\nimport { createModuleLogger, projectLogger } from '../logger';\nimport type { UserOperation, UserOperationReceipt } from '../types';\n\nconst log = createModuleLogger(projectLogger, 'bundler');\n\n/**\n * Response from the `eth_estimateUserOperationGas` bundler method.\n * Includes the estimated gas limits required by a user operation.\n */\nexport type BundlerEstimateUserOperationGasResponse = {\n  /** Estimated gas required to compensate the bundler for any pre-verification. */\n  preVerificationGas: number | string;\n\n  /** Estimated gas required to verify the user operation. */\n  verificationGas?: number | string;\n\n  /** Estimated gas required to verify the user operation. */\n  verificationGasLimit?: number | string;\n\n  /** Estimated gas required for the execution of the user operation. */\n  callGasLimit: number | string;\n};\n\n/**\n * A helper class for interacting with a bundler.\n */\nexport class Bundler {\n  #url: string;\n\n  constructor(url: string) {\n    this.#url = url;\n  }\n\n  /**\n   * Estimate the gas required to execute a user operation.\n   *\n   * @param userOperation - The user operation to estimate gas for.\n   * @param entrypoint - The address of entrypoint to use for the user operation.\n   * @returns The estimated gas limits for the user operation.\n   */\n  async estimateUserOperationGas(\n    userOperation: UserOperation,\n    entrypoint: string,\n  ): Promise<BundlerEstimateUserOperationGasResponse> {\n    log('Estimating gas', { url: this.#url, userOperation, entrypoint });\n\n    const response: BundlerEstimateUserOperationGasResponse = await this.#query(\n      'eth_estimateUserOperationGas',\n      [userOperation, entrypoint],\n    );\n\n    log('Estimated gas', { response });\n\n    return response;\n  }\n\n  /**\n   * Retrieve the receipt for a user operation.\n   * @param hash - The hash of the user operation.\n   * @returns The receipt for the user operation, or `undefined` if the user operation is pending.\n   */\n  async getUserOperationReceipt(\n    hash?: string,\n  ): Promise<UserOperationReceipt | undefined> {\n    log('Getting user operation receipt', { url: this.#url, hash });\n\n    return await this.#query<UserOperationReceipt | undefined>(\n      'eth_getUserOperationReceipt',\n      [hash],\n    );\n  }\n\n  /**\n   * Submit a user operation to the bundler.\n   * @param userOperation - The signed user operation to submit.\n   * @param entrypoint - The address of entrypoint to use for the user operation.\n   * @returns The hash of the user operation.\n   */\n  async sendUserOperation(\n    userOperation: UserOperation,\n    entrypoint: string,\n  ): Promise<string> {\n    log('Sending user operation', {\n      url: this.#url,\n      userOperation,\n      entrypoint,\n    });\n\n    const hash: string = await this.#query('eth_sendUserOperation', [\n      userOperation,\n      entrypoint,\n    ]);\n\n    log('Sent user operation', hash);\n\n    return hash;\n  }\n\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  async #query<T>(method: string, params: unknown[]): Promise<T> {\n    const request = {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ jsonrpc: '2.0', id: 1, method, params }),\n    };\n\n    const response = await fetch(this.#url, request);\n    const responseJson = await response.json();\n\n    if (responseJson.error) {\n      const error = new Error(responseJson.error.message || responseJson.error);\n\n      (error as unknown as Record<string, string>).code =\n        responseJson.error.code;\n\n      throw error;\n    }\n\n    return responseJson.result;\n  }\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"Bundler.mjs","sourceRoot":"","sources":["../../src/helpers/Bundler.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable jsdoc/require-jsdoc */\n\nimport { createModuleLogger, projectLogger } from '../logger';\nimport type {\n  UserOperation,\n  UserOperationReceipt,\n  UserOperationV07,\n} from '../types';\nimport { Version4337 } from '../types';\nimport { toUserOperationV07 } from '../utils/compatability';\n\nconst log = createModuleLogger(projectLogger, 'bundler');\n\n/**\n * Response from the `eth_estimateUserOperationGas` bundler method.\n * Includes the estimated gas limits required by a user operation.\n */\nexport type BundlerEstimateUserOperationGasResponse = {\n  /** Estimated gas required to compensate the bundler for any pre-verification. */\n  preVerificationGas: number | string;\n\n  /** Estimated gas required to verify the user operation. */\n  verificationGas?: number | string;\n\n  /** Estimated gas required to verify the user operation. */\n  verificationGasLimit?: number | string;\n\n  /** Estimated gas required for the execution of the user operation. */\n  callGasLimit: number | string;\n};\n\n/**\n * A helper class for interacting with a bundler.\n */\nexport class Bundler {\n  #url: string;\n\n  #version: Version4337;\n\n  constructor({ url, version }: { url: string; version?: Version4337 }) {\n    this.#url = url;\n    this.#version = version ?? Version4337.V06;\n  }\n\n  /**\n   * Estimate the gas required to execute a user operation.\n   *\n   * @param userOperation - The user operation to estimate gas for.\n   * @param entrypoint - The address of entrypoint to use for the user operation.\n   * @returns The estimated gas limits for the user operation.\n   */\n  async estimateUserOperationGas(\n    userOperation: UserOperation,\n    entrypoint: string,\n  ): Promise<BundlerEstimateUserOperationGasResponse> {\n    const finalUserOperation = this.#getCompatibleUserOperation(userOperation);\n\n    log('Estimating gas', {\n      url: this.#url,\n      userOperation: finalUserOperation,\n      entrypoint,\n    });\n\n    const response: BundlerEstimateUserOperationGasResponse = await this.#query(\n      'eth_estimateUserOperationGas',\n      [finalUserOperation, entrypoint],\n    );\n\n    log('Estimated gas', { response });\n\n    return response;\n  }\n\n  /**\n   * Retrieve the receipt for a user operation.\n   * @param hash - The hash of the user operation.\n   * @returns The receipt for the user operation, or `undefined` if the user operation is pending.\n   */\n  async getUserOperationReceipt(\n    hash?: string,\n  ): Promise<UserOperationReceipt | undefined> {\n    log('Getting user operation receipt', { url: this.#url, hash });\n\n    return await this.#query<UserOperationReceipt | undefined>(\n      'eth_getUserOperationReceipt',\n      [hash],\n    );\n  }\n\n  /**\n   * Submit a user operation to the bundler.\n   * @param userOperation - The signed user operation to submit.\n   * @param entrypoint - The address of entrypoint to use for the user operation.\n   * @returns The hash of the user operation.\n   */\n  async sendUserOperation(\n    userOperation: UserOperation,\n    entrypoint: string,\n  ): Promise<string> {\n    const finalUserOperation = this.#getCompatibleUserOperation(userOperation);\n\n    log('Sending user operation', {\n      url: this.#url,\n      userOperation: finalUserOperation,\n      entrypoint,\n    });\n\n    const hash: string = await this.#query('eth_sendUserOperation', [\n      finalUserOperation,\n      entrypoint,\n    ]);\n\n    log('Sent user operation', hash);\n\n    return hash;\n  }\n\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  async #query<T>(method: string, params: unknown[]): Promise<T> {\n    const request = {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ jsonrpc: '2.0', id: 1, method, params }),\n    };\n\n    const response = await fetch(this.#url, request);\n    const responseJson = await response.json();\n\n    if (responseJson.error) {\n      const error = new Error(responseJson.error.message || responseJson.error);\n\n      (error as unknown as Record<string, string>).code =\n        responseJson.error.code;\n\n      throw error;\n    }\n\n    return responseJson.result;\n  }\n\n  #getCompatibleUserOperation(\n    userOperation: UserOperation,\n  ): UserOperation | UserOperationV07 {\n    return this.#version === Version4337.V07\n      ? toUserOperationV07(userOperation)\n      : userOperation;\n  }\n}\n"]}
\ No newline at end of file
diff --git a/dist/helpers/PendingUserOperationTracker.cjs b/dist/helpers/PendingUserOperationTracker.cjs
index 4a53603d69df7b3e3c91cd4ac5ea20476714f9e1..7799a5366c39bf399736448327664aaf4b6dfdf5 100644
--- a/dist/helpers/PendingUserOperationTracker.cjs
+++ b/dist/helpers/PendingUserOperationTracker.cjs
@@ -114,7 +114,7 @@ _PendingUserOperationTracker_getUserOperations = new WeakMap(), _PendingUserOper
 }, _PendingUserOperationTracker_updateUserOperation = function _PendingUserOperationTracker_updateUserOperation(metadata) {
     this.hub.emit('user-operation-updated', metadata);
 }, _PendingUserOperationTracker_getUserOperationReceipt = async function _PendingUserOperationTracker_getUserOperationReceipt(hash, bundlerUrl) {
-    const bundler = new Bundler_1.Bundler(bundlerUrl);
+    const bundler = new Bundler_1.Bundler({ url: bundlerUrl });
     return bundler.getUserOperationReceipt(hash);
 }, _PendingUserOperationTracker_normalizeGasValue = function _PendingUserOperationTracker_normalizeGasValue(gasValue) {
     if (typeof gasValue === 'number') {
diff --git a/dist/helpers/PendingUserOperationTracker.cjs.map b/dist/helpers/PendingUserOperationTracker.cjs.map
index ee2486730988c0aa704eae04c797e45adc773599..7efe07ef39761d3c3175736730d1a1e75405e0b0 100644
--- a/dist/helpers/PendingUserOperationTracker.cjs.map
+++ b/dist/helpers/PendingUserOperationTracker.cjs.map
@@ -1 +1 @@
-{"version":3,"file":"PendingUserOperationTracker.cjs","sourceRoot":"","sources":["../../src/helpers/PendingUserOperationTracker.ts"],"names":[],"mappings":"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","sourcesContent":["import { query, toHex } from '@metamask/controller-utils';\nimport EthQuery from '@metamask/eth-query';\nimport type { NetworkClient, Provider } from '@metamask/network-controller';\nimport { BlockTrackerPollingControllerOnly } from '@metamask/polling-controller';\nimport type { Json } from '@metamask/utils';\nimport { createModuleLogger, type Hex } from '@metamask/utils';\nimport EventEmitter from 'events';\n\nimport { projectLogger } from '../logger';\nimport type { UserOperationMetadata, UserOperationReceipt } from '../types';\nimport { UserOperationStatus } from '../types';\nimport type { UserOperationControllerMessenger } from '../UserOperationController';\nimport { Bundler } from './Bundler';\n\nconst log = createModuleLogger(projectLogger, 'pending-user-operations');\n\ntype Events = {\n  'user-operation-confirmed': [metadata: UserOperationMetadata];\n  'user-operation-failed': [txMeta: UserOperationMetadata, error: Error];\n  'user-operation-updated': [txMeta: UserOperationMetadata];\n};\n\nexport type PendingUserOperationTrackerEventEmitter = EventEmitter & {\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  on<T extends keyof Events>(\n    eventName: T,\n    listener: (...args: Events[T]) => void,\n  ): PendingUserOperationTrackerEventEmitter;\n\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  once<T extends keyof Events>(\n    eventName: T,\n    listener: (...args: Events[T]) => void,\n  ): PendingUserOperationTrackerEventEmitter;\n\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  emit<T extends keyof Events>(eventName: T, ...args: Events[T]): boolean;\n};\n\n/**\n * A helper class to periodically query the bundlers\n * and update the status of any submitted user operations.\n */\nexport class PendingUserOperationTracker extends BlockTrackerPollingControllerOnly {\n  hub: PendingUserOperationTrackerEventEmitter;\n\n  #getUserOperations: () => UserOperationMetadata[];\n\n  #messenger: UserOperationControllerMessenger;\n\n  constructor({\n    getUserOperations,\n    messenger,\n  }: {\n    getUserOperations: () => UserOperationMetadata[];\n    messenger: UserOperationControllerMessenger;\n  }) {\n    super();\n\n    this.hub = new EventEmitter() as PendingUserOperationTrackerEventEmitter;\n\n    this.#getUserOperations = getUserOperations;\n    this.#messenger = messenger;\n  }\n\n  async _executePoll(networkClientId: string, _options: Json) {\n    try {\n      const { blockTracker, configuration, provider } =\n        this._getNetworkClientById(networkClientId) as NetworkClient;\n\n      log('Polling', {\n        blockNumber: blockTracker.getCurrentBlock(),\n        chainId: configuration.chainId,\n      });\n\n      await this.#checkUserOperations(configuration.chainId, provider);\n    } catch (error) {\n      /* istanbul ignore next */\n      log('Failed to check user operations', error);\n    }\n  }\n\n  _getNetworkClientById(networkClientId: string): NetworkClient | undefined {\n    return this.#messenger.call(\n      'NetworkController:getNetworkClientById',\n      networkClientId,\n    );\n  }\n\n  async #checkUserOperations(chainId: string, provider: Provider) {\n    const pendingUserOperations = this.#getPendingUserOperations().filter(\n      (metadata) => metadata.chainId === chainId,\n    );\n\n    if (!pendingUserOperations.length) {\n      log('No pending user operations to check');\n      return;\n    }\n\n    log('Found pending user operations to check', {\n      count: pendingUserOperations.length,\n      ids: pendingUserOperations.map((userOperation) => userOperation.id),\n    });\n\n    await Promise.all(\n      pendingUserOperations.map((userOperation) =>\n        this.#checkUserOperation(userOperation, provider),\n      ),\n    );\n  }\n\n  async #checkUserOperation(\n    metadata: UserOperationMetadata,\n    provider: Provider,\n  ) {\n    const { bundlerUrl, hash, id } = metadata;\n\n    if (!hash || !bundlerUrl) {\n      log('Skipping user operation as missing hash or bundler', id);\n      return;\n    }\n\n    try {\n      const receipt = await this.#getUserOperationReceipt(hash, bundlerUrl);\n      const isSuccess = receipt?.success;\n\n      if (receipt && !isSuccess) {\n        this.#onUserOperationFailed(metadata, receipt);\n        return;\n      }\n\n      if (isSuccess) {\n        await this.#onUserOperationConfirmed(metadata, receipt, provider);\n        return;\n      }\n\n      log('No receipt found for user operation', { id, hash });\n    } catch (error) {\n      log('Failed to check user operation', id, error);\n    }\n  }\n\n  async #onUserOperationConfirmed(\n    metadata: UserOperationMetadata,\n    receipt: UserOperationReceipt,\n    provider: Provider,\n  ) {\n    const { id } = metadata;\n\n    const {\n      actualGasCost,\n      actualGasUsed,\n      receipt: { blockHash, transactionHash },\n    } = receipt;\n\n    log('User operation confirmed', id, transactionHash);\n\n    const { baseFeePerGas } = await query(\n      new EthQuery(provider),\n      'getBlockByHash',\n      [blockHash, false],\n    );\n\n    metadata.actualGasCost = this.#normalizeGasValue(actualGasCost);\n    metadata.actualGasUsed = this.#normalizeGasValue(actualGasUsed);\n    metadata.baseFeePerGas = baseFeePerGas;\n    metadata.status = UserOperationStatus.Confirmed;\n    metadata.transactionHash = transactionHash;\n\n    this.#updateUserOperation(metadata);\n\n    this.hub.emit('user-operation-confirmed', metadata);\n  }\n\n  #onUserOperationFailed(\n    metadata: UserOperationMetadata,\n    _receipt: UserOperationReceipt,\n  ) {\n    const { id } = metadata;\n\n    log('User operation failed', id);\n\n    metadata.status = UserOperationStatus.Failed;\n\n    this.#updateUserOperation(metadata);\n\n    this.hub.emit(\n      'user-operation-failed',\n      metadata,\n      new Error('User operation receipt has failed status'),\n    );\n  }\n\n  #getPendingUserOperations(): UserOperationMetadata[] {\n    return this.#getUserOperations().filter(\n      (userOperation) => userOperation.status === UserOperationStatus.Submitted,\n    );\n  }\n\n  #updateUserOperation(metadata: UserOperationMetadata) {\n    this.hub.emit('user-operation-updated', metadata);\n  }\n\n  async #getUserOperationReceipt(\n    hash: string,\n    bundlerUrl: string,\n  ): Promise<UserOperationReceipt | undefined> {\n    const bundler = new Bundler(bundlerUrl);\n    return bundler.getUserOperationReceipt(hash);\n  }\n\n  #normalizeGasValue(gasValue: Hex | number): string {\n    if (typeof gasValue === 'number') {\n      return toHex(gasValue);\n    }\n    return gasValue;\n  }\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"PendingUserOperationTracker.cjs","sourceRoot":"","sources":["../../src/helpers/PendingUserOperationTracker.ts"],"names":[],"mappings":"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","sourcesContent":["import { query, toHex } from '@metamask/controller-utils';\nimport EthQuery from '@metamask/eth-query';\nimport type { NetworkClient, Provider } from '@metamask/network-controller';\nimport { BlockTrackerPollingControllerOnly } from '@metamask/polling-controller';\nimport type { Json } from '@metamask/utils';\nimport { createModuleLogger, type Hex } from '@metamask/utils';\nimport EventEmitter from 'events';\n\nimport { projectLogger } from '../logger';\nimport type { UserOperationMetadata, UserOperationReceipt } from '../types';\nimport { UserOperationStatus } from '../types';\nimport type { UserOperationControllerMessenger } from '../UserOperationController';\nimport { Bundler } from './Bundler';\n\nconst log = createModuleLogger(projectLogger, 'pending-user-operations');\n\ntype Events = {\n  'user-operation-confirmed': [metadata: UserOperationMetadata];\n  'user-operation-failed': [txMeta: UserOperationMetadata, error: Error];\n  'user-operation-updated': [txMeta: UserOperationMetadata];\n};\n\nexport type PendingUserOperationTrackerEventEmitter = EventEmitter & {\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  on<T extends keyof Events>(\n    eventName: T,\n    listener: (...args: Events[T]) => void,\n  ): PendingUserOperationTrackerEventEmitter;\n\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  once<T extends keyof Events>(\n    eventName: T,\n    listener: (...args: Events[T]) => void,\n  ): PendingUserOperationTrackerEventEmitter;\n\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  emit<T extends keyof Events>(eventName: T, ...args: Events[T]): boolean;\n};\n\n/**\n * A helper class to periodically query the bundlers\n * and update the status of any submitted user operations.\n */\nexport class PendingUserOperationTracker extends BlockTrackerPollingControllerOnly {\n  hub: PendingUserOperationTrackerEventEmitter;\n\n  #getUserOperations: () => UserOperationMetadata[];\n\n  #messenger: UserOperationControllerMessenger;\n\n  constructor({\n    getUserOperations,\n    messenger,\n  }: {\n    getUserOperations: () => UserOperationMetadata[];\n    messenger: UserOperationControllerMessenger;\n  }) {\n    super();\n\n    this.hub = new EventEmitter() as PendingUserOperationTrackerEventEmitter;\n\n    this.#getUserOperations = getUserOperations;\n    this.#messenger = messenger;\n  }\n\n  async _executePoll(networkClientId: string, _options: Json) {\n    try {\n      const { blockTracker, configuration, provider } =\n        this._getNetworkClientById(networkClientId) as NetworkClient;\n\n      log('Polling', {\n        blockNumber: blockTracker.getCurrentBlock(),\n        chainId: configuration.chainId,\n      });\n\n      await this.#checkUserOperations(configuration.chainId, provider);\n    } catch (error) {\n      /* istanbul ignore next */\n      log('Failed to check user operations', error);\n    }\n  }\n\n  _getNetworkClientById(networkClientId: string): NetworkClient | undefined {\n    return this.#messenger.call(\n      'NetworkController:getNetworkClientById',\n      networkClientId,\n    );\n  }\n\n  async #checkUserOperations(chainId: string, provider: Provider) {\n    const pendingUserOperations = this.#getPendingUserOperations().filter(\n      (metadata) => metadata.chainId === chainId,\n    );\n\n    if (!pendingUserOperations.length) {\n      log('No pending user operations to check');\n      return;\n    }\n\n    log('Found pending user operations to check', {\n      count: pendingUserOperations.length,\n      ids: pendingUserOperations.map((userOperation) => userOperation.id),\n    });\n\n    await Promise.all(\n      pendingUserOperations.map((userOperation) =>\n        this.#checkUserOperation(userOperation, provider),\n      ),\n    );\n  }\n\n  async #checkUserOperation(\n    metadata: UserOperationMetadata,\n    provider: Provider,\n  ) {\n    const { bundlerUrl, hash, id } = metadata;\n\n    if (!hash || !bundlerUrl) {\n      log('Skipping user operation as missing hash or bundler', id);\n      return;\n    }\n\n    try {\n      const receipt = await this.#getUserOperationReceipt(hash, bundlerUrl);\n      const isSuccess = receipt?.success;\n\n      if (receipt && !isSuccess) {\n        this.#onUserOperationFailed(metadata, receipt);\n        return;\n      }\n\n      if (isSuccess) {\n        await this.#onUserOperationConfirmed(metadata, receipt, provider);\n        return;\n      }\n\n      log('No receipt found for user operation', { id, hash });\n    } catch (error) {\n      log('Failed to check user operation', id, error);\n    }\n  }\n\n  async #onUserOperationConfirmed(\n    metadata: UserOperationMetadata,\n    receipt: UserOperationReceipt,\n    provider: Provider,\n  ) {\n    const { id } = metadata;\n\n    const {\n      actualGasCost,\n      actualGasUsed,\n      receipt: { blockHash, transactionHash },\n    } = receipt;\n\n    log('User operation confirmed', id, transactionHash);\n\n    const { baseFeePerGas } = await query(\n      new EthQuery(provider),\n      'getBlockByHash',\n      [blockHash, false],\n    );\n\n    metadata.actualGasCost = this.#normalizeGasValue(actualGasCost);\n    metadata.actualGasUsed = this.#normalizeGasValue(actualGasUsed);\n    metadata.baseFeePerGas = baseFeePerGas;\n    metadata.status = UserOperationStatus.Confirmed;\n    metadata.transactionHash = transactionHash;\n\n    this.#updateUserOperation(metadata);\n\n    this.hub.emit('user-operation-confirmed', metadata);\n  }\n\n  #onUserOperationFailed(\n    metadata: UserOperationMetadata,\n    _receipt: UserOperationReceipt,\n  ) {\n    const { id } = metadata;\n\n    log('User operation failed', id);\n\n    metadata.status = UserOperationStatus.Failed;\n\n    this.#updateUserOperation(metadata);\n\n    this.hub.emit(\n      'user-operation-failed',\n      metadata,\n      new Error('User operation receipt has failed status'),\n    );\n  }\n\n  #getPendingUserOperations(): UserOperationMetadata[] {\n    return this.#getUserOperations().filter(\n      (userOperation) => userOperation.status === UserOperationStatus.Submitted,\n    );\n  }\n\n  #updateUserOperation(metadata: UserOperationMetadata) {\n    this.hub.emit('user-operation-updated', metadata);\n  }\n\n  async #getUserOperationReceipt(\n    hash: string,\n    bundlerUrl: string,\n  ): Promise<UserOperationReceipt | undefined> {\n    const bundler = new Bundler({ url: bundlerUrl });\n    return bundler.getUserOperationReceipt(hash);\n  }\n\n  #normalizeGasValue(gasValue: Hex | number): string {\n    if (typeof gasValue === 'number') {\n      return toHex(gasValue);\n    }\n    return gasValue;\n  }\n}\n"]}
\ No newline at end of file
diff --git a/dist/helpers/PendingUserOperationTracker.mjs b/dist/helpers/PendingUserOperationTracker.mjs
index 8d85a7e2346f33d10dc2a07439b9c53614fa5b96..955838c0492636324455069d5ea0ae192cbce6f7 100644
--- a/dist/helpers/PendingUserOperationTracker.mjs
+++ b/dist/helpers/PendingUserOperationTracker.mjs
@@ -114,7 +114,7 @@ _PendingUserOperationTracker_getUserOperations = new WeakMap(), _PendingUserOper
 }, _PendingUserOperationTracker_updateUserOperation = function _PendingUserOperationTracker_updateUserOperation(metadata) {
     this.hub.emit('user-operation-updated', metadata);
 }, _PendingUserOperationTracker_getUserOperationReceipt = async function _PendingUserOperationTracker_getUserOperationReceipt(hash, bundlerUrl) {
-    const bundler = new Bundler(bundlerUrl);
+    const bundler = new Bundler({ url: bundlerUrl });
     return bundler.getUserOperationReceipt(hash);
 }, _PendingUserOperationTracker_normalizeGasValue = function _PendingUserOperationTracker_normalizeGasValue(gasValue) {
     if (typeof gasValue === 'number') {
diff --git a/dist/helpers/PendingUserOperationTracker.mjs.map b/dist/helpers/PendingUserOperationTracker.mjs.map
index 041d4fddaeb17bebdfc868df59b015a5b7b132ed..7aa9a1c459c7b34f592e4b53e71e5ae43e482879 100644
--- a/dist/helpers/PendingUserOperationTracker.mjs.map
+++ b/dist/helpers/PendingUserOperationTracker.mjs.map
@@ -1 +1 @@
-{"version":3,"file":"PendingUserOperationTracker.mjs","sourceRoot":"","sources":["../../src/helpers/PendingUserOperationTracker.ts"],"names":[],"mappings":"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","sourcesContent":["import { query, toHex } from '@metamask/controller-utils';\nimport EthQuery from '@metamask/eth-query';\nimport type { NetworkClient, Provider } from '@metamask/network-controller';\nimport { BlockTrackerPollingControllerOnly } from '@metamask/polling-controller';\nimport type { Json } from '@metamask/utils';\nimport { createModuleLogger, type Hex } from '@metamask/utils';\nimport EventEmitter from 'events';\n\nimport { projectLogger } from '../logger';\nimport type { UserOperationMetadata, UserOperationReceipt } from '../types';\nimport { UserOperationStatus } from '../types';\nimport type { UserOperationControllerMessenger } from '../UserOperationController';\nimport { Bundler } from './Bundler';\n\nconst log = createModuleLogger(projectLogger, 'pending-user-operations');\n\ntype Events = {\n  'user-operation-confirmed': [metadata: UserOperationMetadata];\n  'user-operation-failed': [txMeta: UserOperationMetadata, error: Error];\n  'user-operation-updated': [txMeta: UserOperationMetadata];\n};\n\nexport type PendingUserOperationTrackerEventEmitter = EventEmitter & {\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  on<T extends keyof Events>(\n    eventName: T,\n    listener: (...args: Events[T]) => void,\n  ): PendingUserOperationTrackerEventEmitter;\n\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  once<T extends keyof Events>(\n    eventName: T,\n    listener: (...args: Events[T]) => void,\n  ): PendingUserOperationTrackerEventEmitter;\n\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  emit<T extends keyof Events>(eventName: T, ...args: Events[T]): boolean;\n};\n\n/**\n * A helper class to periodically query the bundlers\n * and update the status of any submitted user operations.\n */\nexport class PendingUserOperationTracker extends BlockTrackerPollingControllerOnly {\n  hub: PendingUserOperationTrackerEventEmitter;\n\n  #getUserOperations: () => UserOperationMetadata[];\n\n  #messenger: UserOperationControllerMessenger;\n\n  constructor({\n    getUserOperations,\n    messenger,\n  }: {\n    getUserOperations: () => UserOperationMetadata[];\n    messenger: UserOperationControllerMessenger;\n  }) {\n    super();\n\n    this.hub = new EventEmitter() as PendingUserOperationTrackerEventEmitter;\n\n    this.#getUserOperations = getUserOperations;\n    this.#messenger = messenger;\n  }\n\n  async _executePoll(networkClientId: string, _options: Json) {\n    try {\n      const { blockTracker, configuration, provider } =\n        this._getNetworkClientById(networkClientId) as NetworkClient;\n\n      log('Polling', {\n        blockNumber: blockTracker.getCurrentBlock(),\n        chainId: configuration.chainId,\n      });\n\n      await this.#checkUserOperations(configuration.chainId, provider);\n    } catch (error) {\n      /* istanbul ignore next */\n      log('Failed to check user operations', error);\n    }\n  }\n\n  _getNetworkClientById(networkClientId: string): NetworkClient | undefined {\n    return this.#messenger.call(\n      'NetworkController:getNetworkClientById',\n      networkClientId,\n    );\n  }\n\n  async #checkUserOperations(chainId: string, provider: Provider) {\n    const pendingUserOperations = this.#getPendingUserOperations().filter(\n      (metadata) => metadata.chainId === chainId,\n    );\n\n    if (!pendingUserOperations.length) {\n      log('No pending user operations to check');\n      return;\n    }\n\n    log('Found pending user operations to check', {\n      count: pendingUserOperations.length,\n      ids: pendingUserOperations.map((userOperation) => userOperation.id),\n    });\n\n    await Promise.all(\n      pendingUserOperations.map((userOperation) =>\n        this.#checkUserOperation(userOperation, provider),\n      ),\n    );\n  }\n\n  async #checkUserOperation(\n    metadata: UserOperationMetadata,\n    provider: Provider,\n  ) {\n    const { bundlerUrl, hash, id } = metadata;\n\n    if (!hash || !bundlerUrl) {\n      log('Skipping user operation as missing hash or bundler', id);\n      return;\n    }\n\n    try {\n      const receipt = await this.#getUserOperationReceipt(hash, bundlerUrl);\n      const isSuccess = receipt?.success;\n\n      if (receipt && !isSuccess) {\n        this.#onUserOperationFailed(metadata, receipt);\n        return;\n      }\n\n      if (isSuccess) {\n        await this.#onUserOperationConfirmed(metadata, receipt, provider);\n        return;\n      }\n\n      log('No receipt found for user operation', { id, hash });\n    } catch (error) {\n      log('Failed to check user operation', id, error);\n    }\n  }\n\n  async #onUserOperationConfirmed(\n    metadata: UserOperationMetadata,\n    receipt: UserOperationReceipt,\n    provider: Provider,\n  ) {\n    const { id } = metadata;\n\n    const {\n      actualGasCost,\n      actualGasUsed,\n      receipt: { blockHash, transactionHash },\n    } = receipt;\n\n    log('User operation confirmed', id, transactionHash);\n\n    const { baseFeePerGas } = await query(\n      new EthQuery(provider),\n      'getBlockByHash',\n      [blockHash, false],\n    );\n\n    metadata.actualGasCost = this.#normalizeGasValue(actualGasCost);\n    metadata.actualGasUsed = this.#normalizeGasValue(actualGasUsed);\n    metadata.baseFeePerGas = baseFeePerGas;\n    metadata.status = UserOperationStatus.Confirmed;\n    metadata.transactionHash = transactionHash;\n\n    this.#updateUserOperation(metadata);\n\n    this.hub.emit('user-operation-confirmed', metadata);\n  }\n\n  #onUserOperationFailed(\n    metadata: UserOperationMetadata,\n    _receipt: UserOperationReceipt,\n  ) {\n    const { id } = metadata;\n\n    log('User operation failed', id);\n\n    metadata.status = UserOperationStatus.Failed;\n\n    this.#updateUserOperation(metadata);\n\n    this.hub.emit(\n      'user-operation-failed',\n      metadata,\n      new Error('User operation receipt has failed status'),\n    );\n  }\n\n  #getPendingUserOperations(): UserOperationMetadata[] {\n    return this.#getUserOperations().filter(\n      (userOperation) => userOperation.status === UserOperationStatus.Submitted,\n    );\n  }\n\n  #updateUserOperation(metadata: UserOperationMetadata) {\n    this.hub.emit('user-operation-updated', metadata);\n  }\n\n  async #getUserOperationReceipt(\n    hash: string,\n    bundlerUrl: string,\n  ): Promise<UserOperationReceipt | undefined> {\n    const bundler = new Bundler(bundlerUrl);\n    return bundler.getUserOperationReceipt(hash);\n  }\n\n  #normalizeGasValue(gasValue: Hex | number): string {\n    if (typeof gasValue === 'number') {\n      return toHex(gasValue);\n    }\n    return gasValue;\n  }\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"PendingUserOperationTracker.mjs","sourceRoot":"","sources":["../../src/helpers/PendingUserOperationTracker.ts"],"names":[],"mappings":"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","sourcesContent":["import { query, toHex } from '@metamask/controller-utils';\nimport EthQuery from '@metamask/eth-query';\nimport type { NetworkClient, Provider } from '@metamask/network-controller';\nimport { BlockTrackerPollingControllerOnly } from '@metamask/polling-controller';\nimport type { Json } from '@metamask/utils';\nimport { createModuleLogger, type Hex } from '@metamask/utils';\nimport EventEmitter from 'events';\n\nimport { projectLogger } from '../logger';\nimport type { UserOperationMetadata, UserOperationReceipt } from '../types';\nimport { UserOperationStatus } from '../types';\nimport type { UserOperationControllerMessenger } from '../UserOperationController';\nimport { Bundler } from './Bundler';\n\nconst log = createModuleLogger(projectLogger, 'pending-user-operations');\n\ntype Events = {\n  'user-operation-confirmed': [metadata: UserOperationMetadata];\n  'user-operation-failed': [txMeta: UserOperationMetadata, error: Error];\n  'user-operation-updated': [txMeta: UserOperationMetadata];\n};\n\nexport type PendingUserOperationTrackerEventEmitter = EventEmitter & {\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  on<T extends keyof Events>(\n    eventName: T,\n    listener: (...args: Events[T]) => void,\n  ): PendingUserOperationTrackerEventEmitter;\n\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  once<T extends keyof Events>(\n    eventName: T,\n    listener: (...args: Events[T]) => void,\n  ): PendingUserOperationTrackerEventEmitter;\n\n  // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  emit<T extends keyof Events>(eventName: T, ...args: Events[T]): boolean;\n};\n\n/**\n * A helper class to periodically query the bundlers\n * and update the status of any submitted user operations.\n */\nexport class PendingUserOperationTracker extends BlockTrackerPollingControllerOnly {\n  hub: PendingUserOperationTrackerEventEmitter;\n\n  #getUserOperations: () => UserOperationMetadata[];\n\n  #messenger: UserOperationControllerMessenger;\n\n  constructor({\n    getUserOperations,\n    messenger,\n  }: {\n    getUserOperations: () => UserOperationMetadata[];\n    messenger: UserOperationControllerMessenger;\n  }) {\n    super();\n\n    this.hub = new EventEmitter() as PendingUserOperationTrackerEventEmitter;\n\n    this.#getUserOperations = getUserOperations;\n    this.#messenger = messenger;\n  }\n\n  async _executePoll(networkClientId: string, _options: Json) {\n    try {\n      const { blockTracker, configuration, provider } =\n        this._getNetworkClientById(networkClientId) as NetworkClient;\n\n      log('Polling', {\n        blockNumber: blockTracker.getCurrentBlock(),\n        chainId: configuration.chainId,\n      });\n\n      await this.#checkUserOperations(configuration.chainId, provider);\n    } catch (error) {\n      /* istanbul ignore next */\n      log('Failed to check user operations', error);\n    }\n  }\n\n  _getNetworkClientById(networkClientId: string): NetworkClient | undefined {\n    return this.#messenger.call(\n      'NetworkController:getNetworkClientById',\n      networkClientId,\n    );\n  }\n\n  async #checkUserOperations(chainId: string, provider: Provider) {\n    const pendingUserOperations = this.#getPendingUserOperations().filter(\n      (metadata) => metadata.chainId === chainId,\n    );\n\n    if (!pendingUserOperations.length) {\n      log('No pending user operations to check');\n      return;\n    }\n\n    log('Found pending user operations to check', {\n      count: pendingUserOperations.length,\n      ids: pendingUserOperations.map((userOperation) => userOperation.id),\n    });\n\n    await Promise.all(\n      pendingUserOperations.map((userOperation) =>\n        this.#checkUserOperation(userOperation, provider),\n      ),\n    );\n  }\n\n  async #checkUserOperation(\n    metadata: UserOperationMetadata,\n    provider: Provider,\n  ) {\n    const { bundlerUrl, hash, id } = metadata;\n\n    if (!hash || !bundlerUrl) {\n      log('Skipping user operation as missing hash or bundler', id);\n      return;\n    }\n\n    try {\n      const receipt = await this.#getUserOperationReceipt(hash, bundlerUrl);\n      const isSuccess = receipt?.success;\n\n      if (receipt && !isSuccess) {\n        this.#onUserOperationFailed(metadata, receipt);\n        return;\n      }\n\n      if (isSuccess) {\n        await this.#onUserOperationConfirmed(metadata, receipt, provider);\n        return;\n      }\n\n      log('No receipt found for user operation', { id, hash });\n    } catch (error) {\n      log('Failed to check user operation', id, error);\n    }\n  }\n\n  async #onUserOperationConfirmed(\n    metadata: UserOperationMetadata,\n    receipt: UserOperationReceipt,\n    provider: Provider,\n  ) {\n    const { id } = metadata;\n\n    const {\n      actualGasCost,\n      actualGasUsed,\n      receipt: { blockHash, transactionHash },\n    } = receipt;\n\n    log('User operation confirmed', id, transactionHash);\n\n    const { baseFeePerGas } = await query(\n      new EthQuery(provider),\n      'getBlockByHash',\n      [blockHash, false],\n    );\n\n    metadata.actualGasCost = this.#normalizeGasValue(actualGasCost);\n    metadata.actualGasUsed = this.#normalizeGasValue(actualGasUsed);\n    metadata.baseFeePerGas = baseFeePerGas;\n    metadata.status = UserOperationStatus.Confirmed;\n    metadata.transactionHash = transactionHash;\n\n    this.#updateUserOperation(metadata);\n\n    this.hub.emit('user-operation-confirmed', metadata);\n  }\n\n  #onUserOperationFailed(\n    metadata: UserOperationMetadata,\n    _receipt: UserOperationReceipt,\n  ) {\n    const { id } = metadata;\n\n    log('User operation failed', id);\n\n    metadata.status = UserOperationStatus.Failed;\n\n    this.#updateUserOperation(metadata);\n\n    this.hub.emit(\n      'user-operation-failed',\n      metadata,\n      new Error('User operation receipt has failed status'),\n    );\n  }\n\n  #getPendingUserOperations(): UserOperationMetadata[] {\n    return this.#getUserOperations().filter(\n      (userOperation) => userOperation.status === UserOperationStatus.Submitted,\n    );\n  }\n\n  #updateUserOperation(metadata: UserOperationMetadata) {\n    this.hub.emit('user-operation-updated', metadata);\n  }\n\n  async #getUserOperationReceipt(\n    hash: string,\n    bundlerUrl: string,\n  ): Promise<UserOperationReceipt | undefined> {\n    const bundler = new Bundler({ url: bundlerUrl });\n    return bundler.getUserOperationReceipt(hash);\n  }\n\n  #normalizeGasValue(gasValue: Hex | number): string {\n    if (typeof gasValue === 'number') {\n      return toHex(gasValue);\n    }\n    return gasValue;\n  }\n}\n"]}
\ No newline at end of file
diff --git a/dist/types.cjs b/dist/types.cjs
index 9f6673dd92adb2f5ce9b367832ea249a1a647838..8823b01427a6984b3d5775c795f479918380bc94 100644
--- a/dist/types.cjs
+++ b/dist/types.cjs
@@ -1,6 +1,6 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.UserOperationStatus = void 0;
+exports.Version4337 = exports.UserOperationStatus = void 0;
 /**
  * The possible statuses of a single user operation.
  */
@@ -13,4 +13,9 @@ var UserOperationStatus;
     UserOperationStatus["Failed"] = "failed";
     UserOperationStatus["Confirmed"] = "confirmed";
 })(UserOperationStatus || (exports.UserOperationStatus = UserOperationStatus = {}));
+var Version4337;
+(function (Version4337) {
+    Version4337["V06"] = "V0.6";
+    Version4337["V07"] = "V0.7";
+})(Version4337 || (exports.Version4337 = Version4337 = {}));
 //# sourceMappingURL=types.cjs.map
\ No newline at end of file
diff --git a/dist/types.cjs.map b/dist/types.cjs.map
index 6d3966b8ed02ee20dda8e3dec6439cdd8d272155..62005b5ea10b4e90c573049d2c7cbe07e86d6a8c 100644
--- a/dist/types.cjs.map
+++ b/dist/types.cjs.map
@@ -1 +1 @@
-{"version":3,"file":"types.cjs","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":";;;AA0DA;;GAEG;AACH,IAAY,mBAOX;AAPD,WAAY,mBAAmB;IAC7B,gDAAyB,CAAA;IACzB,4CAAqB,CAAA;IACrB,wCAAiB,CAAA;IACjB,8CAAuB,CAAA;IACvB,wCAAiB,CAAA;IACjB,8CAAuB,CAAA;AACzB,CAAC,EAPW,mBAAmB,mCAAnB,mBAAmB,QAO9B","sourcesContent":["import type {\n  TransactionParams,\n  TransactionType,\n  UserFeeLevel,\n} from '@metamask/transaction-controller';\nimport type { Hex } from '@metamask/utils';\n\n/**\n * A complete user operation to be submitted to a bundler.\n * Defined in EIP-4337.\n */\nexport type UserOperation = {\n  /** The data to pass to the sender during the main execution call. */\n  callData: string;\n\n  /** The amount of gas to allocate the main execution call. */\n  callGasLimit: string;\n\n  /**\n   * The initCode of the account.\n   * Needed if and only if the account is not yet on-chain and needs to be created.\n   */\n  initCode: string;\n\n  /**\n   * Maximum fee per gas.\n   * Similar to EIP-1559 max_fee_per_gas.\n   */\n  maxFeePerGas: string;\n\n  /**\n   * Maximum priority fee per gas.\n   * Similar to EIP-1559 max_priority_fee_per_gas.\n   */\n  maxPriorityFeePerGas: string;\n\n  /** Anti-replay parameter. */\n  nonce: string;\n\n  /**\n   * Address of paymaster sponsoring the transaction, followed by extra data to send to the paymaster.\n   * Empty for self-sponsored transactions.\n   */\n  paymasterAndData: string;\n\n  /** The amount of gas to pay to compensate the bundler for pre-verification execution, calldata and any gas overhead that cannot be tracked on-chain. */\n  preVerificationGas: string;\n\n  /** The account making the operation. */\n  sender: string;\n\n  /** Data passed into the account along with the nonce during the verification step. */\n  signature: string;\n\n  /** The amount of gas to allocate for the verification step. */\n  verificationGasLimit: string;\n};\n\n/**\n * The possible statuses of a single user operation.\n */\nexport enum UserOperationStatus {\n  Unapproved = 'unapproved',\n  Approved = 'approved',\n  Signed = 'signed',\n  Submitted = 'submitted',\n  Failed = 'failed',\n  Confirmed = 'confirmed',\n}\n\n/** Information concerning an error while creating a user operation. */\nexport type UserOperationError = {\n  /**\n   * A descriptive error name.\n   */\n  name: string;\n\n  /**\n   * A descriptive error message providing details about the encountered error.\n   */\n  message: string;\n\n  /**\n   * The stack trace associated with the error, if available.\n   */\n  stack: string | null;\n\n  /**\n   * An optional error code associated with the error.\n   */\n  code: string | null;\n\n  /**\n   * Additional information related to the error.\n   */\n  rpc: string | null;\n};\n\n/**\n * Metadata concerning a single user operation, stored in the client state.\n */\nexport type UserOperationMetadata = {\n  /** Confirmed total cost of the gas for the user operation. */\n  actualGasCost: string | null;\n\n  /** Confirmed total amount of gas used by the user operation. */\n  actualGasUsed: string | null;\n\n  /** Base fee of the transaction block as a hex value. */\n  baseFeePerGas: string | null;\n\n  /** URL of the bundler that the operation was submitted to. */\n  bundlerUrl: string | null;\n\n  /** Hexadecimal chain ID of the target network. */\n  chainId: string;\n\n  /** An error that occurred while creating the operation. */\n  error: UserOperationError | null;\n\n  /** Hash of the user operation, generated by the bundler. */\n  hash: string | null;\n\n  /** A unique ID used to identify a user operation in the client. */\n  id: string;\n\n  /** The origin of the user operation, such as the hostname of a dApp. */\n  origin: string;\n\n  /** Current status of the user operation. */\n  status: UserOperationStatus;\n\n  /** Metadata specific to swap transactions. */\n  swapsMetadata: SwapsMetadata | null;\n\n  /** Timestamp of when the user operation was created. */\n  time: number;\n\n  /** Hash of the transaction that submitted the user operation to the entrypoint. */\n  transactionHash: string | null;\n\n  /** The initial transaction parameters that the user operation was created from. */\n  transactionParams: Required<TransactionParams> | null;\n\n  /** The type of transaction that the user operation will create. */\n  transactionType: TransactionType | null;\n\n  /** The origin of the gas fee values. */\n  userFeeLevel: UserFeeLevel | null;\n\n  /** Resulting user operation object to be submitted to the bundler. */\n  userOperation: UserOperation;\n};\n\n/**\n * The data provided to the smart contract account when preparing a user operation.\n */\nexport type PrepareUserOperationRequest = {\n  /** The hexadecimal chain ID of the target network. */\n  chainId: string;\n\n  /** The data to include in the resulting transaction.  */\n  data?: string;\n\n  /** Address of the account requesting the user operation. */\n  from: string;\n\n  /** The destination address of the resulting transaction. */\n  to?: string;\n\n  /** The value to send in the resulting transaction. */\n  value?: string;\n};\n\n/**\n * The data provided to the smart contract account when updating a user operation.\n */\nexport type UpdateUserOperationRequest = {\n  /** The user operation to update including the dummy signature and dummy paymasterAndData values. */\n  userOperation: UserOperation;\n\n  /** The hexadecimal chain ID of the target network. */\n  chainId: string;\n};\n\n/**\n * The data provided to the smart contract account when signing a user operation.\n */\nexport type SignUserOperationRequest = {\n  /** The user operation to sign including the dummy signature and final paymasterAndData values. */\n  userOperation: UserOperation;\n\n  /** The hexadecimal chain ID of the target network. */\n  chainId: string;\n};\n\n/**\n * The data returned by the smart contract account when preparing a user operation.\n */\nexport type PrepareUserOperationResponse = {\n  /** The URL of the bundler to submit the user operation to. */\n  bundler: string;\n\n  /** The data to pass to the sender during the main execution call. */\n  callData: string;\n\n  /**\n   * A dummy paymasterAndData value required to estimate gas using the bundler.\n   * Only required if the smart contract account is not providing gas values.\n   */\n  dummyPaymasterAndData?: string;\n\n  /**\n   * A dummy signature value required to estimate gas using the bundler.\n   * Only required if the smart contract account is not providing gas values.\n   */\n  dummySignature?: string;\n\n  /**\n   * The estimated gas limits for the user operation.\n   * Gas is automatically estimated using the bundler if not provided.\n   */\n  gas?: {\n    /** The amount of gas to allocate to the main execution call. */\n    callGasLimit: string;\n\n    /** The amount of gas to pay to compensate the bundler for pre-verification execution, calldata and any gas overhead that cannot be tracked on-chain. */\n    preVerificationGas: string;\n\n    /** The amount of gas to allocate for the verification step. */\n    verificationGasLimit: string;\n  };\n\n  /**\n   * The initCode to include in the user operation.\n   * Required only if the smart contract is not yet deployed.\n   */\n  initCode?: string;\n\n  /**\n   * The nonce to include in the user operation, specific to the smart contract account.\n   */\n  nonce: string;\n\n  /**\n   * The address of the smart contract account creating the user operation.\n   */\n  sender: string;\n};\n\n/**\n * The data returned by the smart contract account when updating a user operation.\n */\nexport type UpdateUserOperationResponse = {\n  /**\n   * The final paymasterAndData to include in the user operation.\n   * Not required if a paymaster is not sponsoring the transaction.\n   */\n  paymasterAndData?: string;\n\n  /**\n   * The final gas limits for the user operation suggested by the smart contract account.\n   * The simulated gas limits may be different after the bundler estimates gas with the use\n   * of the paymaster.\n   */\n  callGasLimit?: string;\n  preVerificationGas?: string;\n  verificationGasLimit?: string;\n};\n\n/**\n * The data returned by the smart contract account when signing a user operation.\n */\nexport type SignUserOperationResponse = {\n  /** The final signature of the user operation. */\n  signature: string;\n};\n\n/**\n * An abstraction to provide smart contract and paymaster specific data when creating a user operation.\n * This will typically communicate with an account snap installed in the client.\n */\nexport type SmartContractAccount = {\n  /**\n   * Retrieve the initial values required to create a user operation.\n   * @param request - The data needed by the smart contract account to provide the initial user operation values.\n   * @returns The initial values required to create a user operation.\n   */\n  prepareUserOperation: (\n    request: PrepareUserOperationRequest,\n  ) => Promise<PrepareUserOperationResponse>;\n\n  /**\n   * Retrieve additional data required to create a user operation, such as the paymasterAndData value.\n   * If gas values were not provided in the prepare response, this will be called after estimating gas using the bundler.\n   * @param request - The data needed by the smart contract account to provide the additional user operation values.\n   * @returns The additional values required to create a user operation.\n   */\n  updateUserOperation: (\n    request: UpdateUserOperationRequest,\n  ) => Promise<UpdateUserOperationResponse>;\n\n  /**\n   * Sign the final user operation.\n   * @param request - The data needed by the smart contract account to generate the signature.\n   * @returns The final values required to sign a user operation.\n   */\n  signUserOperation: (\n    request: SignUserOperationRequest,\n  ) => Promise<SignUserOperationResponse>;\n};\n\n/**\n * Response from the `eth_getUserOperationReceipt` bundler method.\n * Includes the status of a completed user operation and the receipt of the transaction that submitted it.\n */\nexport type UserOperationReceipt = {\n  /** Confirmed total cost of the gas for the user operation. */\n  actualGasCost: Hex | number;\n\n  /** Confirmed total amount of gas used by the user operation. */\n  actualGasUsed: Hex | number;\n\n  /** True if the user operation was successfully confirmed on chain. */\n  success: boolean;\n\n  /** Receipt for the associated transaction. */\n  receipt: {\n    /** Hash of the block the transaction was added to. */\n    blockHash: string;\n\n    /** Hash of the confirmed transaction. */\n    transactionHash: string;\n  };\n};\n\n/** Information specific to user operations created from swap transactions. */\nexport type SwapsMetadata = {\n  /** ID of the associated approval transaction. */\n  approvalTxId: string | null;\n\n  /** Address of the destination token. */\n  destinationTokenAddress: string | null;\n\n  /** Number of decimals of the destination token. */\n  destinationTokenDecimals: number | null;\n\n  /** Symbol of the destination token. */\n  destinationTokenSymbol: string | null;\n\n  /** Amount of the destination token. */\n  destinationTokenAmount: string | null;\n\n  /** Estimated base fee of the swap. */\n  estimatedBaseFee: string | null;\n\n  /** Address of the source token. */\n  sourceTokenAddress: string | null;\n\n  /** Amount of the source token. */\n  sourceTokenAmount: string | null;\n\n  /** Number of decimals of the source token. */\n  sourceTokenDecimals: number | null;\n\n  /** Symbol of the source token. */\n  sourceTokenSymbol: string | null;\n\n  /** Recipient of the swap and send transaction. */\n  swapAndSendRecipient: string | null;\n\n  /** Untyped raw metadata values. */\n  swapMetaData: Record<string, never> | null;\n\n  /** Value of the token being swapped. */\n  swapTokenValue: string | null;\n};\n"]}
\ No newline at end of file
+{"version":3,"file":"types.cjs","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":";;;AA4EA;;GAEG;AACH,IAAY,mBAOX;AAPD,WAAY,mBAAmB;IAC7B,gDAAyB,CAAA;IACzB,4CAAqB,CAAA;IACrB,wCAAiB,CAAA;IACjB,8CAAuB,CAAA;IACvB,wCAAiB,CAAA;IACjB,8CAAuB,CAAA;AACzB,CAAC,EAPW,mBAAmB,mCAAnB,mBAAmB,QAO9B;AAsTD,IAAY,WAGX;AAHD,WAAY,WAAW;IACrB,2BAAY,CAAA;IACZ,2BAAY,CAAA;AACd,CAAC,EAHW,WAAW,2BAAX,WAAW,QAGtB","sourcesContent":["import type {\n  TransactionParams,\n  TransactionType,\n  UserFeeLevel,\n} from '@metamask/transaction-controller';\nimport type { Hex } from '@metamask/utils';\n\n/**\n * Common properties in all versions of the user operation.\n * Defined in EIP-4337.\n */\nexport type UserOperationBase = {\n  /** The data to pass to the sender during the main execution call. */\n  callData: string;\n\n  /** The amount of gas to allocate the main execution call. */\n  callGasLimit: string;\n\n  /**\n   * Maximum fee per gas.\n   * Similar to EIP-1559 max_fee_per_gas.\n   */\n  maxFeePerGas: string;\n\n  /**\n   * Maximum priority fee per gas.\n   * Similar to EIP-1559 max_priority_fee_per_gas.\n   */\n  maxPriorityFeePerGas: string;\n\n  /** Anti-replay parameter. */\n  nonce: string;\n\n  /**\n   * Address of paymaster sponsoring the transaction, followed by extra data to send to the paymaster.\n   * Empty for self-sponsored transactions.\n   */\n  paymasterAndData: string;\n\n  /** The amount of gas to pay to compensate the bundler for pre-verification execution, calldata and any gas overhead that cannot be tracked on-chain. */\n  preVerificationGas: string;\n\n  /** The account making the operation. */\n  sender: string;\n\n  /** Data passed into the account along with the nonce during the verification step. */\n  signature: string;\n\n  /** The amount of gas to allocate for the verification step. */\n  verificationGasLimit: string;\n};\n\n/**\n * A complete user operation to be submitted to a bundler.\n * Defined in EIP-4337 according to version V0.6.\n */\nexport type UserOperation = UserOperationBase & {\n  /**\n   * The initCode of the account.\n   * Needed if and only if the account is not yet on-chain and needs to be created.\n   */\n  initCode: string;\n};\n\n/**\n * A complete user operation to be submitted to a bundler.\n * Defined in EIP-4337 according to version V0.7.\n */\nexport type UserOperationV07 = UserOperationBase & {\n  /** Address of the account factory contract. */\n  factory: string;\n\n  /** Data required for the account factory contract to create a new account. */\n  factoryData: string;\n};\n\n/**\n * The possible statuses of a single user operation.\n */\nexport enum UserOperationStatus {\n  Unapproved = 'unapproved',\n  Approved = 'approved',\n  Signed = 'signed',\n  Submitted = 'submitted',\n  Failed = 'failed',\n  Confirmed = 'confirmed',\n}\n\n/** Information concerning an error while creating a user operation. */\nexport type UserOperationError = {\n  /**\n   * A descriptive error name.\n   */\n  name: string;\n\n  /**\n   * A descriptive error message providing details about the encountered error.\n   */\n  message: string;\n\n  /**\n   * The stack trace associated with the error, if available.\n   */\n  stack: string | null;\n\n  /**\n   * An optional error code associated with the error.\n   */\n  code: string | null;\n\n  /**\n   * Additional information related to the error.\n   */\n  rpc: string | null;\n};\n\n/**\n * Metadata concerning a single user operation, stored in the client state.\n */\nexport type UserOperationMetadata = {\n  /** Confirmed total cost of the gas for the user operation. */\n  actualGasCost: string | null;\n\n  /** Confirmed total amount of gas used by the user operation. */\n  actualGasUsed: string | null;\n\n  /** Base fee of the transaction block as a hex value. */\n  baseFeePerGas: string | null;\n\n  /** URL of the bundler that the operation was submitted to. */\n  bundlerUrl: string | null;\n\n  /** Hexadecimal chain ID of the target network. */\n  chainId: string;\n\n  /** An error that occurred while creating the operation. */\n  error: UserOperationError | null;\n\n  /** Hash of the user operation, generated by the bundler. */\n  hash: string | null;\n\n  /** A unique ID used to identify a user operation in the client. */\n  id: string;\n\n  /** The origin of the user operation, such as the hostname of a dApp. */\n  origin: string;\n\n  /** Current status of the user operation. */\n  status: UserOperationStatus;\n\n  /** Metadata specific to swap transactions. */\n  swapsMetadata: SwapsMetadata | null;\n\n  /** Timestamp of when the user operation was created. */\n  time: number;\n\n  /** Hash of the transaction that submitted the user operation to the entrypoint. */\n  transactionHash: string | null;\n\n  /** The initial transaction parameters that the user operation was created from. */\n  transactionParams: Required<TransactionParams> | null;\n\n  /** The type of transaction that the user operation will create. */\n  transactionType: TransactionType | null;\n\n  /** The origin of the gas fee values. */\n  userFeeLevel: UserFeeLevel | null;\n\n  /** Resulting user operation object to be submitted to the bundler. */\n  userOperation: UserOperation;\n};\n\n/**\n * The data provided to the smart contract account when preparing a user operation.\n */\nexport type PrepareUserOperationRequest = {\n  /** The hexadecimal chain ID of the target network. */\n  chainId: string;\n\n  /** The data to include in the resulting transaction.  */\n  data?: string;\n\n  /** Address of the account requesting the user operation. */\n  from: string;\n\n  /** The destination address of the resulting transaction. */\n  to?: string;\n\n  /** The value to send in the resulting transaction. */\n  value?: string;\n};\n\n/**\n * The data provided to the smart contract account when updating a user operation.\n */\nexport type UpdateUserOperationRequest = {\n  /** The user operation to update including the dummy signature and dummy paymasterAndData values. */\n  userOperation: UserOperation;\n\n  /** The hexadecimal chain ID of the target network. */\n  chainId: string;\n};\n\n/**\n * The data provided to the smart contract account when signing a user operation.\n */\nexport type SignUserOperationRequest = {\n  /** The user operation to sign including the dummy signature and final paymasterAndData values. */\n  userOperation: UserOperation;\n\n  /** The hexadecimal chain ID of the target network. */\n  chainId: string;\n};\n\n/**\n * The data returned by the smart contract account when preparing a user operation.\n */\nexport type PrepareUserOperationResponse = {\n  /** The URL of the bundler to submit the user operation to. */\n  bundler: string;\n\n  /** The data to pass to the sender during the main execution call. */\n  callData: string;\n\n  /**\n   * A dummy paymasterAndData value required to estimate gas using the bundler.\n   * Only required if the smart contract account is not providing gas values.\n   */\n  dummyPaymasterAndData?: string;\n\n  /**\n   * A dummy signature value required to estimate gas using the bundler.\n   * Only required if the smart contract account is not providing gas values.\n   */\n  dummySignature?: string;\n\n  /**\n   * The estimated gas limits for the user operation.\n   * Gas is automatically estimated using the bundler if not provided.\n   */\n  gas?: {\n    /** The amount of gas to allocate to the main execution call. */\n    callGasLimit: string;\n\n    /** The amount of gas to pay to compensate the bundler for pre-verification execution, calldata and any gas overhead that cannot be tracked on-chain. */\n    preVerificationGas: string;\n\n    /** The amount of gas to allocate for the verification step. */\n    verificationGasLimit: string;\n  };\n\n  /**\n   * The initCode to include in the user operation.\n   * Required only if the smart contract is not yet deployed.\n   */\n  initCode?: string;\n\n  /**\n   * The nonce to include in the user operation, specific to the smart contract account.\n   */\n  nonce: string;\n\n  /**\n   * The address of the smart contract account creating the user operation.\n   */\n  sender: string;\n};\n\n/**\n * The data returned by the smart contract account when updating a user operation.\n */\nexport type UpdateUserOperationResponse = {\n  /**\n   * The final paymasterAndData to include in the user operation.\n   * Not required if a paymaster is not sponsoring the transaction.\n   */\n  paymasterAndData?: string;\n\n  /**\n   * The final gas limits for the user operation suggested by the smart contract account.\n   * The simulated gas limits may be different after the bundler estimates gas with the use\n   * of the paymaster.\n   */\n  callGasLimit?: string;\n  preVerificationGas?: string;\n  verificationGasLimit?: string;\n};\n\n/**\n * The data returned by the smart contract account when signing a user operation.\n */\nexport type SignUserOperationResponse = {\n  /** The final signature of the user operation. */\n  signature: string;\n};\n\n/**\n * An abstraction to provide smart contract and paymaster specific data when creating a user operation.\n * This will typically communicate with an account snap installed in the client.\n */\nexport type SmartContractAccount = {\n  /**\n   * Retrieve the initial values required to create a user operation.\n   * @param request - The data needed by the smart contract account to provide the initial user operation values.\n   * @returns The initial values required to create a user operation.\n   */\n  prepareUserOperation: (\n    request: PrepareUserOperationRequest,\n  ) => Promise<PrepareUserOperationResponse>;\n\n  /**\n   * Retrieve additional data required to create a user operation, such as the paymasterAndData value.\n   * If gas values were not provided in the prepare response, this will be called after estimating gas using the bundler.\n   * @param request - The data needed by the smart contract account to provide the additional user operation values.\n   * @returns The additional values required to create a user operation.\n   */\n  updateUserOperation: (\n    request: UpdateUserOperationRequest,\n  ) => Promise<UpdateUserOperationResponse>;\n\n  /**\n   * Sign the final user operation.\n   * @param request - The data needed by the smart contract account to generate the signature.\n   * @returns The final values required to sign a user operation.\n   */\n  signUserOperation: (\n    request: SignUserOperationRequest,\n  ) => Promise<SignUserOperationResponse>;\n};\n\n/**\n * Response from the `eth_getUserOperationReceipt` bundler method.\n * Includes the status of a completed user operation and the receipt of the transaction that submitted it.\n */\nexport type UserOperationReceipt = {\n  /** Confirmed total cost of the gas for the user operation. */\n  actualGasCost: Hex | number;\n\n  /** Confirmed total amount of gas used by the user operation. */\n  actualGasUsed: Hex | number;\n\n  /** True if the user operation was successfully confirmed on chain. */\n  success: boolean;\n\n  /** Receipt for the associated transaction. */\n  receipt: {\n    /** Hash of the block the transaction was added to. */\n    blockHash: string;\n\n    /** Hash of the confirmed transaction. */\n    transactionHash: string;\n  };\n};\n\n/** Information specific to user operations created from swap transactions. */\nexport type SwapsMetadata = {\n  /** ID of the associated approval transaction. */\n  approvalTxId: string | null;\n\n  /** Address of the destination token. */\n  destinationTokenAddress: string | null;\n\n  /** Number of decimals of the destination token. */\n  destinationTokenDecimals: number | null;\n\n  /** Symbol of the destination token. */\n  destinationTokenSymbol: string | null;\n\n  /** Amount of the destination token. */\n  destinationTokenAmount: string | null;\n\n  /** Estimated base fee of the swap. */\n  estimatedBaseFee: string | null;\n\n  /** Address of the source token. */\n  sourceTokenAddress: string | null;\n\n  /** Amount of the source token. */\n  sourceTokenAmount: string | null;\n\n  /** Number of decimals of the source token. */\n  sourceTokenDecimals: number | null;\n\n  /** Symbol of the source token. */\n  sourceTokenSymbol: string | null;\n\n  /** Recipient of the swap and send transaction. */\n  swapAndSendRecipient: string | null;\n\n  /** Untyped raw metadata values. */\n  swapMetaData: Record<string, never> | null;\n\n  /** Value of the token being swapped. */\n  swapTokenValue: string | null;\n};\n\nexport enum Version4337 {\n  V06 = 'V0.6',\n  V07 = 'V0.7',\n}\n"]}
\ No newline at end of file
diff --git a/dist/types.d.cts b/dist/types.d.cts
index bc2b1dadbb5a84d1430ae23412f715344340e59c..d899cff5782528a612dd75ec59c8a760e58fabcb 100644
--- a/dist/types.d.cts
+++ b/dist/types.d.cts
@@ -1,19 +1,14 @@
 import type { TransactionParams, TransactionType, UserFeeLevel } from "@metamask/transaction-controller";
 import type { Hex } from "@metamask/utils";
 /**
- * A complete user operation to be submitted to a bundler.
+ * Common properties in all versions of the user operation.
  * Defined in EIP-4337.
  */
-export type UserOperation = {
+export type UserOperationBase = {
     /** The data to pass to the sender during the main execution call. */
     callData: string;
     /** The amount of gas to allocate the main execution call. */
     callGasLimit: string;
-    /**
-     * The initCode of the account.
-     * Needed if and only if the account is not yet on-chain and needs to be created.
-     */
-    initCode: string;
     /**
      * Maximum fee per gas.
      * Similar to EIP-1559 max_fee_per_gas.
@@ -40,6 +35,27 @@ export type UserOperation = {
     /** The amount of gas to allocate for the verification step. */
     verificationGasLimit: string;
 };
+/**
+ * A complete user operation to be submitted to a bundler.
+ * Defined in EIP-4337 according to version V0.6.
+ */
+export type UserOperation = UserOperationBase & {
+    /**
+     * The initCode of the account.
+     * Needed if and only if the account is not yet on-chain and needs to be created.
+     */
+    initCode: string;
+};
+/**
+ * A complete user operation to be submitted to a bundler.
+ * Defined in EIP-4337 according to version V0.7.
+ */
+export type UserOperationV07 = UserOperationBase & {
+    /** Address of the account factory contract. */
+    factory: string;
+    /** Data required for the account factory contract to create a new account. */
+    factoryData: string;
+};
 /**
  * The possible statuses of a single user operation.
  */
@@ -288,4 +304,8 @@ export type SwapsMetadata = {
     /** Value of the token being swapped. */
     swapTokenValue: string | null;
 };
+export declare enum Version4337 {
+    V06 = "V0.6",
+    V07 = "V0.7"
+}
 //# sourceMappingURL=types.d.cts.map
\ No newline at end of file
diff --git a/dist/types.d.cts.map b/dist/types.d.cts.map
index 5da33a4726019527f5002f4a2e6742cf954b9481..8b839fe78c571f675256ca835003a75f118bf57f 100644
--- a/dist/types.d.cts.map
+++ b/dist/types.d.cts.map
@@ -1 +1 @@
-{"version":3,"file":"types.d.cts","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"types.d.cts","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EACV,iBAAiB,EACjB,eAAe,EACf,YAAY,EACb,yCAAyC;AAC1C,OAAO,KAAK,EAAE,GAAG,EAAE,wBAAwB;AAE3C;;;GAGG;AACH,MAAM,MAAM,iBAAiB,GAAG;IAC9B,qEAAqE;IACrE,QAAQ,EAAE,MAAM,CAAC;IAEjB,6DAA6D;IAC7D,YAAY,EAAE,MAAM,CAAC;IAErB;;;OAGG;IACH,YAAY,EAAE,MAAM,CAAC;IAErB;;;OAGG;IACH,oBAAoB,EAAE,MAAM,CAAC;IAE7B,6BAA6B;IAC7B,KAAK,EAAE,MAAM,CAAC;IAEd;;;OAGG;IACH,gBAAgB,EAAE,MAAM,CAAC;IAEzB,wJAAwJ;IACxJ,kBAAkB,EAAE,MAAM,CAAC;IAE3B,wCAAwC;IACxC,MAAM,EAAE,MAAM,CAAC;IAEf,sFAAsF;IACtF,SAAS,EAAE,MAAM,CAAC;IAElB,+DAA+D;IAC/D,oBAAoB,EAAE,MAAM,CAAC;CAC9B,CAAC;AAEF;;;GAGG;AACH,MAAM,MAAM,aAAa,GAAG,iBAAiB,GAAG;IAC9C;;;OAGG;IACH,QAAQ,EAAE,MAAM,CAAC;CAClB,CAAC;AAEF;;;GAGG;AACH,MAAM,MAAM,gBAAgB,GAAG,iBAAiB,GAAG;IACjD,+CAA+C;IAC/C,OAAO,EAAE,MAAM,CAAC;IAEhB,8EAA8E;IAC9E,WAAW,EAAE,MAAM,CAAC;CACrB,CAAC;AAEF;;GAEG;AACH,oBAAY,mBAAmB;IAC7B,UAAU,eAAe;IACzB,QAAQ,aAAa;IACrB,MAAM,WAAW;IACjB,SAAS,cAAc;IACvB,MAAM,WAAW;IACjB,SAAS,cAAc;CACxB;AAED,uEAAuE;AACvE,MAAM,MAAM,kBAAkB,GAAG;IAC/B;;OAEG;IACH,IAAI,EAAE,MAAM,CAAC;IAEb;;OAEG;IACH,OAAO,EAAE,MAAM,CAAC;IAEhB;;OAEG;IACH,KAAK,EAAE,MAAM,GAAG,IAAI,CAAC;IAErB;;OAEG;IACH,IAAI,EAAE,MAAM,GAAG,IAAI,CAAC;IAEpB;;OAEG;IACH,GAAG,EAAE,MAAM,GAAG,IAAI,CAAC;CACpB,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,qBAAqB,GAAG;IAClC,8DAA8D;IAC9D,aAAa,EAAE,MAAM,GAAG,IAAI,CAAC;IAE7B,gEAAgE;IAChE,aAAa,EAAE,MAAM,GAAG,IAAI,CAAC;IAE7B,wDAAwD;IACxD,aAAa,EAAE,MAAM,GAAG,IAAI,CAAC;IAE7B,8DAA8D;IAC9D,UAAU,EAAE,MAAM,GAAG,IAAI,CAAC;IAE1B,kDAAkD;IAClD,OAAO,EAAE,MAAM,CAAC;IAEhB,2DAA2D;IAC3D,KAAK,EAAE,kBAAkB,GAAG,IAAI,CAAC;IAEjC,4DAA4D;IAC5D,IAAI,EAAE,MAAM,GAAG,IAAI,CAAC;IAEpB,mEAAmE;IACnE,EAAE,EAAE,MAAM,CAAC;IAEX,wEAAwE;IACxE,MAAM,EAAE,MAAM,CAAC;IAEf,4CAA4C;IAC5C,MAAM,EAAE,mBAAmB,CAAC;IAE5B,8CAA8C;IAC9C,aAAa,EAAE,aAAa,GAAG,IAAI,CAAC;IAEpC,wDAAwD;IACxD,IAAI,EAAE,MAAM,CAAC;IAEb,mFAAmF;IACnF,eAAe,EAAE,MAAM,GAAG,IAAI,CAAC;IAE/B,mFAAmF;IACnF,iBAAiB,EAAE,QAAQ,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC;IAEtD,mEAAmE;IACnE,eAAe,EAAE,eAAe,GAAG,IAAI,CAAC;IAExC,wCAAwC;IACxC,YAAY,EAAE,YAAY,GAAG,IAAI,CAAC;IAElC,sEAAsE;IACtE,aAAa,EAAE,aAAa,CAAC;CAC9B,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,2BAA2B,GAAG;IACxC,sDAAsD;IACtD,OAAO,EAAE,MAAM,CAAC;IAEhB,yDAAyD;IACzD,IAAI,CAAC,EAAE,MAAM,CAAC;IAEd,4DAA4D;IAC5D,IAAI,EAAE,MAAM,CAAC;IAEb,4DAA4D;IAC5D,EAAE,CAAC,EAAE,MAAM,CAAC;IAEZ,sDAAsD;IACtD,KAAK,CAAC,EAAE,MAAM,CAAC;CAChB,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,0BAA0B,GAAG;IACvC,oGAAoG;IACpG,aAAa,EAAE,aAAa,CAAC;IAE7B,sDAAsD;IACtD,OAAO,EAAE,MAAM,CAAC;CACjB,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,wBAAwB,GAAG;IACrC,kGAAkG;IAClG,aAAa,EAAE,aAAa,CAAC;IAE7B,sDAAsD;IACtD,OAAO,EAAE,MAAM,CAAC;CACjB,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,4BAA4B,GAAG;IACzC,8DAA8D;IAC9D,OAAO,EAAE,MAAM,CAAC;IAEhB,qEAAqE;IACrE,QAAQ,EAAE,MAAM,CAAC;IAEjB;;;OAGG;IACH,qBAAqB,CAAC,EAAE,MAAM,CAAC;IAE/B;;;OAGG;IACH,cAAc,CAAC,EAAE,MAAM,CAAC;IAExB;;;OAGG;IACH,GAAG,CAAC,EAAE;QACJ,gEAAgE;QAChE,YAAY,EAAE,MAAM,CAAC;QAErB,wJAAwJ;QACxJ,kBAAkB,EAAE,MAAM,CAAC;QAE3B,+DAA+D;QAC/D,oBAAoB,EAAE,MAAM,CAAC;KAC9B,CAAC;IAEF;;;OAGG;IACH,QAAQ,CAAC,EAAE,MAAM,CAAC;IAElB;;OAEG;IACH,KAAK,EAAE,MAAM,CAAC;IAEd;;OAEG;IACH,MAAM,EAAE,MAAM,CAAC;CAChB,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,2BAA2B,GAAG;IACxC;;;OAGG;IACH,gBAAgB,CAAC,EAAE,MAAM,CAAC;IAE1B;;;;OAIG;IACH,YAAY,CAAC,EAAE,MAAM,CAAC;IACtB,kBAAkB,CAAC,EAAE,MAAM,CAAC;IAC5B,oBAAoB,CAAC,EAAE,MAAM,CAAC;CAC/B,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,yBAAyB,GAAG;IACtC,iDAAiD;IACjD,SAAS,EAAE,MAAM,CAAC;CACnB,CAAC;AAEF;;;GAGG;AACH,MAAM,MAAM,oBAAoB,GAAG;IACjC;;;;OAIG;IACH,oBAAoB,EAAE,CACpB,OAAO,EAAE,2BAA2B,KACjC,OAAO,CAAC,4BAA4B,CAAC,CAAC;IAE3C;;;;;OAKG;IACH,mBAAmB,EAAE,CACnB,OAAO,EAAE,0BAA0B,KAChC,OAAO,CAAC,2BAA2B,CAAC,CAAC;IAE1C;;;;OAIG;IACH,iBAAiB,EAAE,CACjB,OAAO,EAAE,wBAAwB,KAC9B,OAAO,CAAC,yBAAyB,CAAC,CAAC;CACzC,CAAC;AAEF;;;GAGG;AACH,MAAM,MAAM,oBAAoB,GAAG;IACjC,8DAA8D;IAC9D,aAAa,EAAE,GAAG,GAAG,MAAM,CAAC;IAE5B,gEAAgE;IAChE,aAAa,EAAE,GAAG,GAAG,MAAM,CAAC;IAE5B,sEAAsE;IACtE,OAAO,EAAE,OAAO,CAAC;IAEjB,8CAA8C;IAC9C,OAAO,EAAE;QACP,sDAAsD;QACtD,SAAS,EAAE,MAAM,CAAC;QAElB,yCAAyC;QACzC,eAAe,EAAE,MAAM,CAAC;KACzB,CAAC;CACH,CAAC;AAEF,8EAA8E;AAC9E,MAAM,MAAM,aAAa,GAAG;IAC1B,iDAAiD;IACjD,YAAY,EAAE,MAAM,GAAG,IAAI,CAAC;IAE5B,wCAAwC;IACxC,uBAAuB,EAAE,MAAM,GAAG,IAAI,CAAC;IAEvC,mDAAmD;IACnD,wBAAwB,EAAE,MAAM,GAAG,IAAI,CAAC;IAExC,uCAAuC;IACvC,sBAAsB,EAAE,MAAM,GAAG,IAAI,CAAC;IAEtC,uCAAuC;IACvC,sBAAsB,EAAE,MAAM,GAAG,IAAI,CAAC;IAEtC,sCAAsC;IACtC,gBAAgB,EAAE,MAAM,GAAG,IAAI,CAAC;IAEhC,mCAAmC;IACnC,kBAAkB,EAAE,MAAM,GAAG,IAAI,CAAC;IAElC,kCAAkC;IAClC,iBAAiB,EAAE,MAAM,GAAG,IAAI,CAAC;IAEjC,8CAA8C;IAC9C,mBAAmB,EAAE,MAAM,GAAG,IAAI,CAAC;IAEnC,kCAAkC;IAClC,iBAAiB,EAAE,MAAM,GAAG,IAAI,CAAC;IAEjC,kDAAkD;IAClD,oBAAoB,EAAE,MAAM,GAAG,IAAI,CAAC;IAEpC,mCAAmC;IACnC,YAAY,EAAE,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,GAAG,IAAI,CAAC;IAE3C,wCAAwC;IACxC,cAAc,EAAE,MAAM,GAAG,IAAI,CAAC;CAC/B,CAAC;AAEF,oBAAY,WAAW;IACrB,GAAG,SAAS;IACZ,GAAG,SAAS;CACb"}
\ No newline at end of file
diff --git a/dist/types.d.mts b/dist/types.d.mts
index 2c3eb379c7b974fecde4fbe1c0bd6dbcfa99284c..e65fd1890310935ba13ad56402a9e1cdc2c0558c 100644
--- a/dist/types.d.mts
+++ b/dist/types.d.mts
@@ -1,19 +1,14 @@
 import type { TransactionParams, TransactionType, UserFeeLevel } from "@metamask/transaction-controller";
 import type { Hex } from "@metamask/utils";
 /**
- * A complete user operation to be submitted to a bundler.
+ * Common properties in all versions of the user operation.
  * Defined in EIP-4337.
  */
-export type UserOperation = {
+export type UserOperationBase = {
     /** The data to pass to the sender during the main execution call. */
     callData: string;
     /** The amount of gas to allocate the main execution call. */
     callGasLimit: string;
-    /**
-     * The initCode of the account.
-     * Needed if and only if the account is not yet on-chain and needs to be created.
-     */
-    initCode: string;
     /**
      * Maximum fee per gas.
      * Similar to EIP-1559 max_fee_per_gas.
@@ -40,6 +35,27 @@ export type UserOperation = {
     /** The amount of gas to allocate for the verification step. */
     verificationGasLimit: string;
 };
+/**
+ * A complete user operation to be submitted to a bundler.
+ * Defined in EIP-4337 according to version V0.6.
+ */
+export type UserOperation = UserOperationBase & {
+    /**
+     * The initCode of the account.
+     * Needed if and only if the account is not yet on-chain and needs to be created.
+     */
+    initCode: string;
+};
+/**
+ * A complete user operation to be submitted to a bundler.
+ * Defined in EIP-4337 according to version V0.7.
+ */
+export type UserOperationV07 = UserOperationBase & {
+    /** Address of the account factory contract. */
+    factory: string;
+    /** Data required for the account factory contract to create a new account. */
+    factoryData: string;
+};
 /**
  * The possible statuses of a single user operation.
  */
@@ -288,4 +304,8 @@ export type SwapsMetadata = {
     /** Value of the token being swapped. */
     swapTokenValue: string | null;
 };
+export declare enum Version4337 {
+    V06 = "V0.6",
+    V07 = "V0.7"
+}
 //# sourceMappingURL=types.d.mts.map
\ No newline at end of file
diff --git a/dist/types.d.mts.map b/dist/types.d.mts.map
index d37df6c49d60facfc78fd4f9238ef5bfb6a8405a..a38bc86dba67d7697bb6f6640908ba9e21f8b309 100644
--- a/dist/types.d.mts.map
+++ b/dist/types.d.mts.map
@@ -1 +1 @@
-{"version":3,"file":"types.d.mts","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"types.d.mts","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EACV,iBAAiB,EACjB,eAAe,EACf,YAAY,EACb,yCAAyC;AAC1C,OAAO,KAAK,EAAE,GAAG,EAAE,wBAAwB;AAE3C;;;GAGG;AACH,MAAM,MAAM,iBAAiB,GAAG;IAC9B,qEAAqE;IACrE,QAAQ,EAAE,MAAM,CAAC;IAEjB,6DAA6D;IAC7D,YAAY,EAAE,MAAM,CAAC;IAErB;;;OAGG;IACH,YAAY,EAAE,MAAM,CAAC;IAErB;;;OAGG;IACH,oBAAoB,EAAE,MAAM,CAAC;IAE7B,6BAA6B;IAC7B,KAAK,EAAE,MAAM,CAAC;IAEd;;;OAGG;IACH,gBAAgB,EAAE,MAAM,CAAC;IAEzB,wJAAwJ;IACxJ,kBAAkB,EAAE,MAAM,CAAC;IAE3B,wCAAwC;IACxC,MAAM,EAAE,MAAM,CAAC;IAEf,sFAAsF;IACtF,SAAS,EAAE,MAAM,CAAC;IAElB,+DAA+D;IAC/D,oBAAoB,EAAE,MAAM,CAAC;CAC9B,CAAC;AAEF;;;GAGG;AACH,MAAM,MAAM,aAAa,GAAG,iBAAiB,GAAG;IAC9C;;;OAGG;IACH,QAAQ,EAAE,MAAM,CAAC;CAClB,CAAC;AAEF;;;GAGG;AACH,MAAM,MAAM,gBAAgB,GAAG,iBAAiB,GAAG;IACjD,+CAA+C;IAC/C,OAAO,EAAE,MAAM,CAAC;IAEhB,8EAA8E;IAC9E,WAAW,EAAE,MAAM,CAAC;CACrB,CAAC;AAEF;;GAEG;AACH,oBAAY,mBAAmB;IAC7B,UAAU,eAAe;IACzB,QAAQ,aAAa;IACrB,MAAM,WAAW;IACjB,SAAS,cAAc;IACvB,MAAM,WAAW;IACjB,SAAS,cAAc;CACxB;AAED,uEAAuE;AACvE,MAAM,MAAM,kBAAkB,GAAG;IAC/B;;OAEG;IACH,IAAI,EAAE,MAAM,CAAC;IAEb;;OAEG;IACH,OAAO,EAAE,MAAM,CAAC;IAEhB;;OAEG;IACH,KAAK,EAAE,MAAM,GAAG,IAAI,CAAC;IAErB;;OAEG;IACH,IAAI,EAAE,MAAM,GAAG,IAAI,CAAC;IAEpB;;OAEG;IACH,GAAG,EAAE,MAAM,GAAG,IAAI,CAAC;CACpB,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,qBAAqB,GAAG;IAClC,8DAA8D;IAC9D,aAAa,EAAE,MAAM,GAAG,IAAI,CAAC;IAE7B,gEAAgE;IAChE,aAAa,EAAE,MAAM,GAAG,IAAI,CAAC;IAE7B,wDAAwD;IACxD,aAAa,EAAE,MAAM,GAAG,IAAI,CAAC;IAE7B,8DAA8D;IAC9D,UAAU,EAAE,MAAM,GAAG,IAAI,CAAC;IAE1B,kDAAkD;IAClD,OAAO,EAAE,MAAM,CAAC;IAEhB,2DAA2D;IAC3D,KAAK,EAAE,kBAAkB,GAAG,IAAI,CAAC;IAEjC,4DAA4D;IAC5D,IAAI,EAAE,MAAM,GAAG,IAAI,CAAC;IAEpB,mEAAmE;IACnE,EAAE,EAAE,MAAM,CAAC;IAEX,wEAAwE;IACxE,MAAM,EAAE,MAAM,CAAC;IAEf,4CAA4C;IAC5C,MAAM,EAAE,mBAAmB,CAAC;IAE5B,8CAA8C;IAC9C,aAAa,EAAE,aAAa,GAAG,IAAI,CAAC;IAEpC,wDAAwD;IACxD,IAAI,EAAE,MAAM,CAAC;IAEb,mFAAmF;IACnF,eAAe,EAAE,MAAM,GAAG,IAAI,CAAC;IAE/B,mFAAmF;IACnF,iBAAiB,EAAE,QAAQ,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC;IAEtD,mEAAmE;IACnE,eAAe,EAAE,eAAe,GAAG,IAAI,CAAC;IAExC,wCAAwC;IACxC,YAAY,EAAE,YAAY,GAAG,IAAI,CAAC;IAElC,sEAAsE;IACtE,aAAa,EAAE,aAAa,CAAC;CAC9B,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,2BAA2B,GAAG;IACxC,sDAAsD;IACtD,OAAO,EAAE,MAAM,CAAC;IAEhB,yDAAyD;IACzD,IAAI,CAAC,EAAE,MAAM,CAAC;IAEd,4DAA4D;IAC5D,IAAI,EAAE,MAAM,CAAC;IAEb,4DAA4D;IAC5D,EAAE,CAAC,EAAE,MAAM,CAAC;IAEZ,sDAAsD;IACtD,KAAK,CAAC,EAAE,MAAM,CAAC;CAChB,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,0BAA0B,GAAG;IACvC,oGAAoG;IACpG,aAAa,EAAE,aAAa,CAAC;IAE7B,sDAAsD;IACtD,OAAO,EAAE,MAAM,CAAC;CACjB,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,wBAAwB,GAAG;IACrC,kGAAkG;IAClG,aAAa,EAAE,aAAa,CAAC;IAE7B,sDAAsD;IACtD,OAAO,EAAE,MAAM,CAAC;CACjB,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,4BAA4B,GAAG;IACzC,8DAA8D;IAC9D,OAAO,EAAE,MAAM,CAAC;IAEhB,qEAAqE;IACrE,QAAQ,EAAE,MAAM,CAAC;IAEjB;;;OAGG;IACH,qBAAqB,CAAC,EAAE,MAAM,CAAC;IAE/B;;;OAGG;IACH,cAAc,CAAC,EAAE,MAAM,CAAC;IAExB;;;OAGG;IACH,GAAG,CAAC,EAAE;QACJ,gEAAgE;QAChE,YAAY,EAAE,MAAM,CAAC;QAErB,wJAAwJ;QACxJ,kBAAkB,EAAE,MAAM,CAAC;QAE3B,+DAA+D;QAC/D,oBAAoB,EAAE,MAAM,CAAC;KAC9B,CAAC;IAEF;;;OAGG;IACH,QAAQ,CAAC,EAAE,MAAM,CAAC;IAElB;;OAEG;IACH,KAAK,EAAE,MAAM,CAAC;IAEd;;OAEG;IACH,MAAM,EAAE,MAAM,CAAC;CAChB,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,2BAA2B,GAAG;IACxC;;;OAGG;IACH,gBAAgB,CAAC,EAAE,MAAM,CAAC;IAE1B;;;;OAIG;IACH,YAAY,CAAC,EAAE,MAAM,CAAC;IACtB,kBAAkB,CAAC,EAAE,MAAM,CAAC;IAC5B,oBAAoB,CAAC,EAAE,MAAM,CAAC;CAC/B,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,yBAAyB,GAAG;IACtC,iDAAiD;IACjD,SAAS,EAAE,MAAM,CAAC;CACnB,CAAC;AAEF;;;GAGG;AACH,MAAM,MAAM,oBAAoB,GAAG;IACjC;;;;OAIG;IACH,oBAAoB,EAAE,CACpB,OAAO,EAAE,2BAA2B,KACjC,OAAO,CAAC,4BAA4B,CAAC,CAAC;IAE3C;;;;;OAKG;IACH,mBAAmB,EAAE,CACnB,OAAO,EAAE,0BAA0B,KAChC,OAAO,CAAC,2BAA2B,CAAC,CAAC;IAE1C;;;;OAIG;IACH,iBAAiB,EAAE,CACjB,OAAO,EAAE,wBAAwB,KAC9B,OAAO,CAAC,yBAAyB,CAAC,CAAC;CACzC,CAAC;AAEF;;;GAGG;AACH,MAAM,MAAM,oBAAoB,GAAG;IACjC,8DAA8D;IAC9D,aAAa,EAAE,GAAG,GAAG,MAAM,CAAC;IAE5B,gEAAgE;IAChE,aAAa,EAAE,GAAG,GAAG,MAAM,CAAC;IAE5B,sEAAsE;IACtE,OAAO,EAAE,OAAO,CAAC;IAEjB,8CAA8C;IAC9C,OAAO,EAAE;QACP,sDAAsD;QACtD,SAAS,EAAE,MAAM,CAAC;QAElB,yCAAyC;QACzC,eAAe,EAAE,MAAM,CAAC;KACzB,CAAC;CACH,CAAC;AAEF,8EAA8E;AAC9E,MAAM,MAAM,aAAa,GAAG;IAC1B,iDAAiD;IACjD,YAAY,EAAE,MAAM,GAAG,IAAI,CAAC;IAE5B,wCAAwC;IACxC,uBAAuB,EAAE,MAAM,GAAG,IAAI,CAAC;IAEvC,mDAAmD;IACnD,wBAAwB,EAAE,MAAM,GAAG,IAAI,CAAC;IAExC,uCAAuC;IACvC,sBAAsB,EAAE,MAAM,GAAG,IAAI,CAAC;IAEtC,uCAAuC;IACvC,sBAAsB,EAAE,MAAM,GAAG,IAAI,CAAC;IAEtC,sCAAsC;IACtC,gBAAgB,EAAE,MAAM,GAAG,IAAI,CAAC;IAEhC,mCAAmC;IACnC,kBAAkB,EAAE,MAAM,GAAG,IAAI,CAAC;IAElC,kCAAkC;IAClC,iBAAiB,EAAE,MAAM,GAAG,IAAI,CAAC;IAEjC,8CAA8C;IAC9C,mBAAmB,EAAE,MAAM,GAAG,IAAI,CAAC;IAEnC,kCAAkC;IAClC,iBAAiB,EAAE,MAAM,GAAG,IAAI,CAAC;IAEjC,kDAAkD;IAClD,oBAAoB,EAAE,MAAM,GAAG,IAAI,CAAC;IAEpC,mCAAmC;IACnC,YAAY,EAAE,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,GAAG,IAAI,CAAC;IAE3C,wCAAwC;IACxC,cAAc,EAAE,MAAM,GAAG,IAAI,CAAC;CAC/B,CAAC;AAEF,oBAAY,WAAW;IACrB,GAAG,SAAS;IACZ,GAAG,SAAS;CACb"}
\ No newline at end of file
diff --git a/dist/types.mjs b/dist/types.mjs
index a8965cf49d0563c11845e6e011f815e9da168a72..bf2708e2691ca40bae27ea6ee3648f1e24b1cf21 100644
--- a/dist/types.mjs
+++ b/dist/types.mjs
@@ -10,4 +10,9 @@ export var UserOperationStatus;
     UserOperationStatus["Failed"] = "failed";
     UserOperationStatus["Confirmed"] = "confirmed";
 })(UserOperationStatus || (UserOperationStatus = {}));
+export var Version4337;
+(function (Version4337) {
+    Version4337["V06"] = "V0.6";
+    Version4337["V07"] = "V0.7";
+})(Version4337 || (Version4337 = {}));
 //# sourceMappingURL=types.mjs.map
\ No newline at end of file
diff --git a/dist/types.mjs.map b/dist/types.mjs.map
index 900526d84ed7095b1ba1003d38836d4bdd382598..28ed8219b87c0cc7036b18dff077b0a716dd2c5d 100644
--- a/dist/types.mjs.map
+++ b/dist/types.mjs.map
@@ -1 +1 @@
-{"version":3,"file":"types.mjs","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"AA0DA;;GAEG;AACH,MAAM,CAAN,IAAY,mBAOX;AAPD,WAAY,mBAAmB;IAC7B,gDAAyB,CAAA;IACzB,4CAAqB,CAAA;IACrB,wCAAiB,CAAA;IACjB,8CAAuB,CAAA;IACvB,wCAAiB,CAAA;IACjB,8CAAuB,CAAA;AACzB,CAAC,EAPW,mBAAmB,KAAnB,mBAAmB,QAO9B","sourcesContent":["import type {\n  TransactionParams,\n  TransactionType,\n  UserFeeLevel,\n} from '@metamask/transaction-controller';\nimport type { Hex } from '@metamask/utils';\n\n/**\n * A complete user operation to be submitted to a bundler.\n * Defined in EIP-4337.\n */\nexport type UserOperation = {\n  /** The data to pass to the sender during the main execution call. */\n  callData: string;\n\n  /** The amount of gas to allocate the main execution call. */\n  callGasLimit: string;\n\n  /**\n   * The initCode of the account.\n   * Needed if and only if the account is not yet on-chain and needs to be created.\n   */\n  initCode: string;\n\n  /**\n   * Maximum fee per gas.\n   * Similar to EIP-1559 max_fee_per_gas.\n   */\n  maxFeePerGas: string;\n\n  /**\n   * Maximum priority fee per gas.\n   * Similar to EIP-1559 max_priority_fee_per_gas.\n   */\n  maxPriorityFeePerGas: string;\n\n  /** Anti-replay parameter. */\n  nonce: string;\n\n  /**\n   * Address of paymaster sponsoring the transaction, followed by extra data to send to the paymaster.\n   * Empty for self-sponsored transactions.\n   */\n  paymasterAndData: string;\n\n  /** The amount of gas to pay to compensate the bundler for pre-verification execution, calldata and any gas overhead that cannot be tracked on-chain. */\n  preVerificationGas: string;\n\n  /** The account making the operation. */\n  sender: string;\n\n  /** Data passed into the account along with the nonce during the verification step. */\n  signature: string;\n\n  /** The amount of gas to allocate for the verification step. */\n  verificationGasLimit: string;\n};\n\n/**\n * The possible statuses of a single user operation.\n */\nexport enum UserOperationStatus {\n  Unapproved = 'unapproved',\n  Approved = 'approved',\n  Signed = 'signed',\n  Submitted = 'submitted',\n  Failed = 'failed',\n  Confirmed = 'confirmed',\n}\n\n/** Information concerning an error while creating a user operation. */\nexport type UserOperationError = {\n  /**\n   * A descriptive error name.\n   */\n  name: string;\n\n  /**\n   * A descriptive error message providing details about the encountered error.\n   */\n  message: string;\n\n  /**\n   * The stack trace associated with the error, if available.\n   */\n  stack: string | null;\n\n  /**\n   * An optional error code associated with the error.\n   */\n  code: string | null;\n\n  /**\n   * Additional information related to the error.\n   */\n  rpc: string | null;\n};\n\n/**\n * Metadata concerning a single user operation, stored in the client state.\n */\nexport type UserOperationMetadata = {\n  /** Confirmed total cost of the gas for the user operation. */\n  actualGasCost: string | null;\n\n  /** Confirmed total amount of gas used by the user operation. */\n  actualGasUsed: string | null;\n\n  /** Base fee of the transaction block as a hex value. */\n  baseFeePerGas: string | null;\n\n  /** URL of the bundler that the operation was submitted to. */\n  bundlerUrl: string | null;\n\n  /** Hexadecimal chain ID of the target network. */\n  chainId: string;\n\n  /** An error that occurred while creating the operation. */\n  error: UserOperationError | null;\n\n  /** Hash of the user operation, generated by the bundler. */\n  hash: string | null;\n\n  /** A unique ID used to identify a user operation in the client. */\n  id: string;\n\n  /** The origin of the user operation, such as the hostname of a dApp. */\n  origin: string;\n\n  /** Current status of the user operation. */\n  status: UserOperationStatus;\n\n  /** Metadata specific to swap transactions. */\n  swapsMetadata: SwapsMetadata | null;\n\n  /** Timestamp of when the user operation was created. */\n  time: number;\n\n  /** Hash of the transaction that submitted the user operation to the entrypoint. */\n  transactionHash: string | null;\n\n  /** The initial transaction parameters that the user operation was created from. */\n  transactionParams: Required<TransactionParams> | null;\n\n  /** The type of transaction that the user operation will create. */\n  transactionType: TransactionType | null;\n\n  /** The origin of the gas fee values. */\n  userFeeLevel: UserFeeLevel | null;\n\n  /** Resulting user operation object to be submitted to the bundler. */\n  userOperation: UserOperation;\n};\n\n/**\n * The data provided to the smart contract account when preparing a user operation.\n */\nexport type PrepareUserOperationRequest = {\n  /** The hexadecimal chain ID of the target network. */\n  chainId: string;\n\n  /** The data to include in the resulting transaction.  */\n  data?: string;\n\n  /** Address of the account requesting the user operation. */\n  from: string;\n\n  /** The destination address of the resulting transaction. */\n  to?: string;\n\n  /** The value to send in the resulting transaction. */\n  value?: string;\n};\n\n/**\n * The data provided to the smart contract account when updating a user operation.\n */\nexport type UpdateUserOperationRequest = {\n  /** The user operation to update including the dummy signature and dummy paymasterAndData values. */\n  userOperation: UserOperation;\n\n  /** The hexadecimal chain ID of the target network. */\n  chainId: string;\n};\n\n/**\n * The data provided to the smart contract account when signing a user operation.\n */\nexport type SignUserOperationRequest = {\n  /** The user operation to sign including the dummy signature and final paymasterAndData values. */\n  userOperation: UserOperation;\n\n  /** The hexadecimal chain ID of the target network. */\n  chainId: string;\n};\n\n/**\n * The data returned by the smart contract account when preparing a user operation.\n */\nexport type PrepareUserOperationResponse = {\n  /** The URL of the bundler to submit the user operation to. */\n  bundler: string;\n\n  /** The data to pass to the sender during the main execution call. */\n  callData: string;\n\n  /**\n   * A dummy paymasterAndData value required to estimate gas using the bundler.\n   * Only required if the smart contract account is not providing gas values.\n   */\n  dummyPaymasterAndData?: string;\n\n  /**\n   * A dummy signature value required to estimate gas using the bundler.\n   * Only required if the smart contract account is not providing gas values.\n   */\n  dummySignature?: string;\n\n  /**\n   * The estimated gas limits for the user operation.\n   * Gas is automatically estimated using the bundler if not provided.\n   */\n  gas?: {\n    /** The amount of gas to allocate to the main execution call. */\n    callGasLimit: string;\n\n    /** The amount of gas to pay to compensate the bundler for pre-verification execution, calldata and any gas overhead that cannot be tracked on-chain. */\n    preVerificationGas: string;\n\n    /** The amount of gas to allocate for the verification step. */\n    verificationGasLimit: string;\n  };\n\n  /**\n   * The initCode to include in the user operation.\n   * Required only if the smart contract is not yet deployed.\n   */\n  initCode?: string;\n\n  /**\n   * The nonce to include in the user operation, specific to the smart contract account.\n   */\n  nonce: string;\n\n  /**\n   * The address of the smart contract account creating the user operation.\n   */\n  sender: string;\n};\n\n/**\n * The data returned by the smart contract account when updating a user operation.\n */\nexport type UpdateUserOperationResponse = {\n  /**\n   * The final paymasterAndData to include in the user operation.\n   * Not required if a paymaster is not sponsoring the transaction.\n   */\n  paymasterAndData?: string;\n\n  /**\n   * The final gas limits for the user operation suggested by the smart contract account.\n   * The simulated gas limits may be different after the bundler estimates gas with the use\n   * of the paymaster.\n   */\n  callGasLimit?: string;\n  preVerificationGas?: string;\n  verificationGasLimit?: string;\n};\n\n/**\n * The data returned by the smart contract account when signing a user operation.\n */\nexport type SignUserOperationResponse = {\n  /** The final signature of the user operation. */\n  signature: string;\n};\n\n/**\n * An abstraction to provide smart contract and paymaster specific data when creating a user operation.\n * This will typically communicate with an account snap installed in the client.\n */\nexport type SmartContractAccount = {\n  /**\n   * Retrieve the initial values required to create a user operation.\n   * @param request - The data needed by the smart contract account to provide the initial user operation values.\n   * @returns The initial values required to create a user operation.\n   */\n  prepareUserOperation: (\n    request: PrepareUserOperationRequest,\n  ) => Promise<PrepareUserOperationResponse>;\n\n  /**\n   * Retrieve additional data required to create a user operation, such as the paymasterAndData value.\n   * If gas values were not provided in the prepare response, this will be called after estimating gas using the bundler.\n   * @param request - The data needed by the smart contract account to provide the additional user operation values.\n   * @returns The additional values required to create a user operation.\n   */\n  updateUserOperation: (\n    request: UpdateUserOperationRequest,\n  ) => Promise<UpdateUserOperationResponse>;\n\n  /**\n   * Sign the final user operation.\n   * @param request - The data needed by the smart contract account to generate the signature.\n   * @returns The final values required to sign a user operation.\n   */\n  signUserOperation: (\n    request: SignUserOperationRequest,\n  ) => Promise<SignUserOperationResponse>;\n};\n\n/**\n * Response from the `eth_getUserOperationReceipt` bundler method.\n * Includes the status of a completed user operation and the receipt of the transaction that submitted it.\n */\nexport type UserOperationReceipt = {\n  /** Confirmed total cost of the gas for the user operation. */\n  actualGasCost: Hex | number;\n\n  /** Confirmed total amount of gas used by the user operation. */\n  actualGasUsed: Hex | number;\n\n  /** True if the user operation was successfully confirmed on chain. */\n  success: boolean;\n\n  /** Receipt for the associated transaction. */\n  receipt: {\n    /** Hash of the block the transaction was added to. */\n    blockHash: string;\n\n    /** Hash of the confirmed transaction. */\n    transactionHash: string;\n  };\n};\n\n/** Information specific to user operations created from swap transactions. */\nexport type SwapsMetadata = {\n  /** ID of the associated approval transaction. */\n  approvalTxId: string | null;\n\n  /** Address of the destination token. */\n  destinationTokenAddress: string | null;\n\n  /** Number of decimals of the destination token. */\n  destinationTokenDecimals: number | null;\n\n  /** Symbol of the destination token. */\n  destinationTokenSymbol: string | null;\n\n  /** Amount of the destination token. */\n  destinationTokenAmount: string | null;\n\n  /** Estimated base fee of the swap. */\n  estimatedBaseFee: string | null;\n\n  /** Address of the source token. */\n  sourceTokenAddress: string | null;\n\n  /** Amount of the source token. */\n  sourceTokenAmount: string | null;\n\n  /** Number of decimals of the source token. */\n  sourceTokenDecimals: number | null;\n\n  /** Symbol of the source token. */\n  sourceTokenSymbol: string | null;\n\n  /** Recipient of the swap and send transaction. */\n  swapAndSendRecipient: string | null;\n\n  /** Untyped raw metadata values. */\n  swapMetaData: Record<string, never> | null;\n\n  /** Value of the token being swapped. */\n  swapTokenValue: string | null;\n};\n"]}
\ No newline at end of file
+{"version":3,"file":"types.mjs","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"AA4EA;;GAEG;AACH,MAAM,CAAN,IAAY,mBAOX;AAPD,WAAY,mBAAmB;IAC7B,gDAAyB,CAAA;IACzB,4CAAqB,CAAA;IACrB,wCAAiB,CAAA;IACjB,8CAAuB,CAAA;IACvB,wCAAiB,CAAA;IACjB,8CAAuB,CAAA;AACzB,CAAC,EAPW,mBAAmB,KAAnB,mBAAmB,QAO9B;AAsTD,MAAM,CAAN,IAAY,WAGX;AAHD,WAAY,WAAW;IACrB,2BAAY,CAAA;IACZ,2BAAY,CAAA;AACd,CAAC,EAHW,WAAW,KAAX,WAAW,QAGtB","sourcesContent":["import type {\n  TransactionParams,\n  TransactionType,\n  UserFeeLevel,\n} from '@metamask/transaction-controller';\nimport type { Hex } from '@metamask/utils';\n\n/**\n * Common properties in all versions of the user operation.\n * Defined in EIP-4337.\n */\nexport type UserOperationBase = {\n  /** The data to pass to the sender during the main execution call. */\n  callData: string;\n\n  /** The amount of gas to allocate the main execution call. */\n  callGasLimit: string;\n\n  /**\n   * Maximum fee per gas.\n   * Similar to EIP-1559 max_fee_per_gas.\n   */\n  maxFeePerGas: string;\n\n  /**\n   * Maximum priority fee per gas.\n   * Similar to EIP-1559 max_priority_fee_per_gas.\n   */\n  maxPriorityFeePerGas: string;\n\n  /** Anti-replay parameter. */\n  nonce: string;\n\n  /**\n   * Address of paymaster sponsoring the transaction, followed by extra data to send to the paymaster.\n   * Empty for self-sponsored transactions.\n   */\n  paymasterAndData: string;\n\n  /** The amount of gas to pay to compensate the bundler for pre-verification execution, calldata and any gas overhead that cannot be tracked on-chain. */\n  preVerificationGas: string;\n\n  /** The account making the operation. */\n  sender: string;\n\n  /** Data passed into the account along with the nonce during the verification step. */\n  signature: string;\n\n  /** The amount of gas to allocate for the verification step. */\n  verificationGasLimit: string;\n};\n\n/**\n * A complete user operation to be submitted to a bundler.\n * Defined in EIP-4337 according to version V0.6.\n */\nexport type UserOperation = UserOperationBase & {\n  /**\n   * The initCode of the account.\n   * Needed if and only if the account is not yet on-chain and needs to be created.\n   */\n  initCode: string;\n};\n\n/**\n * A complete user operation to be submitted to a bundler.\n * Defined in EIP-4337 according to version V0.7.\n */\nexport type UserOperationV07 = UserOperationBase & {\n  /** Address of the account factory contract. */\n  factory: string;\n\n  /** Data required for the account factory contract to create a new account. */\n  factoryData: string;\n};\n\n/**\n * The possible statuses of a single user operation.\n */\nexport enum UserOperationStatus {\n  Unapproved = 'unapproved',\n  Approved = 'approved',\n  Signed = 'signed',\n  Submitted = 'submitted',\n  Failed = 'failed',\n  Confirmed = 'confirmed',\n}\n\n/** Information concerning an error while creating a user operation. */\nexport type UserOperationError = {\n  /**\n   * A descriptive error name.\n   */\n  name: string;\n\n  /**\n   * A descriptive error message providing details about the encountered error.\n   */\n  message: string;\n\n  /**\n   * The stack trace associated with the error, if available.\n   */\n  stack: string | null;\n\n  /**\n   * An optional error code associated with the error.\n   */\n  code: string | null;\n\n  /**\n   * Additional information related to the error.\n   */\n  rpc: string | null;\n};\n\n/**\n * Metadata concerning a single user operation, stored in the client state.\n */\nexport type UserOperationMetadata = {\n  /** Confirmed total cost of the gas for the user operation. */\n  actualGasCost: string | null;\n\n  /** Confirmed total amount of gas used by the user operation. */\n  actualGasUsed: string | null;\n\n  /** Base fee of the transaction block as a hex value. */\n  baseFeePerGas: string | null;\n\n  /** URL of the bundler that the operation was submitted to. */\n  bundlerUrl: string | null;\n\n  /** Hexadecimal chain ID of the target network. */\n  chainId: string;\n\n  /** An error that occurred while creating the operation. */\n  error: UserOperationError | null;\n\n  /** Hash of the user operation, generated by the bundler. */\n  hash: string | null;\n\n  /** A unique ID used to identify a user operation in the client. */\n  id: string;\n\n  /** The origin of the user operation, such as the hostname of a dApp. */\n  origin: string;\n\n  /** Current status of the user operation. */\n  status: UserOperationStatus;\n\n  /** Metadata specific to swap transactions. */\n  swapsMetadata: SwapsMetadata | null;\n\n  /** Timestamp of when the user operation was created. */\n  time: number;\n\n  /** Hash of the transaction that submitted the user operation to the entrypoint. */\n  transactionHash: string | null;\n\n  /** The initial transaction parameters that the user operation was created from. */\n  transactionParams: Required<TransactionParams> | null;\n\n  /** The type of transaction that the user operation will create. */\n  transactionType: TransactionType | null;\n\n  /** The origin of the gas fee values. */\n  userFeeLevel: UserFeeLevel | null;\n\n  /** Resulting user operation object to be submitted to the bundler. */\n  userOperation: UserOperation;\n};\n\n/**\n * The data provided to the smart contract account when preparing a user operation.\n */\nexport type PrepareUserOperationRequest = {\n  /** The hexadecimal chain ID of the target network. */\n  chainId: string;\n\n  /** The data to include in the resulting transaction.  */\n  data?: string;\n\n  /** Address of the account requesting the user operation. */\n  from: string;\n\n  /** The destination address of the resulting transaction. */\n  to?: string;\n\n  /** The value to send in the resulting transaction. */\n  value?: string;\n};\n\n/**\n * The data provided to the smart contract account when updating a user operation.\n */\nexport type UpdateUserOperationRequest = {\n  /** The user operation to update including the dummy signature and dummy paymasterAndData values. */\n  userOperation: UserOperation;\n\n  /** The hexadecimal chain ID of the target network. */\n  chainId: string;\n};\n\n/**\n * The data provided to the smart contract account when signing a user operation.\n */\nexport type SignUserOperationRequest = {\n  /** The user operation to sign including the dummy signature and final paymasterAndData values. */\n  userOperation: UserOperation;\n\n  /** The hexadecimal chain ID of the target network. */\n  chainId: string;\n};\n\n/**\n * The data returned by the smart contract account when preparing a user operation.\n */\nexport type PrepareUserOperationResponse = {\n  /** The URL of the bundler to submit the user operation to. */\n  bundler: string;\n\n  /** The data to pass to the sender during the main execution call. */\n  callData: string;\n\n  /**\n   * A dummy paymasterAndData value required to estimate gas using the bundler.\n   * Only required if the smart contract account is not providing gas values.\n   */\n  dummyPaymasterAndData?: string;\n\n  /**\n   * A dummy signature value required to estimate gas using the bundler.\n   * Only required if the smart contract account is not providing gas values.\n   */\n  dummySignature?: string;\n\n  /**\n   * The estimated gas limits for the user operation.\n   * Gas is automatically estimated using the bundler if not provided.\n   */\n  gas?: {\n    /** The amount of gas to allocate to the main execution call. */\n    callGasLimit: string;\n\n    /** The amount of gas to pay to compensate the bundler for pre-verification execution, calldata and any gas overhead that cannot be tracked on-chain. */\n    preVerificationGas: string;\n\n    /** The amount of gas to allocate for the verification step. */\n    verificationGasLimit: string;\n  };\n\n  /**\n   * The initCode to include in the user operation.\n   * Required only if the smart contract is not yet deployed.\n   */\n  initCode?: string;\n\n  /**\n   * The nonce to include in the user operation, specific to the smart contract account.\n   */\n  nonce: string;\n\n  /**\n   * The address of the smart contract account creating the user operation.\n   */\n  sender: string;\n};\n\n/**\n * The data returned by the smart contract account when updating a user operation.\n */\nexport type UpdateUserOperationResponse = {\n  /**\n   * The final paymasterAndData to include in the user operation.\n   * Not required if a paymaster is not sponsoring the transaction.\n   */\n  paymasterAndData?: string;\n\n  /**\n   * The final gas limits for the user operation suggested by the smart contract account.\n   * The simulated gas limits may be different after the bundler estimates gas with the use\n   * of the paymaster.\n   */\n  callGasLimit?: string;\n  preVerificationGas?: string;\n  verificationGasLimit?: string;\n};\n\n/**\n * The data returned by the smart contract account when signing a user operation.\n */\nexport type SignUserOperationResponse = {\n  /** The final signature of the user operation. */\n  signature: string;\n};\n\n/**\n * An abstraction to provide smart contract and paymaster specific data when creating a user operation.\n * This will typically communicate with an account snap installed in the client.\n */\nexport type SmartContractAccount = {\n  /**\n   * Retrieve the initial values required to create a user operation.\n   * @param request - The data needed by the smart contract account to provide the initial user operation values.\n   * @returns The initial values required to create a user operation.\n   */\n  prepareUserOperation: (\n    request: PrepareUserOperationRequest,\n  ) => Promise<PrepareUserOperationResponse>;\n\n  /**\n   * Retrieve additional data required to create a user operation, such as the paymasterAndData value.\n   * If gas values were not provided in the prepare response, this will be called after estimating gas using the bundler.\n   * @param request - The data needed by the smart contract account to provide the additional user operation values.\n   * @returns The additional values required to create a user operation.\n   */\n  updateUserOperation: (\n    request: UpdateUserOperationRequest,\n  ) => Promise<UpdateUserOperationResponse>;\n\n  /**\n   * Sign the final user operation.\n   * @param request - The data needed by the smart contract account to generate the signature.\n   * @returns The final values required to sign a user operation.\n   */\n  signUserOperation: (\n    request: SignUserOperationRequest,\n  ) => Promise<SignUserOperationResponse>;\n};\n\n/**\n * Response from the `eth_getUserOperationReceipt` bundler method.\n * Includes the status of a completed user operation and the receipt of the transaction that submitted it.\n */\nexport type UserOperationReceipt = {\n  /** Confirmed total cost of the gas for the user operation. */\n  actualGasCost: Hex | number;\n\n  /** Confirmed total amount of gas used by the user operation. */\n  actualGasUsed: Hex | number;\n\n  /** True if the user operation was successfully confirmed on chain. */\n  success: boolean;\n\n  /** Receipt for the associated transaction. */\n  receipt: {\n    /** Hash of the block the transaction was added to. */\n    blockHash: string;\n\n    /** Hash of the confirmed transaction. */\n    transactionHash: string;\n  };\n};\n\n/** Information specific to user operations created from swap transactions. */\nexport type SwapsMetadata = {\n  /** ID of the associated approval transaction. */\n  approvalTxId: string | null;\n\n  /** Address of the destination token. */\n  destinationTokenAddress: string | null;\n\n  /** Number of decimals of the destination token. */\n  destinationTokenDecimals: number | null;\n\n  /** Symbol of the destination token. */\n  destinationTokenSymbol: string | null;\n\n  /** Amount of the destination token. */\n  destinationTokenAmount: string | null;\n\n  /** Estimated base fee of the swap. */\n  estimatedBaseFee: string | null;\n\n  /** Address of the source token. */\n  sourceTokenAddress: string | null;\n\n  /** Amount of the source token. */\n  sourceTokenAmount: string | null;\n\n  /** Number of decimals of the source token. */\n  sourceTokenDecimals: number | null;\n\n  /** Symbol of the source token. */\n  sourceTokenSymbol: string | null;\n\n  /** Recipient of the swap and send transaction. */\n  swapAndSendRecipient: string | null;\n\n  /** Untyped raw metadata values. */\n  swapMetaData: Record<string, never> | null;\n\n  /** Value of the token being swapped. */\n  swapTokenValue: string | null;\n};\n\nexport enum Version4337 {\n  V06 = 'V0.6',\n  V07 = 'V0.7',\n}\n"]}
\ No newline at end of file
diff --git a/dist/utils/compatability.cjs b/dist/utils/compatability.cjs
new file mode 100644
index 0000000000000000000000000000000000000000..c8573403842f6744dd828c735b707536385afafb
--- /dev/null
+++ b/dist/utils/compatability.cjs
@@ -0,0 +1,17 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.toUserOperationV07 = void 0;
+const utils_1 = require("@metamask/utils");
+// eslint-disable-next-line jsdoc/require-jsdoc
+function toUserOperationV07(userOperation) {
+    const newUserOperation = { ...userOperation };
+    if (userOperation.initCode && userOperation.initCode !== '0x') {
+        newUserOperation.factory = userOperation.initCode.slice(0, 42);
+        newUserOperation.factoryData = (0, utils_1.add0x)(userOperation.initCode.slice(42));
+        // eslint-disable-next-line @typescript-eslint/no-explicit-any
+        delete newUserOperation.initCode;
+    }
+    return newUserOperation;
+}
+exports.toUserOperationV07 = toUserOperationV07;
+//# sourceMappingURL=compatability.cjs.map
\ No newline at end of file
diff --git a/dist/utils/compatability.cjs.map b/dist/utils/compatability.cjs.map
new file mode 100644
index 0000000000000000000000000000000000000000..691ffe6612e8c87f4bb1c4a5a467244cad9ad071
--- /dev/null
+++ b/dist/utils/compatability.cjs.map
@@ -0,0 +1 @@
+{"version":3,"file":"compatability.cjs","sourceRoot":"","sources":["../../src/utils/compatability.ts"],"names":[],"mappings":";;;AAAA,2CAAwC;AAIxC,+CAA+C;AAC/C,SAAgB,kBAAkB,CAChC,aAA4B;IAE5B,MAAM,gBAAgB,GAAG,EAAE,GAAG,aAAa,EAAiC,CAAC;IAE7E,IAAI,aAAa,CAAC,QAAQ,IAAI,aAAa,CAAC,QAAQ,KAAK,IAAI,EAAE;QAC7D,gBAAgB,CAAC,OAAO,GAAG,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QAC/D,gBAAgB,CAAC,WAAW,GAAG,IAAA,aAAK,EAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;QAEvE,8DAA8D;QAC9D,OAAQ,gBAAwB,CAAC,QAAQ,CAAC;KAC3C;IAED,OAAO,gBAAgB,CAAC;AAC1B,CAAC;AAdD,gDAcC","sourcesContent":["import { add0x } from '@metamask/utils';\n\nimport type { UserOperation, UserOperationV07 } from '../types';\n\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport function toUserOperationV07(\n  userOperation: UserOperation,\n): UserOperationV07 {\n  const newUserOperation = { ...userOperation } as unknown as UserOperationV07;\n\n  if (userOperation.initCode && userOperation.initCode !== '0x') {\n    newUserOperation.factory = userOperation.initCode.slice(0, 42);\n    newUserOperation.factoryData = add0x(userOperation.initCode.slice(42));\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    delete (newUserOperation as any).initCode;\n  }\n\n  return newUserOperation;\n}\n"]}
\ No newline at end of file
diff --git a/dist/utils/compatability.d.cts b/dist/utils/compatability.d.cts
new file mode 100644
index 0000000000000000000000000000000000000000..58bce1c7b8923d0536681503de5a45e79a7975ea
--- /dev/null
+++ b/dist/utils/compatability.d.cts
@@ -0,0 +1,3 @@
+import type { UserOperation, UserOperationV07 } from "../types.cjs";
+export declare function toUserOperationV07(userOperation: UserOperation): UserOperationV07;
+//# sourceMappingURL=compatability.d.cts.map
\ No newline at end of file
diff --git a/dist/utils/compatability.d.cts.map b/dist/utils/compatability.d.cts.map
new file mode 100644
index 0000000000000000000000000000000000000000..78ab951590f8d73b95cb56bc6699d3c25d1b0698
--- /dev/null
+++ b/dist/utils/compatability.d.cts.map
@@ -0,0 +1 @@
+{"version":3,"file":"compatability.d.cts","sourceRoot":"","sources":["../../src/utils/compatability.ts"],"names":[],"mappings":"AAEA,OAAO,KAAK,EAAE,aAAa,EAAE,gBAAgB,EAAE,qBAAiB;AAGhE,wBAAgB,kBAAkB,CAChC,aAAa,EAAE,aAAa,GAC3B,gBAAgB,CAYlB"}
\ No newline at end of file
diff --git a/dist/utils/compatability.d.mts b/dist/utils/compatability.d.mts
new file mode 100644
index 0000000000000000000000000000000000000000..c1006e99b7f5701fa445e6eaa8d18f9eeb93289f
--- /dev/null
+++ b/dist/utils/compatability.d.mts
@@ -0,0 +1,3 @@
+import type { UserOperation, UserOperationV07 } from "../types.mjs";
+export declare function toUserOperationV07(userOperation: UserOperation): UserOperationV07;
+//# sourceMappingURL=compatability.d.mts.map
\ No newline at end of file
diff --git a/dist/utils/compatability.d.mts.map b/dist/utils/compatability.d.mts.map
new file mode 100644
index 0000000000000000000000000000000000000000..3803dfe3268f1c2dc7dda0cbb4088f97bc73a9a6
--- /dev/null
+++ b/dist/utils/compatability.d.mts.map
@@ -0,0 +1 @@
+{"version":3,"file":"compatability.d.mts","sourceRoot":"","sources":["../../src/utils/compatability.ts"],"names":[],"mappings":"AAEA,OAAO,KAAK,EAAE,aAAa,EAAE,gBAAgB,EAAE,qBAAiB;AAGhE,wBAAgB,kBAAkB,CAChC,aAAa,EAAE,aAAa,GAC3B,gBAAgB,CAYlB"}
\ No newline at end of file
diff --git a/dist/utils/compatability.mjs b/dist/utils/compatability.mjs
new file mode 100644
index 0000000000000000000000000000000000000000..16fd1a03121e89e37d93bf7275c78d81459db6da
--- /dev/null
+++ b/dist/utils/compatability.mjs
@@ -0,0 +1,13 @@
+import { add0x } from "@metamask/utils";
+// eslint-disable-next-line jsdoc/require-jsdoc
+export function toUserOperationV07(userOperation) {
+    const newUserOperation = { ...userOperation };
+    if (userOperation.initCode && userOperation.initCode !== '0x') {
+        newUserOperation.factory = userOperation.initCode.slice(0, 42);
+        newUserOperation.factoryData = add0x(userOperation.initCode.slice(42));
+        // eslint-disable-next-line @typescript-eslint/no-explicit-any
+        delete newUserOperation.initCode;
+    }
+    return newUserOperation;
+}
+//# sourceMappingURL=compatability.mjs.map
\ No newline at end of file
diff --git a/dist/utils/compatability.mjs.map b/dist/utils/compatability.mjs.map
new file mode 100644
index 0000000000000000000000000000000000000000..99b50c87477436f0f19f779e9548f5c259861d1a
--- /dev/null
+++ b/dist/utils/compatability.mjs.map
@@ -0,0 +1 @@
+{"version":3,"file":"compatability.mjs","sourceRoot":"","sources":["../../src/utils/compatability.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,wBAAwB;AAIxC,+CAA+C;AAC/C,MAAM,UAAU,kBAAkB,CAChC,aAA4B;IAE5B,MAAM,gBAAgB,GAAG,EAAE,GAAG,aAAa,EAAiC,CAAC;IAE7E,IAAI,aAAa,CAAC,QAAQ,IAAI,aAAa,CAAC,QAAQ,KAAK,IAAI,EAAE;QAC7D,gBAAgB,CAAC,OAAO,GAAG,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QAC/D,gBAAgB,CAAC,WAAW,GAAG,KAAK,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;QAEvE,8DAA8D;QAC9D,OAAQ,gBAAwB,CAAC,QAAQ,CAAC;KAC3C;IAED,OAAO,gBAAgB,CAAC;AAC1B,CAAC","sourcesContent":["import { add0x } from '@metamask/utils';\n\nimport type { UserOperation, UserOperationV07 } from '../types';\n\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport function toUserOperationV07(\n  userOperation: UserOperation,\n): UserOperationV07 {\n  const newUserOperation = { ...userOperation } as unknown as UserOperationV07;\n\n  if (userOperation.initCode && userOperation.initCode !== '0x') {\n    newUserOperation.factory = userOperation.initCode.slice(0, 42);\n    newUserOperation.factoryData = add0x(userOperation.initCode.slice(42));\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    delete (newUserOperation as any).initCode;\n  }\n\n  return newUserOperation;\n}\n"]}
\ No newline at end of file
diff --git a/dist/utils/gas.cjs b/dist/utils/gas.cjs
index 7efb1f758616f8a9e2136026e9d8593306513d0a..61b0da5e3e7ce3e156a814499930485e23cb632e 100644
--- a/dist/utils/gas.cjs
+++ b/dist/utils/gas.cjs
@@ -20,8 +20,9 @@ const GAS_ESTIMATE_MULTIPLIER = 1.5;
  * @param metadata - The metadata for the user operation.
  * @param prepareResponse - The prepare response from the smart contract account.
  * @param entrypoint - Address of the entrypoint contract.
+ * @param version - The version of the user operation.
  */
-async function updateGas(metadata, prepareResponse, entrypoint) {
+async function updateGas(metadata, prepareResponse, entrypoint, version) {
     const { userOperation } = metadata;
     if (prepareResponse.gas) {
         userOperation.callGasLimit = prepareResponse.gas.callGasLimit;
@@ -43,7 +44,7 @@ async function updateGas(metadata, prepareResponse, entrypoint) {
         preVerificationGas: constants_1.VALUE_ZERO,
         verificationGasLimit: '0xF4240',
     };
-    const bundler = new Bundler_1.Bundler(metadata.bundlerUrl);
+    const bundler = new Bundler_1.Bundler({ url: metadata.bundlerUrl, version });
     const estimate = await bundler.estimateUserOperationGas(payload, entrypoint);
     userOperation.callGasLimit = normalizeGasEstimate(estimate.callGasLimit);
     userOperation.preVerificationGas = normalizeGasEstimate(estimate.preVerificationGas);
diff --git a/dist/utils/gas.cjs.map b/dist/utils/gas.cjs.map
index 542a213500cc8ba7c30696473aec90b2824af5d5..f66acce53614a2fd1a99aa1856e644d27582aa5f 100644
--- a/dist/utils/gas.cjs.map
+++ b/dist/utils/gas.cjs.map
@@ -1 +1 @@
-{"version":3,"file":"gas.cjs","sourceRoot":"","sources":["../../src/utils/gas.ts"],"names":[],"mappings":";;;;;;AAAA,iEAAqD;AACrD,2CAAwC;AACxC,kDAAuB;AAEvB,gDAA0C;AAC1C,oDAA6C;AAC7C,0CAA8D;AAM9D,MAAM,GAAG,GAAG,IAAA,2BAAkB,EAAC,sBAAa,EAAE,KAAK,CAAC,CAAC;AAErD;;GAEG;AACH,MAAM,uBAAuB,GAAG,GAAG,CAAC;AAEpC;;;;;GAKG;AACI,KAAK,UAAU,SAAS,CAC7B,QAA+B,EAC/B,eAA6C,EAC7C,UAAkB;IAElB,MAAM,EAAE,aAAa,EAAE,GAAG,QAAQ,CAAC;IAEnC,IAAI,eAAe,CAAC,GAAG,EAAE;QACvB,aAAa,CAAC,YAAY,GAAG,eAAe,CAAC,GAAG,CAAC,YAAY,CAAC;QAC9D,aAAa,CAAC,kBAAkB,GAAG,eAAe,CAAC,GAAG,CAAC,kBAAkB,CAAC;QAC1E,aAAa,CAAC,oBAAoB;YAChC,eAAe,CAAC,GAAG,CAAC,oBAAoB,CAAC;QAE3C,GAAG,CAAC,8CAA8C,EAAE;YAClD,YAAY,EAAE,aAAa,CAAC,YAAY;YACxC,kBAAkB,EAAE,aAAa,CAAC,kBAAkB;YACpD,oBAAoB,EAAE,aAAa,CAAC,oBAAoB;SACzD,CAAC,CAAC;QAEH,OAAO;KACR;IAED,MAAM,OAAO,GAAG;QACd,GAAG,aAAa;QAChB,YAAY,EAAE,sBAAU;QACxB,oBAAoB,EAAE,sBAAU;QAChC,YAAY,EAAE,sBAAU;QACxB,kBAAkB,EAAE,sBAAU;QAC9B,oBAAoB,EAAE,SAAS;KAChC,CAAC;IAEF,MAAM,OAAO,GAAG,IAAI,iBAAO,CAAC,QAAQ,CAAC,UAAoB,CAAC,CAAC;IAC3D,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,wBAAwB,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;IAE7E,aAAa,CAAC,YAAY,GAAG,oBAAoB,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;IACzE,aAAa,CAAC,kBAAkB,GAAG,oBAAoB,CACrD,QAAQ,CAAC,kBAAkB,CAC5B,CAAC;IACF,aAAa,CAAC,oBAAoB,GAAG,oBAAoB,CACvD,CAAC,QAAQ,CAAC,oBAAoB,IAAI,QAAQ,CAAC,eAAe,CAEhD,CACX,CAAC;IAEF,GAAG,CAAC,iDAAiD,EAAE;QACrD,YAAY,EAAE,aAAa,CAAC,YAAY;QACxC,kBAAkB,EAAE,aAAa,CAAC,kBAAkB;QACpD,oBAAoB,EAAE,aAAa,CAAC,oBAAoB;QACxD,UAAU,EAAE,uBAAuB;QACnC,QAAQ;KACT,CAAC,CAAC;AACL,CAAC;AAnDD,8BAmDC;AAED;;;;GAIG;AACH,SAAS,oBAAoB,CAAC,QAAyB;IACrD,MAAM,KAAK,GACT,OAAO,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAA,0BAAO,EAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,eAAE,CAAC,QAAQ,CAAC,CAAC;IAEtE,MAAM,aAAa,GAAG,KAAK,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;IAE1D,OAAO,IAAA,aAAK,EAAC,aAAa,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;AAC3C,CAAC","sourcesContent":["import { hexToBN } from '@metamask/controller-utils';\nimport { add0x } from '@metamask/utils';\nimport BN from 'bn.js';\n\nimport { VALUE_ZERO } from '../constants';\nimport { Bundler } from '../helpers/Bundler';\nimport { createModuleLogger, projectLogger } from '../logger';\nimport type {\n  PrepareUserOperationResponse,\n  UserOperationMetadata,\n} from '../types';\n\nconst log = createModuleLogger(projectLogger, 'gas');\n\n/**\n * A multiplier to apply to all gas estimate values returned from the bundler.\n */\nconst GAS_ESTIMATE_MULTIPLIER = 1.5;\n\n/**\n * Populates the gas properties for a user operation.\n * @param metadata - The metadata for the user operation.\n * @param prepareResponse - The prepare response from the smart contract account.\n * @param entrypoint - Address of the entrypoint contract.\n */\nexport async function updateGas(\n  metadata: UserOperationMetadata,\n  prepareResponse: PrepareUserOperationResponse,\n  entrypoint: string,\n) {\n  const { userOperation } = metadata;\n\n  if (prepareResponse.gas) {\n    userOperation.callGasLimit = prepareResponse.gas.callGasLimit;\n    userOperation.preVerificationGas = prepareResponse.gas.preVerificationGas;\n    userOperation.verificationGasLimit =\n      prepareResponse.gas.verificationGasLimit;\n\n    log('Using gas values from smart contract account', {\n      callGasLimit: userOperation.callGasLimit,\n      preVerificationGas: userOperation.preVerificationGas,\n      verificationGasLimit: userOperation.verificationGasLimit,\n    });\n\n    return;\n  }\n\n  const payload = {\n    ...userOperation,\n    maxFeePerGas: VALUE_ZERO,\n    maxPriorityFeePerGas: VALUE_ZERO,\n    callGasLimit: VALUE_ZERO,\n    preVerificationGas: VALUE_ZERO,\n    verificationGasLimit: '0xF4240',\n  };\n\n  const bundler = new Bundler(metadata.bundlerUrl as string);\n  const estimate = await bundler.estimateUserOperationGas(payload, entrypoint);\n\n  userOperation.callGasLimit = normalizeGasEstimate(estimate.callGasLimit);\n  userOperation.preVerificationGas = normalizeGasEstimate(\n    estimate.preVerificationGas,\n  );\n  userOperation.verificationGasLimit = normalizeGasEstimate(\n    (estimate.verificationGasLimit ?? estimate.verificationGas) as\n      | string\n      | number,\n  );\n\n  log('Using buffered gas values from bundler estimate', {\n    callGasLimit: userOperation.callGasLimit,\n    preVerificationGas: userOperation.preVerificationGas,\n    verificationGasLimit: userOperation.verificationGasLimit,\n    multiplier: GAS_ESTIMATE_MULTIPLIER,\n    estimate,\n  });\n}\n\n/**\n * Normalizes a gas estimate value from the bundler.\n * @param rawValue - The raw value to normalize.\n * @returns The normalized value as a hexadecimal string.\n */\nfunction normalizeGasEstimate(rawValue: string | number): string {\n  const value =\n    typeof rawValue === 'string' ? hexToBN(rawValue) : new BN(rawValue);\n\n  const bufferedValue = value.muln(GAS_ESTIMATE_MULTIPLIER);\n\n  return add0x(bufferedValue.toString(16));\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"gas.cjs","sourceRoot":"","sources":["../../src/utils/gas.ts"],"names":[],"mappings":";;;;;;AAAA,iEAAqD;AACrD,2CAAwC;AACxC,kDAAuB;AAEvB,gDAA0C;AAC1C,oDAA6C;AAC7C,0CAA8D;AAO9D,MAAM,GAAG,GAAG,IAAA,2BAAkB,EAAC,sBAAa,EAAE,KAAK,CAAC,CAAC;AAErD;;GAEG;AACH,MAAM,uBAAuB,GAAG,GAAG,CAAC;AAEpC;;;;;;GAMG;AACI,KAAK,UAAU,SAAS,CAC7B,QAA+B,EAC/B,eAA6C,EAC7C,UAAkB,EAClB,OAAoB;IAEpB,MAAM,EAAE,aAAa,EAAE,GAAG,QAAQ,CAAC;IAEnC,IAAI,eAAe,CAAC,GAAG,EAAE;QACvB,aAAa,CAAC,YAAY,GAAG,eAAe,CAAC,GAAG,CAAC,YAAY,CAAC;QAC9D,aAAa,CAAC,kBAAkB,GAAG,eAAe,CAAC,GAAG,CAAC,kBAAkB,CAAC;QAC1E,aAAa,CAAC,oBAAoB;YAChC,eAAe,CAAC,GAAG,CAAC,oBAAoB,CAAC;QAE3C,GAAG,CAAC,8CAA8C,EAAE;YAClD,YAAY,EAAE,aAAa,CAAC,YAAY;YACxC,kBAAkB,EAAE,aAAa,CAAC,kBAAkB;YACpD,oBAAoB,EAAE,aAAa,CAAC,oBAAoB;SACzD,CAAC,CAAC;QAEH,OAAO;KACR;IAED,MAAM,OAAO,GAAG;QACd,GAAG,aAAa;QAChB,YAAY,EAAE,sBAAU;QACxB,oBAAoB,EAAE,sBAAU;QAChC,YAAY,EAAE,sBAAU;QACxB,kBAAkB,EAAE,sBAAU;QAC9B,oBAAoB,EAAE,SAAS;KAChC,CAAC;IAEF,MAAM,OAAO,GAAG,IAAI,iBAAO,CAAC,EAAE,GAAG,EAAE,QAAQ,CAAC,UAAoB,EAAE,OAAO,EAAE,CAAC,CAAC;IAC7E,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,wBAAwB,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;IAE7E,aAAa,CAAC,YAAY,GAAG,oBAAoB,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;IACzE,aAAa,CAAC,kBAAkB,GAAG,oBAAoB,CACrD,QAAQ,CAAC,kBAAkB,CAC5B,CAAC;IACF,aAAa,CAAC,oBAAoB,GAAG,oBAAoB,CACvD,CAAC,QAAQ,CAAC,oBAAoB,IAAI,QAAQ,CAAC,eAAe,CAEhD,CACX,CAAC;IAEF,GAAG,CAAC,iDAAiD,EAAE;QACrD,YAAY,EAAE,aAAa,CAAC,YAAY;QACxC,kBAAkB,EAAE,aAAa,CAAC,kBAAkB;QACpD,oBAAoB,EAAE,aAAa,CAAC,oBAAoB;QACxD,UAAU,EAAE,uBAAuB;QACnC,QAAQ;KACT,CAAC,CAAC;AACL,CAAC;AApDD,8BAoDC;AAED;;;;GAIG;AACH,SAAS,oBAAoB,CAAC,QAAyB;IACrD,MAAM,KAAK,GACT,OAAO,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAA,0BAAO,EAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,eAAE,CAAC,QAAQ,CAAC,CAAC;IAEtE,MAAM,aAAa,GAAG,KAAK,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;IAE1D,OAAO,IAAA,aAAK,EAAC,aAAa,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;AAC3C,CAAC","sourcesContent":["import { hexToBN } from '@metamask/controller-utils';\nimport { add0x } from '@metamask/utils';\nimport BN from 'bn.js';\n\nimport { VALUE_ZERO } from '../constants';\nimport { Bundler } from '../helpers/Bundler';\nimport { createModuleLogger, projectLogger } from '../logger';\nimport type {\n  PrepareUserOperationResponse,\n  UserOperationMetadata,\n  Version4337,\n} from '../types';\n\nconst log = createModuleLogger(projectLogger, 'gas');\n\n/**\n * A multiplier to apply to all gas estimate values returned from the bundler.\n */\nconst GAS_ESTIMATE_MULTIPLIER = 1.5;\n\n/**\n * Populates the gas properties for a user operation.\n * @param metadata - The metadata for the user operation.\n * @param prepareResponse - The prepare response from the smart contract account.\n * @param entrypoint - Address of the entrypoint contract.\n * @param version - The version of the user operation.\n */\nexport async function updateGas(\n  metadata: UserOperationMetadata,\n  prepareResponse: PrepareUserOperationResponse,\n  entrypoint: string,\n  version: Version4337,\n) {\n  const { userOperation } = metadata;\n\n  if (prepareResponse.gas) {\n    userOperation.callGasLimit = prepareResponse.gas.callGasLimit;\n    userOperation.preVerificationGas = prepareResponse.gas.preVerificationGas;\n    userOperation.verificationGasLimit =\n      prepareResponse.gas.verificationGasLimit;\n\n    log('Using gas values from smart contract account', {\n      callGasLimit: userOperation.callGasLimit,\n      preVerificationGas: userOperation.preVerificationGas,\n      verificationGasLimit: userOperation.verificationGasLimit,\n    });\n\n    return;\n  }\n\n  const payload = {\n    ...userOperation,\n    maxFeePerGas: VALUE_ZERO,\n    maxPriorityFeePerGas: VALUE_ZERO,\n    callGasLimit: VALUE_ZERO,\n    preVerificationGas: VALUE_ZERO,\n    verificationGasLimit: '0xF4240',\n  };\n\n  const bundler = new Bundler({ url: metadata.bundlerUrl as string, version });\n  const estimate = await bundler.estimateUserOperationGas(payload, entrypoint);\n\n  userOperation.callGasLimit = normalizeGasEstimate(estimate.callGasLimit);\n  userOperation.preVerificationGas = normalizeGasEstimate(\n    estimate.preVerificationGas,\n  );\n  userOperation.verificationGasLimit = normalizeGasEstimate(\n    (estimate.verificationGasLimit ?? estimate.verificationGas) as\n      | string\n      | number,\n  );\n\n  log('Using buffered gas values from bundler estimate', {\n    callGasLimit: userOperation.callGasLimit,\n    preVerificationGas: userOperation.preVerificationGas,\n    verificationGasLimit: userOperation.verificationGasLimit,\n    multiplier: GAS_ESTIMATE_MULTIPLIER,\n    estimate,\n  });\n}\n\n/**\n * Normalizes a gas estimate value from the bundler.\n * @param rawValue - The raw value to normalize.\n * @returns The normalized value as a hexadecimal string.\n */\nfunction normalizeGasEstimate(rawValue: string | number): string {\n  const value =\n    typeof rawValue === 'string' ? hexToBN(rawValue) : new BN(rawValue);\n\n  const bufferedValue = value.muln(GAS_ESTIMATE_MULTIPLIER);\n\n  return add0x(bufferedValue.toString(16));\n}\n"]}
\ No newline at end of file
diff --git a/dist/utils/gas.d.cts b/dist/utils/gas.d.cts
index c77ccce9dcf46d60f18f094bd457f46d0a2dcd5e..24b4845bbc471600f18921f998d759766a7331af 100644
--- a/dist/utils/gas.d.cts
+++ b/dist/utils/gas.d.cts
@@ -1,9 +1,10 @@
-import type { PrepareUserOperationResponse, UserOperationMetadata } from "../types.cjs";
+import type { PrepareUserOperationResponse, UserOperationMetadata, Version4337 } from "../types.cjs";
 /**
  * Populates the gas properties for a user operation.
  * @param metadata - The metadata for the user operation.
  * @param prepareResponse - The prepare response from the smart contract account.
  * @param entrypoint - Address of the entrypoint contract.
+ * @param version - The version of the user operation.
  */
-export declare function updateGas(metadata: UserOperationMetadata, prepareResponse: PrepareUserOperationResponse, entrypoint: string): Promise<void>;
+export declare function updateGas(metadata: UserOperationMetadata, prepareResponse: PrepareUserOperationResponse, entrypoint: string, version: Version4337): Promise<void>;
 //# sourceMappingURL=gas.d.cts.map
\ No newline at end of file
diff --git a/dist/utils/gas.d.cts.map b/dist/utils/gas.d.cts.map
index 2f0409af00daffcc18145bd02f322455bb6b2e4e..9ccb4a890b509055812cb7f37c6b54f8417ae75f 100644
--- a/dist/utils/gas.d.cts.map
+++ b/dist/utils/gas.d.cts.map
@@ -1 +1 @@
-{"version":3,"file":"gas.d.cts","sourceRoot":"","sources":["../../src/utils/gas.ts"],"names":[],"mappings":"AAOA,OAAO,KAAK,EACV,4BAA4B,EAC5B,qBAAqB,EACtB,qBAAiB;AASlB;;;;;GAKG;AACH,wBAAsB,SAAS,CAC7B,QAAQ,EAAE,qBAAqB,EAC/B,eAAe,EAAE,4BAA4B,EAC7C,UAAU,EAAE,MAAM,iBAgDnB"}
\ No newline at end of file
+{"version":3,"file":"gas.d.cts","sourceRoot":"","sources":["../../src/utils/gas.ts"],"names":[],"mappings":"AAOA,OAAO,KAAK,EACV,4BAA4B,EAC5B,qBAAqB,EACrB,WAAW,EACZ,qBAAiB;AASlB;;;;;;GAMG;AACH,wBAAsB,SAAS,CAC7B,QAAQ,EAAE,qBAAqB,EAC/B,eAAe,EAAE,4BAA4B,EAC7C,UAAU,EAAE,MAAM,EAClB,OAAO,EAAE,WAAW,iBAgDrB"}
\ No newline at end of file
diff --git a/dist/utils/gas.d.mts b/dist/utils/gas.d.mts
index 827c3acae1baf581da2c49c89a7bbebab0785919..2e8a5e4de779c81ff304dfe884a17b9df4bd2dfd 100644
--- a/dist/utils/gas.d.mts
+++ b/dist/utils/gas.d.mts
@@ -1,9 +1,10 @@
-import type { PrepareUserOperationResponse, UserOperationMetadata } from "../types.mjs";
+import type { PrepareUserOperationResponse, UserOperationMetadata, Version4337 } from "../types.mjs";
 /**
  * Populates the gas properties for a user operation.
  * @param metadata - The metadata for the user operation.
  * @param prepareResponse - The prepare response from the smart contract account.
  * @param entrypoint - Address of the entrypoint contract.
+ * @param version - The version of the user operation.
  */
-export declare function updateGas(metadata: UserOperationMetadata, prepareResponse: PrepareUserOperationResponse, entrypoint: string): Promise<void>;
+export declare function updateGas(metadata: UserOperationMetadata, prepareResponse: PrepareUserOperationResponse, entrypoint: string, version: Version4337): Promise<void>;
 //# sourceMappingURL=gas.d.mts.map
\ No newline at end of file
diff --git a/dist/utils/gas.d.mts.map b/dist/utils/gas.d.mts.map
index 7981174ea4b70f7939128089b11a4385187cea3e..15fd3dddd3f71649b23e3eebbfe6d707094e8b39 100644
--- a/dist/utils/gas.d.mts.map
+++ b/dist/utils/gas.d.mts.map
@@ -1 +1 @@
-{"version":3,"file":"gas.d.mts","sourceRoot":"","sources":["../../src/utils/gas.ts"],"names":[],"mappings":"AAOA,OAAO,KAAK,EACV,4BAA4B,EAC5B,qBAAqB,EACtB,qBAAiB;AASlB;;;;;GAKG;AACH,wBAAsB,SAAS,CAC7B,QAAQ,EAAE,qBAAqB,EAC/B,eAAe,EAAE,4BAA4B,EAC7C,UAAU,EAAE,MAAM,iBAgDnB"}
\ No newline at end of file
+{"version":3,"file":"gas.d.mts","sourceRoot":"","sources":["../../src/utils/gas.ts"],"names":[],"mappings":"AAOA,OAAO,KAAK,EACV,4BAA4B,EAC5B,qBAAqB,EACrB,WAAW,EACZ,qBAAiB;AASlB;;;;;;GAMG;AACH,wBAAsB,SAAS,CAC7B,QAAQ,EAAE,qBAAqB,EAC/B,eAAe,EAAE,4BAA4B,EAC7C,UAAU,EAAE,MAAM,EAClB,OAAO,EAAE,WAAW,iBAgDrB"}
\ No newline at end of file
diff --git a/dist/utils/gas.mjs b/dist/utils/gas.mjs
index 0e51159223361707c2c6fb25df6f0a0bfdcc59bb..fd66b1576b8dd522f73a55f1a0c26d3b6b45a40a 100644
--- a/dist/utils/gas.mjs
+++ b/dist/utils/gas.mjs
@@ -21,8 +21,9 @@ const GAS_ESTIMATE_MULTIPLIER = 1.5;
  * @param metadata - The metadata for the user operation.
  * @param prepareResponse - The prepare response from the smart contract account.
  * @param entrypoint - Address of the entrypoint contract.
+ * @param version - The version of the user operation.
  */
-export async function updateGas(metadata, prepareResponse, entrypoint) {
+export async function updateGas(metadata, prepareResponse, entrypoint, version) {
     const { userOperation } = metadata;
     if (prepareResponse.gas) {
         userOperation.callGasLimit = prepareResponse.gas.callGasLimit;
@@ -44,7 +45,7 @@ export async function updateGas(metadata, prepareResponse, entrypoint) {
         preVerificationGas: VALUE_ZERO,
         verificationGasLimit: '0xF4240',
     };
-    const bundler = new Bundler(metadata.bundlerUrl);
+    const bundler = new Bundler({ url: metadata.bundlerUrl, version });
     const estimate = await bundler.estimateUserOperationGas(payload, entrypoint);
     userOperation.callGasLimit = normalizeGasEstimate(estimate.callGasLimit);
     userOperation.preVerificationGas = normalizeGasEstimate(estimate.preVerificationGas);
diff --git a/dist/utils/gas.mjs.map b/dist/utils/gas.mjs.map
index 95b4b7d2abc5071258e92d126f2168935d3875b4..ce4a9c2f45201ee17d6be2cf1b7493382a3a087e 100644
--- a/dist/utils/gas.mjs.map
+++ b/dist/utils/gas.mjs.map
@@ -1 +1 @@
-{"version":3,"file":"gas.mjs","sourceRoot":"","sources":["../../src/utils/gas.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,OAAO,EAAE,mCAAmC;AACrD,OAAO,EAAE,KAAK,EAAE,wBAAwB;AACxC,OAAO,GAAE,cAAc;;AAEvB,OAAO,EAAE,UAAU,EAAE,yBAAqB;AAC1C,OAAO,EAAE,OAAO,EAAE,+BAA2B;AAC7C,OAAO,EAAE,kBAAkB,EAAE,aAAa,EAAE,sBAAkB;AAM9D,MAAM,GAAG,GAAG,kBAAkB,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;AAErD;;GAEG;AACH,MAAM,uBAAuB,GAAG,GAAG,CAAC;AAEpC;;;;;GAKG;AACH,MAAM,CAAC,KAAK,UAAU,SAAS,CAC7B,QAA+B,EAC/B,eAA6C,EAC7C,UAAkB;IAElB,MAAM,EAAE,aAAa,EAAE,GAAG,QAAQ,CAAC;IAEnC,IAAI,eAAe,CAAC,GAAG,EAAE;QACvB,aAAa,CAAC,YAAY,GAAG,eAAe,CAAC,GAAG,CAAC,YAAY,CAAC;QAC9D,aAAa,CAAC,kBAAkB,GAAG,eAAe,CAAC,GAAG,CAAC,kBAAkB,CAAC;QAC1E,aAAa,CAAC,oBAAoB;YAChC,eAAe,CAAC,GAAG,CAAC,oBAAoB,CAAC;QAE3C,GAAG,CAAC,8CAA8C,EAAE;YAClD,YAAY,EAAE,aAAa,CAAC,YAAY;YACxC,kBAAkB,EAAE,aAAa,CAAC,kBAAkB;YACpD,oBAAoB,EAAE,aAAa,CAAC,oBAAoB;SACzD,CAAC,CAAC;QAEH,OAAO;KACR;IAED,MAAM,OAAO,GAAG;QACd,GAAG,aAAa;QAChB,YAAY,EAAE,UAAU;QACxB,oBAAoB,EAAE,UAAU;QAChC,YAAY,EAAE,UAAU;QACxB,kBAAkB,EAAE,UAAU;QAC9B,oBAAoB,EAAE,SAAS;KAChC,CAAC;IAEF,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC,QAAQ,CAAC,UAAoB,CAAC,CAAC;IAC3D,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,wBAAwB,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;IAE7E,aAAa,CAAC,YAAY,GAAG,oBAAoB,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;IACzE,aAAa,CAAC,kBAAkB,GAAG,oBAAoB,CACrD,QAAQ,CAAC,kBAAkB,CAC5B,CAAC;IACF,aAAa,CAAC,oBAAoB,GAAG,oBAAoB,CACvD,CAAC,QAAQ,CAAC,oBAAoB,IAAI,QAAQ,CAAC,eAAe,CAEhD,CACX,CAAC;IAEF,GAAG,CAAC,iDAAiD,EAAE;QACrD,YAAY,EAAE,aAAa,CAAC,YAAY;QACxC,kBAAkB,EAAE,aAAa,CAAC,kBAAkB;QACpD,oBAAoB,EAAE,aAAa,CAAC,oBAAoB;QACxD,UAAU,EAAE,uBAAuB;QACnC,QAAQ;KACT,CAAC,CAAC;AACL,CAAC;AAED;;;;GAIG;AACH,SAAS,oBAAoB,CAAC,QAAyB;IACrD,MAAM,KAAK,GACT,OAAO,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,QAAQ,CAAC,CAAC;IAEtE,MAAM,aAAa,GAAG,KAAK,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;IAE1D,OAAO,KAAK,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;AAC3C,CAAC","sourcesContent":["import { hexToBN } from '@metamask/controller-utils';\nimport { add0x } from '@metamask/utils';\nimport BN from 'bn.js';\n\nimport { VALUE_ZERO } from '../constants';\nimport { Bundler } from '../helpers/Bundler';\nimport { createModuleLogger, projectLogger } from '../logger';\nimport type {\n  PrepareUserOperationResponse,\n  UserOperationMetadata,\n} from '../types';\n\nconst log = createModuleLogger(projectLogger, 'gas');\n\n/**\n * A multiplier to apply to all gas estimate values returned from the bundler.\n */\nconst GAS_ESTIMATE_MULTIPLIER = 1.5;\n\n/**\n * Populates the gas properties for a user operation.\n * @param metadata - The metadata for the user operation.\n * @param prepareResponse - The prepare response from the smart contract account.\n * @param entrypoint - Address of the entrypoint contract.\n */\nexport async function updateGas(\n  metadata: UserOperationMetadata,\n  prepareResponse: PrepareUserOperationResponse,\n  entrypoint: string,\n) {\n  const { userOperation } = metadata;\n\n  if (prepareResponse.gas) {\n    userOperation.callGasLimit = prepareResponse.gas.callGasLimit;\n    userOperation.preVerificationGas = prepareResponse.gas.preVerificationGas;\n    userOperation.verificationGasLimit =\n      prepareResponse.gas.verificationGasLimit;\n\n    log('Using gas values from smart contract account', {\n      callGasLimit: userOperation.callGasLimit,\n      preVerificationGas: userOperation.preVerificationGas,\n      verificationGasLimit: userOperation.verificationGasLimit,\n    });\n\n    return;\n  }\n\n  const payload = {\n    ...userOperation,\n    maxFeePerGas: VALUE_ZERO,\n    maxPriorityFeePerGas: VALUE_ZERO,\n    callGasLimit: VALUE_ZERO,\n    preVerificationGas: VALUE_ZERO,\n    verificationGasLimit: '0xF4240',\n  };\n\n  const bundler = new Bundler(metadata.bundlerUrl as string);\n  const estimate = await bundler.estimateUserOperationGas(payload, entrypoint);\n\n  userOperation.callGasLimit = normalizeGasEstimate(estimate.callGasLimit);\n  userOperation.preVerificationGas = normalizeGasEstimate(\n    estimate.preVerificationGas,\n  );\n  userOperation.verificationGasLimit = normalizeGasEstimate(\n    (estimate.verificationGasLimit ?? estimate.verificationGas) as\n      | string\n      | number,\n  );\n\n  log('Using buffered gas values from bundler estimate', {\n    callGasLimit: userOperation.callGasLimit,\n    preVerificationGas: userOperation.preVerificationGas,\n    verificationGasLimit: userOperation.verificationGasLimit,\n    multiplier: GAS_ESTIMATE_MULTIPLIER,\n    estimate,\n  });\n}\n\n/**\n * Normalizes a gas estimate value from the bundler.\n * @param rawValue - The raw value to normalize.\n * @returns The normalized value as a hexadecimal string.\n */\nfunction normalizeGasEstimate(rawValue: string | number): string {\n  const value =\n    typeof rawValue === 'string' ? hexToBN(rawValue) : new BN(rawValue);\n\n  const bufferedValue = value.muln(GAS_ESTIMATE_MULTIPLIER);\n\n  return add0x(bufferedValue.toString(16));\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"gas.mjs","sourceRoot":"","sources":["../../src/utils/gas.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,OAAO,EAAE,mCAAmC;AACrD,OAAO,EAAE,KAAK,EAAE,wBAAwB;AACxC,OAAO,GAAE,cAAc;;AAEvB,OAAO,EAAE,UAAU,EAAE,yBAAqB;AAC1C,OAAO,EAAE,OAAO,EAAE,+BAA2B;AAC7C,OAAO,EAAE,kBAAkB,EAAE,aAAa,EAAE,sBAAkB;AAO9D,MAAM,GAAG,GAAG,kBAAkB,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;AAErD;;GAEG;AACH,MAAM,uBAAuB,GAAG,GAAG,CAAC;AAEpC;;;;;;GAMG;AACH,MAAM,CAAC,KAAK,UAAU,SAAS,CAC7B,QAA+B,EAC/B,eAA6C,EAC7C,UAAkB,EAClB,OAAoB;IAEpB,MAAM,EAAE,aAAa,EAAE,GAAG,QAAQ,CAAC;IAEnC,IAAI,eAAe,CAAC,GAAG,EAAE;QACvB,aAAa,CAAC,YAAY,GAAG,eAAe,CAAC,GAAG,CAAC,YAAY,CAAC;QAC9D,aAAa,CAAC,kBAAkB,GAAG,eAAe,CAAC,GAAG,CAAC,kBAAkB,CAAC;QAC1E,aAAa,CAAC,oBAAoB;YAChC,eAAe,CAAC,GAAG,CAAC,oBAAoB,CAAC;QAE3C,GAAG,CAAC,8CAA8C,EAAE;YAClD,YAAY,EAAE,aAAa,CAAC,YAAY;YACxC,kBAAkB,EAAE,aAAa,CAAC,kBAAkB;YACpD,oBAAoB,EAAE,aAAa,CAAC,oBAAoB;SACzD,CAAC,CAAC;QAEH,OAAO;KACR;IAED,MAAM,OAAO,GAAG;QACd,GAAG,aAAa;QAChB,YAAY,EAAE,UAAU;QACxB,oBAAoB,EAAE,UAAU;QAChC,YAAY,EAAE,UAAU;QACxB,kBAAkB,EAAE,UAAU;QAC9B,oBAAoB,EAAE,SAAS;KAChC,CAAC;IAEF,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC,EAAE,GAAG,EAAE,QAAQ,CAAC,UAAoB,EAAE,OAAO,EAAE,CAAC,CAAC;IAC7E,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,wBAAwB,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;IAE7E,aAAa,CAAC,YAAY,GAAG,oBAAoB,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;IACzE,aAAa,CAAC,kBAAkB,GAAG,oBAAoB,CACrD,QAAQ,CAAC,kBAAkB,CAC5B,CAAC;IACF,aAAa,CAAC,oBAAoB,GAAG,oBAAoB,CACvD,CAAC,QAAQ,CAAC,oBAAoB,IAAI,QAAQ,CAAC,eAAe,CAEhD,CACX,CAAC;IAEF,GAAG,CAAC,iDAAiD,EAAE;QACrD,YAAY,EAAE,aAAa,CAAC,YAAY;QACxC,kBAAkB,EAAE,aAAa,CAAC,kBAAkB;QACpD,oBAAoB,EAAE,aAAa,CAAC,oBAAoB;QACxD,UAAU,EAAE,uBAAuB;QACnC,QAAQ;KACT,CAAC,CAAC;AACL,CAAC;AAED;;;;GAIG;AACH,SAAS,oBAAoB,CAAC,QAAyB;IACrD,MAAM,KAAK,GACT,OAAO,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,QAAQ,CAAC,CAAC;IAEtE,MAAM,aAAa,GAAG,KAAK,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;IAE1D,OAAO,KAAK,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;AAC3C,CAAC","sourcesContent":["import { hexToBN } from '@metamask/controller-utils';\nimport { add0x } from '@metamask/utils';\nimport BN from 'bn.js';\n\nimport { VALUE_ZERO } from '../constants';\nimport { Bundler } from '../helpers/Bundler';\nimport { createModuleLogger, projectLogger } from '../logger';\nimport type {\n  PrepareUserOperationResponse,\n  UserOperationMetadata,\n  Version4337,\n} from '../types';\n\nconst log = createModuleLogger(projectLogger, 'gas');\n\n/**\n * A multiplier to apply to all gas estimate values returned from the bundler.\n */\nconst GAS_ESTIMATE_MULTIPLIER = 1.5;\n\n/**\n * Populates the gas properties for a user operation.\n * @param metadata - The metadata for the user operation.\n * @param prepareResponse - The prepare response from the smart contract account.\n * @param entrypoint - Address of the entrypoint contract.\n * @param version - The version of the user operation.\n */\nexport async function updateGas(\n  metadata: UserOperationMetadata,\n  prepareResponse: PrepareUserOperationResponse,\n  entrypoint: string,\n  version: Version4337,\n) {\n  const { userOperation } = metadata;\n\n  if (prepareResponse.gas) {\n    userOperation.callGasLimit = prepareResponse.gas.callGasLimit;\n    userOperation.preVerificationGas = prepareResponse.gas.preVerificationGas;\n    userOperation.verificationGasLimit =\n      prepareResponse.gas.verificationGasLimit;\n\n    log('Using gas values from smart contract account', {\n      callGasLimit: userOperation.callGasLimit,\n      preVerificationGas: userOperation.preVerificationGas,\n      verificationGasLimit: userOperation.verificationGasLimit,\n    });\n\n    return;\n  }\n\n  const payload = {\n    ...userOperation,\n    maxFeePerGas: VALUE_ZERO,\n    maxPriorityFeePerGas: VALUE_ZERO,\n    callGasLimit: VALUE_ZERO,\n    preVerificationGas: VALUE_ZERO,\n    verificationGasLimit: '0xF4240',\n  };\n\n  const bundler = new Bundler({ url: metadata.bundlerUrl as string, version });\n  const estimate = await bundler.estimateUserOperationGas(payload, entrypoint);\n\n  userOperation.callGasLimit = normalizeGasEstimate(estimate.callGasLimit);\n  userOperation.preVerificationGas = normalizeGasEstimate(\n    estimate.preVerificationGas,\n  );\n  userOperation.verificationGasLimit = normalizeGasEstimate(\n    (estimate.verificationGasLimit ?? estimate.verificationGas) as\n      | string\n      | number,\n  );\n\n  log('Using buffered gas values from bundler estimate', {\n    callGasLimit: userOperation.callGasLimit,\n    preVerificationGas: userOperation.preVerificationGas,\n    verificationGasLimit: userOperation.verificationGasLimit,\n    multiplier: GAS_ESTIMATE_MULTIPLIER,\n    estimate,\n  });\n}\n\n/**\n * Normalizes a gas estimate value from the bundler.\n * @param rawValue - The raw value to normalize.\n * @returns The normalized value as a hexadecimal string.\n */\nfunction normalizeGasEstimate(rawValue: string | number): string {\n  const value =\n    typeof rawValue === 'string' ? hexToBN(rawValue) : new BN(rawValue);\n\n  const bufferedValue = value.muln(GAS_ESTIMATE_MULTIPLIER);\n\n  return add0x(bufferedValue.toString(16));\n}\n"]}
\ No newline at end of file
