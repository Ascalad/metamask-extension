diff --git a/dist/assetsUtil.cjs b/dist/assetsUtil.cjs
index c2e83cf6caee19152aa164f1333cfef7b681e900..590b6de6e9d20ca402b82ac56b0929ab8c16c932 100644
--- a/dist/assetsUtil.cjs
+++ b/dist/assetsUtil.cjs
@@ -3,6 +3,7 @@ var __importDefault = (this && this.__importDefault) || function (mod) {
     return (mod && mod.__esModule) ? mod : { "default": mod };
 };
 Object.defineProperty(exports, "__esModule", { value: true });
+function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { newObj[key] = obj[key]; } } } newObj.default = obj; return newObj; } }
 exports.fetchTokenContractExchangeRates = exports.reduceInBatchesSerially = exports.divideIntoBatches = exports.ethersBigNumberToBN = exports.addUrlProtocolPrefix = exports.getFormattedIpfsUrl = exports.getIpfsCIDv1AndPath = exports.removeIpfsProtocolPrefix = exports.isTokenListSupportedForNetwork = exports.isTokenDetectionSupportedForNetwork = exports.SupportedStakedBalanceNetworks = exports.SupportedTokenDetectionNetworks = exports.formatIconUrlWithProxy = exports.formatAggregatorNames = exports.hasNewCollectionFields = exports.compareNftMetadata = exports.TOKEN_PRICES_BATCH_SIZE = void 0;
 const controller_utils_1 = require("@metamask/controller-utils");
 const utils_1 = require("@metamask/utils");
@@ -233,7 +234,7 @@ async function getIpfsCIDv1AndPath(ipfsUrl) {
     const index = url.indexOf('/');
     const cid = index !== -1 ? url.substring(0, index) : url;
     const path = index !== -1 ? url.substring(index) : undefined;
-    const { CID } = await import("multiformats");
+    const { CID } = _interopRequireWildcard(require("multiformats"));
     // We want to ensure that the CID is v1 (https://docs.ipfs.io/concepts/content-addressing/#identifier-formats)
     // because most cid v0s appear to be incompatible with IPFS subdomains
     return {
diff --git a/dist/token-prices-service/codefi-v2.mjs b/dist/token-prices-service/codefi-v2.mjs
index e7eaad2cfa8b233c4fd42a51f745233a1cc5c387..b89849c0caf7e5db3b53cf03dd5746b6b1433543 100644
--- a/dist/token-prices-service/codefi-v2.mjs
+++ b/dist/token-prices-service/codefi-v2.mjs
@@ -12,8 +12,7 @@ var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (
 var _CodefiTokenPricesServiceV2_tokenPricePolicy;
 import { handleFetch } from "@metamask/controller-utils";
 import { hexToNumber } from "@metamask/utils";
-import $cockatiel from "cockatiel";
-const { circuitBreaker, ConsecutiveBreaker, ExponentialBackoff, handleAll, retry, wrap, CircuitState } = $cockatiel;
+import { circuitBreaker, ConsecutiveBreaker, ExponentialBackoff, handleAll, retry, wrap, CircuitState } from "cockatiel";
 /**
  * The list of currencies that can be supplied as the `vsCurrency` parameter to
  * the `/spot-prices` endpoint, in lowercase form.
diff --git a/dist/TokensController.cjs b/dist/TokensController.cjs
index ee0b7155c4e898e437a85ecb40decceac333f2eb..343b343b8300136756d96acac77aab8140efc95a 100644
--- a/dist/TokensController.cjs
+++ b/dist/TokensController.cjs
@@ -210,9 +210,13 @@ class TokensController extends base_controller_1.BaseController {
         const releaseLock = await __classPrivateFieldGet(this, _TokensController_mutex, "f").acquire();
         const { allTokens, ignoredTokens, allDetectedTokens } = this.state;
         const importedTokensMap = {};
+        let interactingChainId;
+        if (networkClientId) {
+            interactingChainId = this.messagingSystem.call('NetworkController:getNetworkClientById', networkClientId).configuration.chainId;
+        }
         // Used later to dedupe imported tokens
         const newTokensMap = [
-            ...(allTokens[__classPrivateFieldGet(this, _TokensController_chainId, "f")]?.[__classPrivateFieldGet(this, _TokensController_instances, "m", _TokensController_getSelectedAccount).call(this).address] || []),
+            ...(allTokens[interactingChainId ?? __classPrivateFieldGet(this, _TokensController_chainId, "f")]?.[__classPrivateFieldGet(this, _TokensController_instances, "m", _TokensController_getSelectedAccount).call(this).address] || []),
             ...tokensToImport,
         ].reduce((output, token) => {
             output[token.address] = token;
@@ -236,10 +240,6 @@ class TokensController extends base_controller_1.BaseController {
             });
             const newTokens = Object.values(newTokensMap);
             const newIgnoredTokens = ignoredTokens.filter((tokenAddress) => !newTokensMap[tokenAddress.toLowerCase()]);
-            let interactingChainId;
-            if (networkClientId) {
-                interactingChainId = this.messagingSystem.call('NetworkController:getNetworkClientById', networkClientId).configuration.chainId;
-            }
             const detectedTokensForGivenChain = interactingChainId
                 ? allDetectedTokens?.[interactingChainId]?.[__classPrivateFieldGet(this, _TokensController_instances, "m", _TokensController_getSelectedAddress).call(this)]
                 : [];
@@ -267,11 +267,16 @@ class TokensController extends base_controller_1.BaseController {
      * Ignore a batch of tokens.
      *
      * @param tokenAddressesToIgnore - Array of token addresses to ignore.
+     * @param networkClientId - Optional network client ID used to determine interacting chain ID.
      */
-    ignoreTokens(tokenAddressesToIgnore) {
+    ignoreTokens(tokenAddressesToIgnore, networkClientId) {
         const { ignoredTokens, detectedTokens, tokens } = this.state;
         const ignoredTokensMap = {};
         let newIgnoredTokens = [...ignoredTokens];
+        let interactingChainId;
+        if (networkClientId) {
+            interactingChainId = this.messagingSystem.call('NetworkController:getNetworkClientById', networkClientId).configuration.chainId;
+        }
         const checksummedTokenAddresses = tokenAddressesToIgnore.map((address) => {
             const checksumAddress = (0, controller_utils_1.toChecksumHexAddress)(address);
             ignoredTokensMap[address.toLowerCase()] = true;
@@ -284,6 +289,7 @@ class TokensController extends base_controller_1.BaseController {
             newIgnoredTokens,
             newDetectedTokens,
             newTokens,
+            interactingChainId,
         });
         this.update((state) => {
             state.ignoredTokens = newIgnoredTokens;
