diff --git a/dist/QueuedRequestController.js b/dist/QueuedRequestController.js
index 80be2aa904adb54357ee78728aadeb5210f6eaf4..ab8e32772ec20434ff604bc33ee34e951ba937b7 100644
--- a/dist/QueuedRequestController.js
+++ b/dist/QueuedRequestController.js
@@ -3,12 +3,12 @@
 
 
 
-var _chunkO3GWRZOCjs = require('./chunk-O3GWRZOC.js');
+var _chunkGYWQP5VQjs = require('./chunk-GYWQP5VQ.js');
 require('./chunk-Z4BLTVTB.js');
 
 
 
 
 
-exports.QueuedRequestController = _chunkO3GWRZOCjs.QueuedRequestController; exports.QueuedRequestControllerActionTypes = _chunkO3GWRZOCjs.QueuedRequestControllerActionTypes; exports.QueuedRequestControllerEventTypes = _chunkO3GWRZOCjs.QueuedRequestControllerEventTypes; exports.controllerName = _chunkO3GWRZOCjs.controllerName;
+exports.QueuedRequestController = _chunkGYWQP5VQjs.QueuedRequestController; exports.QueuedRequestControllerActionTypes = _chunkGYWQP5VQjs.QueuedRequestControllerActionTypes; exports.QueuedRequestControllerEventTypes = _chunkGYWQP5VQjs.QueuedRequestControllerEventTypes; exports.controllerName = _chunkGYWQP5VQjs.controllerName;
 //# sourceMappingURL=QueuedRequestController.js.map
\ No newline at end of file
diff --git a/dist/QueuedRequestController.mjs b/dist/QueuedRequestController.mjs
index ede9b6898b93236ba0c21af4eeec87721456825e..eba84a9676fea8c4e5ddaec205f68a45a2285cd4 100644
--- a/dist/QueuedRequestController.mjs
+++ b/dist/QueuedRequestController.mjs
@@ -3,7 +3,7 @@ import {
   QueuedRequestControllerActionTypes,
   QueuedRequestControllerEventTypes,
   controllerName
-} from "./chunk-EUEPSRVZ.mjs";
+} from "./chunk-2CDOML2V.mjs";
 import "./chunk-XUI43LEZ.mjs";
 export {
   QueuedRequestController,
diff --git a/dist/QueuedRequestMiddleware.js b/dist/QueuedRequestMiddleware.js
index 3f4044d2f409ca2dc337651f1ea98d8f418beec5..c30ec6ccc291835a3312ca39fffda2e3461cc5bc 100644
--- a/dist/QueuedRequestMiddleware.js
+++ b/dist/QueuedRequestMiddleware.js
@@ -1,8 +1,8 @@
 "use strict";Object.defineProperty(exports, "__esModule", {value: true});
 
-var _chunk2FGGS72Ljs = require('./chunk-2FGGS72L.js');
+var _chunkDHADYPYBjs = require('./chunk-DHADYPYB.js');
 require('./chunk-Z4BLTVTB.js');
 
 
-exports.createQueuedRequestMiddleware = _chunk2FGGS72Ljs.createQueuedRequestMiddleware;
+exports.createQueuedRequestMiddleware = _chunkDHADYPYBjs.createQueuedRequestMiddleware;
 //# sourceMappingURL=QueuedRequestMiddleware.js.map
\ No newline at end of file
diff --git a/dist/QueuedRequestMiddleware.mjs b/dist/QueuedRequestMiddleware.mjs
index b04761531dd52e9fbea36487d2f7a249fc4b0967..c916e90d4223145cc683cc82ed5f145ec5fc0685 100644
--- a/dist/QueuedRequestMiddleware.mjs
+++ b/dist/QueuedRequestMiddleware.mjs
@@ -1,6 +1,6 @@
 import {
   createQueuedRequestMiddleware
-} from "./chunk-YQEMBMKG.mjs";
+} from "./chunk-XDUKMRJ3.mjs";
 import "./chunk-XUI43LEZ.mjs";
 export {
   createQueuedRequestMiddleware
diff --git a/dist/chunk-2CDOML2V.mjs b/dist/chunk-2CDOML2V.mjs
new file mode 100644
index 0000000000000000000000000000000000000000..09abdd4e29156ac2f5afa1ff01a2b7aff623bead
--- /dev/null
+++ b/dist/chunk-2CDOML2V.mjs
@@ -0,0 +1,261 @@
+import {
+  __privateAdd,
+  __privateGet,
+  __privateMethod,
+  __privateSet
+} from "./chunk-XUI43LEZ.mjs";
+
+// src/QueuedRequestController.ts
+import { BaseController } from "@metamask/base-controller";
+import { SelectedNetworkControllerEventTypes } from "@metamask/selected-network-controller";
+import { createDeferredPromise } from "@metamask/utils";
+var controllerName = "QueuedRequestController";
+var QueuedRequestControllerActionTypes = {
+  enqueueRequest: `${controllerName}:enqueueRequest`,
+  getState: `${controllerName}:getState`
+};
+var QueuedRequestControllerEventTypes = {
+  networkSwitched: `${controllerName}:networkSwitched`,
+  stateChange: `${controllerName}:stateChange`
+};
+var _originOfCurrentBatch, _requestQueue, _processingRequestCount, _shouldRequestSwitchNetwork, _clearPendingConfirmations, _registerMessageHandlers, registerMessageHandlers_fn, _flushQueueForOrigin, flushQueueForOrigin_fn, _processNextBatch, processNextBatch_fn, _switchNetworkIfNecessary, switchNetworkIfNecessary_fn, _updateQueuedRequestCount, updateQueuedRequestCount_fn;
+var QueuedRequestController = class extends BaseController {
+  /**
+   * Construct a QueuedRequestController.
+   *
+   * @param options - Controller options.
+   * @param options.messenger - The restricted controller messenger that facilitates communication with other controllers.
+   * @param options.shouldRequestSwitchNetwork - A function that returns if a request requires the globally selected network to match the dapp selected network.
+   * @param options.clearPendingConfirmations - A function that will clear all the pending confirmations.
+   */
+  constructor({
+    messenger,
+    // Core PR: https://github.com/MetaMask/core/pull/4423
+    // Patch Branch: jl/patch-queued-request-controller@0.10.0-replace-methods-array-with-callback
+    shouldRequestSwitchNetwork,
+    clearPendingConfirmations
+  }) {
+    super({
+      name: controllerName,
+      metadata: {
+        queuedRequestCount: {
+          anonymous: true,
+          persist: false
+        }
+      },
+      messenger,
+      state: { queuedRequestCount: 0 }
+    });
+    __privateAdd(this, _registerMessageHandlers);
+    __privateAdd(this, _flushQueueForOrigin);
+    /**
+     * Process the next batch of requests.
+     *
+     * This will trigger the next batch of requests with matching origins to be processed. Each
+     * request in the batch is dequeued one at a time, in chronological order, but they all get
+     * processed in parallel.
+     *
+     * This should be called after a batch of requests has finished processing, if the queue is non-
+     * empty.
+     */
+    __privateAdd(this, _processNextBatch);
+    /**
+     * Switch the globally selected network client to match the network
+     * client of the current batch.
+     *
+     * @throws Throws an error if the current selected `networkClientId` or the
+     * `networkClientId` on the request are invalid.
+     */
+    __privateAdd(this, _switchNetworkIfNecessary);
+    /**
+     * Update the queued request count.
+     */
+    __privateAdd(this, _updateQueuedRequestCount);
+    /**
+     * The origin of the current batch of requests being processed, or `undefined` if there are no
+     * requests currently being processed.
+     */
+    __privateAdd(this, _originOfCurrentBatch, void 0);
+    /**
+     * The list of all queued requests, in chronological order.
+     */
+    __privateAdd(this, _requestQueue, []);
+    /**
+     * The number of requests currently being processed.
+     *
+     * Note that this does not include queued requests, just those being actively processed (i.e.
+     * those in the "current batch").
+     */
+    __privateAdd(this, _processingRequestCount, 0);
+    /**
+     * This is a function that returns true if a request requires the globally selected
+     * network to match the dapp selected network before being processed. These can
+     * be for UI/UX reasons where the currently selected network is displayed
+     * in the confirmation even though it will be submitted on the correct
+     * network for the dapp. It could also be that a method expects the
+     * globally selected network to match some value in the request params itself.
+     */
+    // Core PR: https://github.com/MetaMask/core/pull/4423
+    // Patch Branch: jl/patch-queued-request-controller@0.10.0-replace-methods-array-with-callback
+    __privateAdd(this, _shouldRequestSwitchNetwork, void 0);
+    __privateAdd(this, _clearPendingConfirmations, void 0);
+    __privateSet(this, _shouldRequestSwitchNetwork, shouldRequestSwitchNetwork);
+    __privateSet(this, _clearPendingConfirmations, clearPendingConfirmations);
+    __privateMethod(this, _registerMessageHandlers, registerMessageHandlers_fn).call(this);
+  }
+  /**
+   * Enqueue a request to be processed in a batch with other requests from the same origin.
+   *
+   * We process requests one origin at a time, so that requests from different origins do not get
+   * interwoven, and so that we can ensure that the globally selected network matches the dapp-
+   * selected network.
+   *
+   * Requests get processed in order of insertion, even across origins/batches. All requests get
+   * processed even in the event of preceding requests failing.
+   *
+   * @param request - The JSON-RPC request to process.
+   * @param requestNext - A function representing the next steps for processing this request.
+   * @returns A promise that resolves when the given request has been fully processed.
+   */
+  async enqueueRequest(request, requestNext) {
+    if (__privateGet(this, _originOfCurrentBatch) === void 0) {
+      __privateSet(this, _originOfCurrentBatch, request.origin);
+    }
+    try {
+      if (this.state.queuedRequestCount > 0 || __privateGet(this, _originOfCurrentBatch) !== request.origin) {
+        const {
+          promise: waitForDequeue,
+          reject,
+          resolve
+        } = createDeferredPromise({
+          suppressUnhandledRejection: true
+        });
+        __privateGet(this, _requestQueue).push({
+          origin: request.origin,
+          processRequest: (error) => {
+            if (error) {
+              reject(error);
+            } else {
+              resolve();
+            }
+          }
+        });
+        __privateMethod(this, _updateQueuedRequestCount, updateQueuedRequestCount_fn).call(this);
+        await waitForDequeue;
+      } else if (__privateGet(this, _shouldRequestSwitchNetwork).call(this, request)) {
+        await __privateMethod(this, _switchNetworkIfNecessary, switchNetworkIfNecessary_fn).call(this);
+      }
+      __privateSet(this, _processingRequestCount, __privateGet(this, _processingRequestCount) + 1);
+      try {
+        await requestNext();
+      } finally {
+        __privateSet(this, _processingRequestCount, __privateGet(this, _processingRequestCount) - 1);
+      }
+      return void 0;
+    } finally {
+      if (__privateGet(this, _processingRequestCount) === 0) {
+        __privateSet(this, _originOfCurrentBatch, void 0);
+        if (__privateGet(this, _requestQueue).length > 0) {
+          __privateMethod(this, _processNextBatch, processNextBatch_fn).call(this);
+        }
+      }
+    }
+  }
+};
+_originOfCurrentBatch = new WeakMap();
+_requestQueue = new WeakMap();
+_processingRequestCount = new WeakMap();
+_shouldRequestSwitchNetwork = new WeakMap();
+_clearPendingConfirmations = new WeakMap();
+_registerMessageHandlers = new WeakSet();
+registerMessageHandlers_fn = function() {
+  this.messagingSystem.registerActionHandler(
+    `${controllerName}:enqueueRequest`,
+    this.enqueueRequest.bind(this)
+  );
+  this.messagingSystem.subscribe(
+    SelectedNetworkControllerEventTypes.stateChange,
+    (_, patch) => {
+      patch.forEach(({ op, path }) => {
+        if (path.length === 2 && path[0] === "domains" && typeof path[1] === "string") {
+          const origin = path[1];
+          __privateMethod(this, _flushQueueForOrigin, flushQueueForOrigin_fn).call(this, origin);
+          if (op === "remove" && origin === __privateGet(this, _originOfCurrentBatch)) {
+            __privateGet(this, _clearPendingConfirmations).call(this);
+          }
+        }
+      });
+    }
+  );
+};
+_flushQueueForOrigin = new WeakSet();
+flushQueueForOrigin_fn = function(flushOrigin) {
+  __privateGet(this, _requestQueue).filter(({ origin }) => origin === flushOrigin).forEach(({ processRequest }) => {
+    processRequest(
+      new Error(
+        "The request has been rejected due to a change in selected network. Please verify the selected network and retry the request."
+      )
+    );
+  });
+  __privateSet(this, _requestQueue, __privateGet(this, _requestQueue).filter(
+    ({ origin }) => origin !== flushOrigin
+  ));
+};
+_processNextBatch = new WeakSet();
+processNextBatch_fn = async function() {
+  const firstRequest = __privateGet(this, _requestQueue).shift();
+  __privateSet(this, _originOfCurrentBatch, firstRequest.origin);
+  const batch = [firstRequest.processRequest];
+  while (__privateGet(this, _requestQueue)[0]?.origin === __privateGet(this, _originOfCurrentBatch)) {
+    const nextEntry = __privateGet(this, _requestQueue).shift();
+    batch.push(nextEntry.processRequest);
+  }
+  let networkSwitchError;
+  try {
+    await __privateMethod(this, _switchNetworkIfNecessary, switchNetworkIfNecessary_fn).call(this);
+  } catch (error) {
+    networkSwitchError = error;
+  }
+  for (const processRequest of batch) {
+    processRequest(networkSwitchError);
+  }
+  __privateMethod(this, _updateQueuedRequestCount, updateQueuedRequestCount_fn).call(this);
+};
+_switchNetworkIfNecessary = new WeakSet();
+switchNetworkIfNecessary_fn = async function() {
+  if (!__privateGet(this, _originOfCurrentBatch)) {
+    throw new Error("Current batch origin must be initialized first");
+  }
+  const originNetworkClientId = this.messagingSystem.call(
+    "SelectedNetworkController:getNetworkClientIdForDomain",
+    __privateGet(this, _originOfCurrentBatch)
+  );
+  const { selectedNetworkClientId } = this.messagingSystem.call(
+    "NetworkController:getState"
+  );
+  if (originNetworkClientId === selectedNetworkClientId) {
+    return;
+  }
+  await this.messagingSystem.call(
+    "NetworkController:setActiveNetwork",
+    originNetworkClientId
+  );
+  this.messagingSystem.publish(
+    "QueuedRequestController:networkSwitched",
+    originNetworkClientId
+  );
+};
+_updateQueuedRequestCount = new WeakSet();
+updateQueuedRequestCount_fn = function() {
+  this.update((state) => {
+    state.queuedRequestCount = __privateGet(this, _requestQueue).length;
+  });
+};
+
+export {
+  controllerName,
+  QueuedRequestControllerActionTypes,
+  QueuedRequestControllerEventTypes,
+  QueuedRequestController
+};
+//# sourceMappingURL=chunk-2CDOML2V.mjs.map
\ No newline at end of file
diff --git a/dist/chunk-2CDOML2V.mjs.map b/dist/chunk-2CDOML2V.mjs.map
new file mode 100644
index 0000000000000000000000000000000000000000..97b5f0d83fed27e1aa329af97c087c5c28608324
--- /dev/null
+++ b/dist/chunk-2CDOML2V.mjs.map
@@ -0,0 +1 @@
+{"version":3,"sources":["../src/QueuedRequestController.ts"],"sourcesContent":["import type {\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n  RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport { BaseController } from '@metamask/base-controller';\nimport type {\n  NetworkControllerGetStateAction,\n  NetworkControllerSetActiveNetworkAction,\n} from '@metamask/network-controller';\nimport type {\n  SelectedNetworkControllerGetNetworkClientIdForDomainAction,\n  SelectedNetworkControllerStateChangeEvent,\n} from '@metamask/selected-network-controller';\nimport { SelectedNetworkControllerEventTypes } from '@metamask/selected-network-controller';\nimport { createDeferredPromise } from '@metamask/utils';\n\nimport type { QueuedRequestMiddlewareJsonRpcRequest } from './types';\n\nexport const controllerName = 'QueuedRequestController';\n\nexport type QueuedRequestControllerState = {\n  queuedRequestCount: number;\n};\n\nexport const QueuedRequestControllerActionTypes = {\n  enqueueRequest: `${controllerName}:enqueueRequest` as const,\n  getState: `${controllerName}:getState` as const,\n};\n\nexport type QueuedRequestControllerGetStateAction = ControllerGetStateAction<\n  typeof controllerName,\n  QueuedRequestControllerState\n>;\n\nexport type QueuedRequestControllerEnqueueRequestAction = {\n  type: typeof QueuedRequestControllerActionTypes.enqueueRequest;\n  handler: QueuedRequestController['enqueueRequest'];\n};\n\nexport const QueuedRequestControllerEventTypes = {\n  networkSwitched: `${controllerName}:networkSwitched` as const,\n  stateChange: `${controllerName}:stateChange` as const,\n};\n\nexport type QueuedRequestControllerStateChangeEvent =\n  ControllerStateChangeEvent<\n    typeof controllerName,\n    QueuedRequestControllerState\n  >;\n\nexport type QueuedRequestControllerNetworkSwitched = {\n  type: typeof QueuedRequestControllerEventTypes.networkSwitched;\n  payload: [string];\n};\n\nexport type QueuedRequestControllerEvents =\n  | QueuedRequestControllerStateChangeEvent\n  | QueuedRequestControllerNetworkSwitched;\n\nexport type QueuedRequestControllerActions =\n  | QueuedRequestControllerGetStateAction\n  | QueuedRequestControllerEnqueueRequestAction;\n\nexport type AllowedActions =\n  | NetworkControllerGetStateAction\n  | NetworkControllerSetActiveNetworkAction\n  | SelectedNetworkControllerGetNetworkClientIdForDomainAction;\n\nexport type AllowedEvents = SelectedNetworkControllerStateChangeEvent;\n\nexport type QueuedRequestControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  QueuedRequestControllerActions | AllowedActions,\n  QueuedRequestControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\nexport type QueuedRequestControllerOptions = {\n  messenger: QueuedRequestControllerMessenger;\n  shouldRequestSwitchNetwork: (\n    request: QueuedRequestMiddlewareJsonRpcRequest,\n  ) => boolean;\n  clearPendingConfirmations: () => void;\n};\n\n/**\n * A queued request.\n */\ntype QueuedRequest = {\n  /**\n   * The origin of the queued request.\n   */\n  origin: string;\n  /**\n   * A callback used to continue processing the request, called when the request is dequeued.\n   */\n  processRequest: (error: unknown) => void;\n};\n\n/**\n * Queue requests for processing in batches, by request origin.\n *\n * Processing requests in batches allows us to completely separate sets of requests that originate\n * from different origins. This ensures that our UI will not display those requests as a set, which\n * could mislead users into thinking they are related.\n *\n * Queuing requests in batches also allows us to ensure the globally selected network matches the\n * dapp-selected network, before the confirmation UI is rendered. This is important because the\n * data shown on some confirmation screens is only collected for the globally selected network.\n *\n * Requests get processed in order of insertion, even across batches. All requests get processed\n * even in the event of preceding requests failing.\n */\nexport class QueuedRequestController extends BaseController<\n  typeof controllerName,\n  QueuedRequestControllerState,\n  QueuedRequestControllerMessenger\n> {\n  /**\n   * The origin of the current batch of requests being processed, or `undefined` if there are no\n   * requests currently being processed.\n   */\n  #originOfCurrentBatch: string | undefined;\n\n  /**\n   * The list of all queued requests, in chronological order.\n   */\n  #requestQueue: QueuedRequest[] = [];\n\n  /**\n   * The number of requests currently being processed.\n   *\n   * Note that this does not include queued requests, just those being actively processed (i.e.\n   * those in the \"current batch\").\n   */\n  #processingRequestCount = 0;\n\n  /**\n   * This is a function that returns true if a request requires the globally selected\n   * network to match the dapp selected network before being processed. These can\n   * be for UI/UX reasons where the currently selected network is displayed\n   * in the confirmation even though it will be submitted on the correct\n   * network for the dapp. It could also be that a method expects the\n   * globally selected network to match some value in the request params itself.\n   */\n  // Core PR: https://github.com/MetaMask/core/pull/4423\n  // Patch Branch: jl/patch-queued-request-controller@0.10.0-replace-methods-array-with-callback\n  readonly #shouldRequestSwitchNetwork: (\n    request: QueuedRequestMiddlewareJsonRpcRequest,\n  ) => boolean;\n\n  #clearPendingConfirmations: () => void;\n\n  /**\n   * Construct a QueuedRequestController.\n   *\n   * @param options - Controller options.\n   * @param options.messenger - The restricted controller messenger that facilitates communication with other controllers.\n   * @param options.shouldRequestSwitchNetwork - A function that returns if a request requires the globally selected network to match the dapp selected network.\n   * @param options.clearPendingConfirmations - A function that will clear all the pending confirmations.\n   */\n  constructor({\n    messenger,\n    // Core PR: https://github.com/MetaMask/core/pull/4423\n    // Patch Branch: jl/patch-queued-request-controller@0.10.0-replace-methods-array-with-callback\n    shouldRequestSwitchNetwork,\n    clearPendingConfirmations,\n  }: QueuedRequestControllerOptions) {\n    super({\n      name: controllerName,\n      metadata: {\n        queuedRequestCount: {\n          anonymous: true,\n          persist: false,\n        },\n      },\n      messenger,\n      state: { queuedRequestCount: 0 },\n    });\n    // Core PR: https://github.com/MetaMask/core/pull/4423\n    // Patch Branch: jl/patch-queued-request-controller@0.10.0-replace-methods-array-with-callback\n    this.#shouldRequestSwitchNetwork = shouldRequestSwitchNetwork;\n    this.#clearPendingConfirmations = clearPendingConfirmations;\n    this.#registerMessageHandlers();\n  }\n\n  #registerMessageHandlers(): void {\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:enqueueRequest`,\n      this.enqueueRequest.bind(this),\n    );\n\n    this.messagingSystem.subscribe(\n      SelectedNetworkControllerEventTypes.stateChange,\n      (_, patch) => {\n        patch.forEach(({ op, path }) => {\n          if (\n            path.length === 2 &&\n            path[0] === 'domains' &&\n            typeof path[1] === 'string'\n          ) {\n            const origin = path[1];\n            this.#flushQueueForOrigin(origin);\n            // When a domain is removed from SelectedNetworkController, its because of revoke permissions.\n            // Rather than subscribe to the permissions controller event in addition to the selectedNetworkController ones, we simplify it and just handle remove on this event alone.\n            if (op === 'remove' && origin === this.#originOfCurrentBatch) {\n              this.#clearPendingConfirmations();\n            }\n          }\n        });\n      },\n    );\n  }\n\n  #flushQueueForOrigin(flushOrigin: string) {\n    this.#requestQueue\n      .filter(({ origin }) => origin === flushOrigin)\n      .forEach(({ processRequest }) => {\n        processRequest(\n          new Error(\n            'The request has been rejected due to a change in selected network. Please verify the selected network and retry the request.',\n          ),\n        );\n      });\n    this.#requestQueue = this.#requestQueue.filter(\n      ({ origin }) => origin !== flushOrigin,\n    );\n  }\n\n  /**\n   * Process the next batch of requests.\n   *\n   * This will trigger the next batch of requests with matching origins to be processed. Each\n   * request in the batch is dequeued one at a time, in chronological order, but they all get\n   * processed in parallel.\n   *\n   * This should be called after a batch of requests has finished processing, if the queue is non-\n   * empty.\n   */\n  async #processNextBatch() {\n    const firstRequest = this.#requestQueue.shift() as QueuedRequest;\n    this.#originOfCurrentBatch = firstRequest.origin;\n    const batch = [firstRequest.processRequest];\n    while (this.#requestQueue[0]?.origin === this.#originOfCurrentBatch) {\n      const nextEntry = this.#requestQueue.shift() as QueuedRequest;\n      batch.push(nextEntry.processRequest);\n    }\n\n    // If globally selected network is different from origin selected network,\n    // switch network before processing batch\n    let networkSwitchError: unknown;\n    try {\n      await this.#switchNetworkIfNecessary();\n    } catch (error: unknown) {\n      networkSwitchError = error;\n    }\n\n    for (const processRequest of batch) {\n      processRequest(networkSwitchError);\n    }\n    this.#updateQueuedRequestCount();\n  }\n\n  /**\n   * Switch the globally selected network client to match the network\n   * client of the current batch.\n   *\n   * @throws Throws an error if the current selected `networkClientId` or the\n   * `networkClientId` on the request are invalid.\n   */\n  async #switchNetworkIfNecessary() {\n    // This branch is unreachable; it's just here for type reasons.\n    /* istanbul ignore next */\n    if (!this.#originOfCurrentBatch) {\n      throw new Error('Current batch origin must be initialized first');\n    }\n    const originNetworkClientId = this.messagingSystem.call(\n      'SelectedNetworkController:getNetworkClientIdForDomain',\n      this.#originOfCurrentBatch,\n    );\n    const { selectedNetworkClientId } = this.messagingSystem.call(\n      'NetworkController:getState',\n    );\n    if (originNetworkClientId === selectedNetworkClientId) {\n      return;\n    }\n\n    await this.messagingSystem.call(\n      'NetworkController:setActiveNetwork',\n      originNetworkClientId,\n    );\n\n    this.messagingSystem.publish(\n      'QueuedRequestController:networkSwitched',\n      originNetworkClientId,\n    );\n  }\n\n  /**\n   * Update the queued request count.\n   */\n  #updateQueuedRequestCount() {\n    this.update((state) => {\n      state.queuedRequestCount = this.#requestQueue.length;\n    });\n  }\n\n  /**\n   * Enqueue a request to be processed in a batch with other requests from the same origin.\n   *\n   * We process requests one origin at a time, so that requests from different origins do not get\n   * interwoven, and so that we can ensure that the globally selected network matches the dapp-\n   * selected network.\n   *\n   * Requests get processed in order of insertion, even across origins/batches. All requests get\n   * processed even in the event of preceding requests failing.\n   *\n   * @param request - The JSON-RPC request to process.\n   * @param requestNext - A function representing the next steps for processing this request.\n   * @returns A promise that resolves when the given request has been fully processed.\n   */\n  async enqueueRequest(\n    request: QueuedRequestMiddlewareJsonRpcRequest,\n    requestNext: () => Promise<void>,\n  ): Promise<void> {\n    if (this.#originOfCurrentBatch === undefined) {\n      this.#originOfCurrentBatch = request.origin;\n    }\n\n    try {\n      // Queue request for later processing\n      // Network switch is handled when this batch is processed\n      if (\n        this.state.queuedRequestCount > 0 ||\n        this.#originOfCurrentBatch !== request.origin\n      ) {\n        const {\n          promise: waitForDequeue,\n          reject,\n          resolve,\n        } = createDeferredPromise({\n          suppressUnhandledRejection: true,\n        });\n        this.#requestQueue.push({\n          origin: request.origin,\n          processRequest: (error: unknown) => {\n            if (error) {\n              reject(error);\n            } else {\n              resolve();\n            }\n          },\n        });\n        this.#updateQueuedRequestCount();\n\n        await waitForDequeue;\n      } else if (this.#shouldRequestSwitchNetwork(request)) {\n        // Core PR: https://github.com/MetaMask/core/pull/4423\n        // Patch Branch: jl/patch-queued-request-controller@0.10.0-replace-methods-array-with-callback\n        // Process request immediately\n        // Requires switching network now if necessary\n        await this.#switchNetworkIfNecessary();\n      }\n      this.#processingRequestCount += 1;\n      try {\n        await requestNext();\n      } finally {\n        this.#processingRequestCount -= 1;\n      }\n      return undefined;\n    } finally {\n      if (this.#processingRequestCount === 0) {\n        this.#originOfCurrentBatch = undefined;\n        if (this.#requestQueue.length > 0) {\n          // The next batch is triggered here. We intentionally omit the `await` because we don't\n          // want the next batch to block resolution of the current request.\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.#processNextBatch();\n        }\n      }\n    }\n  }\n}\n"],"mappings":"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","names":[]}
\ No newline at end of file
diff --git a/dist/chunk-2FGGS72L.js b/dist/chunk-2FGGS72L.js
deleted file mode 100644
index 2e769d06c74e1b4299b443aa8995d0f1a23eb24a..0000000000000000000000000000000000000000
--- a/dist/chunk-2FGGS72L.js
+++ /dev/null
@@ -1,41 +0,0 @@
-"use strict";Object.defineProperty(exports, "__esModule", {value: true});// src/QueuedRequestMiddleware.ts
-var _jsonrpcengine = require('@metamask/json-rpc-engine');
-var _rpcerrors = require('@metamask/rpc-errors');
-function hasRequiredMetadata(request) {
-  if (!request.origin) {
-    throw new Error("Request object is lacking an 'origin'");
-  } else if (typeof request.origin !== "string") {
-    throw new Error(
-      `Request object has an invalid origin of type '${typeof request.origin}'`
-    );
-  } else if (!request.networkClientId) {
-    throw new Error("Request object is lacking a 'networkClientId'");
-  } else if (typeof request.networkClientId !== "string") {
-    throw new Error(
-      `Request object has an invalid networkClientId of type '${typeof request.networkClientId}'`
-    );
-  }
-}
-var createQueuedRequestMiddleware = ({
-  enqueueRequest,
-  useRequestQueue,
-  methodsWithConfirmation
-}) => {
-  return _jsonrpcengine.createAsyncMiddleware.call(void 0, async (req, res, next) => {
-    hasRequiredMetadata(req);
-    if (!useRequestQueue() || !methodsWithConfirmation.includes(req.method)) {
-      return await next();
-    }
-    try {
-      await enqueueRequest(req, next);
-    } catch (error) {
-      res.error = _rpcerrors.serializeError.call(void 0, error);
-    }
-    return void 0;
-  });
-};
-
-
-
-exports.createQueuedRequestMiddleware = createQueuedRequestMiddleware;
-//# sourceMappingURL=chunk-2FGGS72L.js.map
\ No newline at end of file
diff --git a/dist/chunk-2FGGS72L.js.map b/dist/chunk-2FGGS72L.js.map
deleted file mode 100644
index f888a0089f2a455b3a0335fc3f573dd158057f1e..0000000000000000000000000000000000000000
--- a/dist/chunk-2FGGS72L.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"sources":["../src/QueuedRequestMiddleware.ts"],"names":[],"mappings":";AACA,SAAS,6BAA6B;AACtC,SAAS,sBAAsB;AAa/B,SAAS,oBACP,SAC0D;AAC1D,MAAI,CAAC,QAAQ,QAAQ;AACnB,UAAM,IAAI,MAAM,uCAAuC;AAAA,EACzD,WAAW,OAAO,QAAQ,WAAW,UAAU;AAC7C,UAAM,IAAI;AAAA,MACR,iDAAiD,OAAO,QAAQ,MAAM;AAAA,IACxE;AAAA,EACF,WAAW,CAAC,QAAQ,iBAAiB;AACnC,UAAM,IAAI,MAAM,+CAA+C;AAAA,EACjE,WAAW,OAAO,QAAQ,oBAAoB,UAAU;AACtD,UAAM,IAAI;AAAA,MACR,0DAA0D,OAAO,QAAQ,eAAe;AAAA,IAC1F;AAAA,EACF;AACF;AAaO,IAAM,gCAAgC,CAAC;AAAA,EAC5C;AAAA,EACA;AAAA,EACA;AACF,MAI8C;AAC5C,SAAO,sBAAsB,OAAO,KAAqB,KAAK,SAAS;AACrE,wBAAoB,GAAG;AAIvB,QAAI,CAAC,gBAAgB,KAAK,CAAC,wBAAwB,SAAS,IAAI,MAAM,GAAG;AACvE,aAAO,MAAM,KAAK;AAAA,IACpB;AAEA,QAAI;AACF,YAAM,eAAe,KAAK,IAAI;AAAA,IAChC,SAAS,OAAgB;AACvB,UAAI,QAAQ,eAAe,KAAK;AAAA,IAClC;AACA,WAAO;AAAA,EACT,CAAC;AACH","sourcesContent":["import type { JsonRpcMiddleware } from '@metamask/json-rpc-engine';\nimport { createAsyncMiddleware } from '@metamask/json-rpc-engine';\nimport { serializeError } from '@metamask/rpc-errors';\nimport type { Json, JsonRpcParams, JsonRpcRequest } from '@metamask/utils';\n\nimport type { QueuedRequestController } from './QueuedRequestController';\nimport type { QueuedRequestMiddlewareJsonRpcRequest } from './types';\n\n/**\n * Ensure that the incoming request has the additional required request metadata. This metadata\n * should be attached to the request earlier in the middleware pipeline.\n *\n * @param request - The request to check.\n * @throws Throws an error if any required metadata is missing.\n */\nfunction hasRequiredMetadata(\n  request: Record<string, unknown>,\n): asserts request is QueuedRequestMiddlewareJsonRpcRequest {\n  if (!request.origin) {\n    throw new Error(\"Request object is lacking an 'origin'\");\n  } else if (typeof request.origin !== 'string') {\n    throw new Error(\n      `Request object has an invalid origin of type '${typeof request.origin}'`,\n    );\n  } else if (!request.networkClientId) {\n    throw new Error(\"Request object is lacking a 'networkClientId'\");\n  } else if (typeof request.networkClientId !== 'string') {\n    throw new Error(\n      `Request object has an invalid networkClientId of type '${typeof request.networkClientId}'`,\n    );\n  }\n}\n\n/**\n * Creates a JSON-RPC middleware for handling queued requests. This middleware\n * intercepts JSON-RPC requests, checks if they require queueing, and manages\n * their execution based on the specified options.\n *\n * @param options - Configuration options.\n * @param options.enqueueRequest - A method for enqueueing a request.\n * @param options.useRequestQueue - A function that determines if the request queue feature is enabled.\n * @param options.methodsWithConfirmation - A list of methods that can cause a confirmation to be presented to the user.\n * @returns The JSON-RPC middleware that manages queued requests.\n */\nexport const createQueuedRequestMiddleware = ({\n  enqueueRequest,\n  useRequestQueue,\n  methodsWithConfirmation,\n}: {\n  enqueueRequest: QueuedRequestController['enqueueRequest'];\n  useRequestQueue: () => boolean;\n  methodsWithConfirmation: string[];\n}): JsonRpcMiddleware<JsonRpcParams, Json> => {\n  return createAsyncMiddleware(async (req: JsonRpcRequest, res, next) => {\n    hasRequiredMetadata(req);\n\n    // if the request queue feature is turned off, or this method is not a confirmation method\n    // bypass the queue completely\n    if (!useRequestQueue() || !methodsWithConfirmation.includes(req.method)) {\n      return await next();\n    }\n\n    try {\n      await enqueueRequest(req, next);\n    } catch (error: unknown) {\n      res.error = serializeError(error);\n    }\n    return undefined;\n  });\n};\n"]}
\ No newline at end of file
diff --git a/dist/chunk-DHADYPYB.js b/dist/chunk-DHADYPYB.js
new file mode 100644
index 0000000000000000000000000000000000000000..8571439da883e27156c70b2ae3829de16a381553
--- /dev/null
+++ b/dist/chunk-DHADYPYB.js
@@ -0,0 +1,43 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});// src/QueuedRequestMiddleware.ts
+var _jsonrpcengine = require('@metamask/json-rpc-engine');
+var _rpcerrors = require('@metamask/rpc-errors');
+function hasRequiredMetadata(request) {
+  if (!request.origin) {
+    throw new Error("Request object is lacking an 'origin'");
+  } else if (typeof request.origin !== "string") {
+    throw new Error(
+      `Request object has an invalid origin of type '${typeof request.origin}'`
+    );
+  } else if (!request.networkClientId) {
+    throw new Error("Request object is lacking a 'networkClientId'");
+  } else if (typeof request.networkClientId !== "string") {
+    throw new Error(
+      `Request object has an invalid networkClientId of type '${typeof request.networkClientId}'`
+    );
+  }
+}
+var createQueuedRequestMiddleware = ({
+  enqueueRequest,
+  useRequestQueue,
+  // Core PR: https://github.com/MetaMask/core/pull/4423
+  // Patch Branch: jl/patch-queued-request-controller@0.10.0-replace-methods-array-with-callback
+  shouldEnqueueRequest
+}) => {
+  return _jsonrpcengine.createAsyncMiddleware.call(void 0, async (req, res, next) => {
+    hasRequiredMetadata(req);
+    if (!useRequestQueue() || !shouldEnqueueRequest(req)) {
+      return await next();
+    }
+    try {
+      await enqueueRequest(req, next);
+    } catch (error) {
+      res.error = _rpcerrors.serializeError.call(void 0, error);
+    }
+    return void 0;
+  });
+};
+
+
+
+exports.createQueuedRequestMiddleware = createQueuedRequestMiddleware;
+//# sourceMappingURL=chunk-DHADYPYB.js.map
\ No newline at end of file
diff --git a/dist/chunk-DHADYPYB.js.map b/dist/chunk-DHADYPYB.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..e238c037ea94b3baf7eeef1fd94899b2243e2596
--- /dev/null
+++ b/dist/chunk-DHADYPYB.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":["../src/QueuedRequestMiddleware.ts"],"names":[],"mappings":";AACA,SAAS,6BAA6B;AACtC,SAAS,sBAAsB;AAa/B,SAAS,oBACP,SAC0D;AAC1D,MAAI,CAAC,QAAQ,QAAQ;AACnB,UAAM,IAAI,MAAM,uCAAuC;AAAA,EACzD,WAAW,OAAO,QAAQ,WAAW,UAAU;AAC7C,UAAM,IAAI;AAAA,MACR,iDAAiD,OAAO,QAAQ,MAAM;AAAA,IACxE;AAAA,EACF,WAAW,CAAC,QAAQ,iBAAiB;AACnC,UAAM,IAAI,MAAM,+CAA+C;AAAA,EACjE,WAAW,OAAO,QAAQ,oBAAoB,UAAU;AACtD,UAAM,IAAI;AAAA,MACR,0DAA0D,OAAO,QAAQ,eAAe;AAAA,IAC1F;AAAA,EACF;AACF;AAaO,IAAM,gCAAgC,CAAC;AAAA,EAC5C;AAAA,EACA;AAAA;AAAA;AAAA,EAGA;AACF,MAM8C;AAC5C,SAAO,sBAAsB,OAAO,KAAqB,KAAK,SAAS;AACrE,wBAAoB,GAAG;AAMvB,QAAI,CAAC,gBAAgB,KAAK,CAAC,qBAAqB,GAAG,GAAG;AACpD,aAAO,MAAM,KAAK;AAAA,IACpB;AAEA,QAAI;AACF,YAAM,eAAe,KAAK,IAAI;AAAA,IAChC,SAAS,OAAgB;AACvB,UAAI,QAAQ,eAAe,KAAK;AAAA,IAClC;AACA,WAAO;AAAA,EACT,CAAC;AACH","sourcesContent":["import type { JsonRpcMiddleware } from '@metamask/json-rpc-engine';\nimport { createAsyncMiddleware } from '@metamask/json-rpc-engine';\nimport { serializeError } from '@metamask/rpc-errors';\nimport type { Json, JsonRpcParams, JsonRpcRequest } from '@metamask/utils';\n\nimport type { QueuedRequestController } from './QueuedRequestController';\nimport type { QueuedRequestMiddlewareJsonRpcRequest } from './types';\n\n/**\n * Ensure that the incoming request has the additional required request metadata. This metadata\n * should be attached to the request earlier in the middleware pipeline.\n *\n * @param request - The request to check.\n * @throws Throws an error if any required metadata is missing.\n */\nfunction hasRequiredMetadata(\n  request: Record<string, unknown>,\n): asserts request is QueuedRequestMiddlewareJsonRpcRequest {\n  if (!request.origin) {\n    throw new Error(\"Request object is lacking an 'origin'\");\n  } else if (typeof request.origin !== 'string') {\n    throw new Error(\n      `Request object has an invalid origin of type '${typeof request.origin}'`,\n    );\n  } else if (!request.networkClientId) {\n    throw new Error(\"Request object is lacking a 'networkClientId'\");\n  } else if (typeof request.networkClientId !== 'string') {\n    throw new Error(\n      `Request object has an invalid networkClientId of type '${typeof request.networkClientId}'`,\n    );\n  }\n}\n\n/**\n * Creates a JSON-RPC middleware for handling queued requests. This middleware\n * intercepts JSON-RPC requests, checks if they require queueing, and manages\n * their execution based on the specified options.\n *\n * @param options - Configuration options.\n * @param options.enqueueRequest - A method for enqueueing a request.\n * @param options.useRequestQueue - A function that determines if the request queue feature is enabled.\n * @param options.shouldEnqueueRequest - A function that returns if a request should be handled by the QueuedRequestController.\n * @returns The JSON-RPC middleware that manages queued requests.\n */\nexport const createQueuedRequestMiddleware = ({\n  enqueueRequest,\n  useRequestQueue,\n  // Core PR: https://github.com/MetaMask/core/pull/4423\n  // Patch Branch: jl/patch-queued-request-controller@0.10.0-replace-methods-array-with-callback\n  shouldEnqueueRequest,\n}: {\n  enqueueRequest: QueuedRequestController['enqueueRequest'];\n  useRequestQueue: () => boolean;\n  shouldEnqueueRequest: (\n    request: QueuedRequestMiddlewareJsonRpcRequest,\n  ) => boolean;\n}): JsonRpcMiddleware<JsonRpcParams, Json> => {\n  return createAsyncMiddleware(async (req: JsonRpcRequest, res, next) => {\n    hasRequiredMetadata(req);\n\n    // if the request queue feature is turned off, or this method is not a confirmation method\n    // bypass the queue completely\n    // Core PR: https://github.com/MetaMask/core/pull/4423\n    // Patch Branch: jl/patch-queued-request-controller@0.10.0-replace-methods-array-with-callback\n    if (!useRequestQueue() || !shouldEnqueueRequest(req)) {\n      return await next();\n    }\n\n    try {\n      await enqueueRequest(req, next);\n    } catch (error: unknown) {\n      res.error = serializeError(error);\n    }\n    return undefined;\n  });\n};\n"]}
\ No newline at end of file
diff --git a/dist/chunk-EUEPSRVZ.mjs b/dist/chunk-EUEPSRVZ.mjs
deleted file mode 100644
index c2c6b1d1b387a0b774977535e289ea8da77ed4f4..0000000000000000000000000000000000000000
--- a/dist/chunk-EUEPSRVZ.mjs
+++ /dev/null
@@ -1,257 +0,0 @@
-import {
-  __privateAdd,
-  __privateGet,
-  __privateMethod,
-  __privateSet
-} from "./chunk-XUI43LEZ.mjs";
-
-// src/QueuedRequestController.ts
-import { BaseController } from "@metamask/base-controller";
-import { SelectedNetworkControllerEventTypes } from "@metamask/selected-network-controller";
-import { createDeferredPromise } from "@metamask/utils";
-var controllerName = "QueuedRequestController";
-var QueuedRequestControllerActionTypes = {
-  enqueueRequest: `${controllerName}:enqueueRequest`,
-  getState: `${controllerName}:getState`
-};
-var QueuedRequestControllerEventTypes = {
-  networkSwitched: `${controllerName}:networkSwitched`,
-  stateChange: `${controllerName}:stateChange`
-};
-var _originOfCurrentBatch, _requestQueue, _processingRequestCount, _methodsRequiringNetworkSwitch, _clearPendingConfirmations, _registerMessageHandlers, registerMessageHandlers_fn, _flushQueueForOrigin, flushQueueForOrigin_fn, _processNextBatch, processNextBatch_fn, _switchNetworkIfNecessary, switchNetworkIfNecessary_fn, _updateQueuedRequestCount, updateQueuedRequestCount_fn;
-var QueuedRequestController = class extends BaseController {
-  /**
-   * Construct a QueuedRequestController.
-   *
-   * @param options - Controller options.
-   * @param options.messenger - The restricted controller messenger that facilitates communication with other controllers.
-   * @param options.methodsRequiringNetworkSwitch - A list of methods that require the globally selected network to match the dapp selected network.
-   * @param options.clearPendingConfirmations - A function that will clear all the pending confirmations.
-   */
-  constructor({
-    messenger,
-    methodsRequiringNetworkSwitch,
-    clearPendingConfirmations
-  }) {
-    super({
-      name: controllerName,
-      metadata: {
-        queuedRequestCount: {
-          anonymous: true,
-          persist: false
-        }
-      },
-      messenger,
-      state: { queuedRequestCount: 0 }
-    });
-    __privateAdd(this, _registerMessageHandlers);
-    __privateAdd(this, _flushQueueForOrigin);
-    /**
-     * Process the next batch of requests.
-     *
-     * This will trigger the next batch of requests with matching origins to be processed. Each
-     * request in the batch is dequeued one at a time, in chronological order, but they all get
-     * processed in parallel.
-     *
-     * This should be called after a batch of requests has finished processing, if the queue is non-
-     * empty.
-     */
-    __privateAdd(this, _processNextBatch);
-    /**
-     * Switch the globally selected network client to match the network
-     * client of the current batch.
-     *
-     * @throws Throws an error if the current selected `networkClientId` or the
-     * `networkClientId` on the request are invalid.
-     */
-    __privateAdd(this, _switchNetworkIfNecessary);
-    /**
-     * Update the queued request count.
-     */
-    __privateAdd(this, _updateQueuedRequestCount);
-    /**
-     * The origin of the current batch of requests being processed, or `undefined` if there are no
-     * requests currently being processed.
-     */
-    __privateAdd(this, _originOfCurrentBatch, void 0);
-    /**
-     * The list of all queued requests, in chronological order.
-     */
-    __privateAdd(this, _requestQueue, []);
-    /**
-     * The number of requests currently being processed.
-     *
-     * Note that this does not include queued requests, just those being actively processed (i.e.
-     * those in the "current batch").
-     */
-    __privateAdd(this, _processingRequestCount, 0);
-    /**
-     * This is a list of methods that require the globally selected network
-     * to match the dapp selected network before being processed. These can
-     * be for UI/UX reasons where the currently selected network is displayed
-     * in the confirmation even though it will be submitted on the correct
-     * network for the dapp. It could also be that a method expects the
-     * globally selected network to match some value in the request params itself.
-     */
-    __privateAdd(this, _methodsRequiringNetworkSwitch, void 0);
-    __privateAdd(this, _clearPendingConfirmations, void 0);
-    __privateSet(this, _methodsRequiringNetworkSwitch, methodsRequiringNetworkSwitch);
-    __privateSet(this, _clearPendingConfirmations, clearPendingConfirmations);
-    __privateMethod(this, _registerMessageHandlers, registerMessageHandlers_fn).call(this);
-  }
-  /**
-   * Enqueue a request to be processed in a batch with other requests from the same origin.
-   *
-   * We process requests one origin at a time, so that requests from different origins do not get
-   * interwoven, and so that we can ensure that the globally selected network matches the dapp-
-   * selected network.
-   *
-   * Requests get processed in order of insertion, even across origins/batches. All requests get
-   * processed even in the event of preceding requests failing.
-   *
-   * @param request - The JSON-RPC request to process.
-   * @param requestNext - A function representing the next steps for processing this request.
-   * @returns A promise that resolves when the given request has been fully processed.
-   */
-  async enqueueRequest(request, requestNext) {
-    if (__privateGet(this, _originOfCurrentBatch) === void 0) {
-      __privateSet(this, _originOfCurrentBatch, request.origin);
-    }
-    try {
-      if (this.state.queuedRequestCount > 0 || __privateGet(this, _originOfCurrentBatch) !== request.origin) {
-        const {
-          promise: waitForDequeue,
-          reject,
-          resolve
-        } = createDeferredPromise({
-          suppressUnhandledRejection: true
-        });
-        __privateGet(this, _requestQueue).push({
-          origin: request.origin,
-          processRequest: (error) => {
-            if (error) {
-              reject(error);
-            } else {
-              resolve();
-            }
-          }
-        });
-        __privateMethod(this, _updateQueuedRequestCount, updateQueuedRequestCount_fn).call(this);
-        await waitForDequeue;
-      } else if (__privateGet(this, _methodsRequiringNetworkSwitch).includes(request.method)) {
-        await __privateMethod(this, _switchNetworkIfNecessary, switchNetworkIfNecessary_fn).call(this);
-      }
-      __privateSet(this, _processingRequestCount, __privateGet(this, _processingRequestCount) + 1);
-      try {
-        await requestNext();
-      } finally {
-        __privateSet(this, _processingRequestCount, __privateGet(this, _processingRequestCount) - 1);
-      }
-      return void 0;
-    } finally {
-      if (__privateGet(this, _processingRequestCount) === 0) {
-        __privateSet(this, _originOfCurrentBatch, void 0);
-        if (__privateGet(this, _requestQueue).length > 0) {
-          __privateMethod(this, _processNextBatch, processNextBatch_fn).call(this);
-        }
-      }
-    }
-  }
-};
-_originOfCurrentBatch = new WeakMap();
-_requestQueue = new WeakMap();
-_processingRequestCount = new WeakMap();
-_methodsRequiringNetworkSwitch = new WeakMap();
-_clearPendingConfirmations = new WeakMap();
-_registerMessageHandlers = new WeakSet();
-registerMessageHandlers_fn = function() {
-  this.messagingSystem.registerActionHandler(
-    `${controllerName}:enqueueRequest`,
-    this.enqueueRequest.bind(this)
-  );
-  this.messagingSystem.subscribe(
-    SelectedNetworkControllerEventTypes.stateChange,
-    (_, patch) => {
-      patch.forEach(({ op, path }) => {
-        if (path.length === 2 && path[0] === "domains" && typeof path[1] === "string") {
-          const origin = path[1];
-          __privateMethod(this, _flushQueueForOrigin, flushQueueForOrigin_fn).call(this, origin);
-          if (op === "remove" && origin === __privateGet(this, _originOfCurrentBatch)) {
-            __privateGet(this, _clearPendingConfirmations).call(this);
-          }
-        }
-      });
-    }
-  );
-};
-_flushQueueForOrigin = new WeakSet();
-flushQueueForOrigin_fn = function(flushOrigin) {
-  __privateGet(this, _requestQueue).filter(({ origin }) => origin === flushOrigin).forEach(({ processRequest }) => {
-    processRequest(
-      new Error(
-        "The request has been rejected due to a change in selected network. Please verify the selected network and retry the request."
-      )
-    );
-  });
-  __privateSet(this, _requestQueue, __privateGet(this, _requestQueue).filter(
-    ({ origin }) => origin !== flushOrigin
-  ));
-};
-_processNextBatch = new WeakSet();
-processNextBatch_fn = async function() {
-  const firstRequest = __privateGet(this, _requestQueue).shift();
-  __privateSet(this, _originOfCurrentBatch, firstRequest.origin);
-  const batch = [firstRequest.processRequest];
-  while (__privateGet(this, _requestQueue)[0]?.origin === __privateGet(this, _originOfCurrentBatch)) {
-    const nextEntry = __privateGet(this, _requestQueue).shift();
-    batch.push(nextEntry.processRequest);
-  }
-  let networkSwitchError;
-  try {
-    await __privateMethod(this, _switchNetworkIfNecessary, switchNetworkIfNecessary_fn).call(this);
-  } catch (error) {
-    networkSwitchError = error;
-  }
-  for (const processRequest of batch) {
-    processRequest(networkSwitchError);
-  }
-  __privateMethod(this, _updateQueuedRequestCount, updateQueuedRequestCount_fn).call(this);
-};
-_switchNetworkIfNecessary = new WeakSet();
-switchNetworkIfNecessary_fn = async function() {
-  if (!__privateGet(this, _originOfCurrentBatch)) {
-    throw new Error("Current batch origin must be initialized first");
-  }
-  const originNetworkClientId = this.messagingSystem.call(
-    "SelectedNetworkController:getNetworkClientIdForDomain",
-    __privateGet(this, _originOfCurrentBatch)
-  );
-  const { selectedNetworkClientId } = this.messagingSystem.call(
-    "NetworkController:getState"
-  );
-  if (originNetworkClientId === selectedNetworkClientId) {
-    return;
-  }
-  await this.messagingSystem.call(
-    "NetworkController:setActiveNetwork",
-    originNetworkClientId
-  );
-  this.messagingSystem.publish(
-    "QueuedRequestController:networkSwitched",
-    originNetworkClientId
-  );
-};
-_updateQueuedRequestCount = new WeakSet();
-updateQueuedRequestCount_fn = function() {
-  this.update((state) => {
-    state.queuedRequestCount = __privateGet(this, _requestQueue).length;
-  });
-};
-
-export {
-  controllerName,
-  QueuedRequestControllerActionTypes,
-  QueuedRequestControllerEventTypes,
-  QueuedRequestController
-};
-//# sourceMappingURL=chunk-EUEPSRVZ.mjs.map
\ No newline at end of file
diff --git a/dist/chunk-EUEPSRVZ.mjs.map b/dist/chunk-EUEPSRVZ.mjs.map
deleted file mode 100644
index 9ce6fcb52f815f6073f95822eef0ce1581c21b73..0000000000000000000000000000000000000000
--- a/dist/chunk-EUEPSRVZ.mjs.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"sources":["../src/QueuedRequestController.ts"],"sourcesContent":["import type {\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n  RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport { BaseController } from '@metamask/base-controller';\nimport type {\n  NetworkControllerGetStateAction,\n  NetworkControllerSetActiveNetworkAction,\n} from '@metamask/network-controller';\nimport type {\n  SelectedNetworkControllerGetNetworkClientIdForDomainAction,\n  SelectedNetworkControllerStateChangeEvent,\n} from '@metamask/selected-network-controller';\nimport { SelectedNetworkControllerEventTypes } from '@metamask/selected-network-controller';\nimport { createDeferredPromise } from '@metamask/utils';\n\nimport type { QueuedRequestMiddlewareJsonRpcRequest } from './types';\n\nexport const controllerName = 'QueuedRequestController';\n\nexport type QueuedRequestControllerState = {\n  queuedRequestCount: number;\n};\n\nexport const QueuedRequestControllerActionTypes = {\n  enqueueRequest: `${controllerName}:enqueueRequest` as const,\n  getState: `${controllerName}:getState` as const,\n};\n\nexport type QueuedRequestControllerGetStateAction = ControllerGetStateAction<\n  typeof controllerName,\n  QueuedRequestControllerState\n>;\n\nexport type QueuedRequestControllerEnqueueRequestAction = {\n  type: typeof QueuedRequestControllerActionTypes.enqueueRequest;\n  handler: QueuedRequestController['enqueueRequest'];\n};\n\nexport const QueuedRequestControllerEventTypes = {\n  networkSwitched: `${controllerName}:networkSwitched` as const,\n  stateChange: `${controllerName}:stateChange` as const,\n};\n\nexport type QueuedRequestControllerStateChangeEvent =\n  ControllerStateChangeEvent<\n    typeof controllerName,\n    QueuedRequestControllerState\n  >;\n\nexport type QueuedRequestControllerNetworkSwitched = {\n  type: typeof QueuedRequestControllerEventTypes.networkSwitched;\n  payload: [string];\n};\n\nexport type QueuedRequestControllerEvents =\n  | QueuedRequestControllerStateChangeEvent\n  | QueuedRequestControllerNetworkSwitched;\n\nexport type QueuedRequestControllerActions =\n  | QueuedRequestControllerGetStateAction\n  | QueuedRequestControllerEnqueueRequestAction;\n\nexport type AllowedActions =\n  | NetworkControllerGetStateAction\n  | NetworkControllerSetActiveNetworkAction\n  | SelectedNetworkControllerGetNetworkClientIdForDomainAction;\n\nexport type AllowedEvents = SelectedNetworkControllerStateChangeEvent;\n\nexport type QueuedRequestControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  QueuedRequestControllerActions | AllowedActions,\n  QueuedRequestControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\nexport type QueuedRequestControllerOptions = {\n  messenger: QueuedRequestControllerMessenger;\n  methodsRequiringNetworkSwitch: string[];\n  clearPendingConfirmations: () => void;\n};\n\n/**\n * A queued request.\n */\ntype QueuedRequest = {\n  /**\n   * The origin of the queued request.\n   */\n  origin: string;\n  /**\n   * A callback used to continue processing the request, called when the request is dequeued.\n   */\n  processRequest: (error: unknown) => void;\n};\n\n/**\n * Queue requests for processing in batches, by request origin.\n *\n * Processing requests in batches allows us to completely separate sets of requests that originate\n * from different origins. This ensures that our UI will not display those requests as a set, which\n * could mislead users into thinking they are related.\n *\n * Queuing requests in batches also allows us to ensure the globally selected network matches the\n * dapp-selected network, before the confirmation UI is rendered. This is important because the\n * data shown on some confirmation screens is only collected for the globally selected network.\n *\n * Requests get processed in order of insertion, even across batches. All requests get processed\n * even in the event of preceding requests failing.\n */\nexport class QueuedRequestController extends BaseController<\n  typeof controllerName,\n  QueuedRequestControllerState,\n  QueuedRequestControllerMessenger\n> {\n  /**\n   * The origin of the current batch of requests being processed, or `undefined` if there are no\n   * requests currently being processed.\n   */\n  #originOfCurrentBatch: string | undefined;\n\n  /**\n   * The list of all queued requests, in chronological order.\n   */\n  #requestQueue: QueuedRequest[] = [];\n\n  /**\n   * The number of requests currently being processed.\n   *\n   * Note that this does not include queued requests, just those being actively processed (i.e.\n   * those in the \"current batch\").\n   */\n  #processingRequestCount = 0;\n\n  /**\n   * This is a list of methods that require the globally selected network\n   * to match the dapp selected network before being processed. These can\n   * be for UI/UX reasons where the currently selected network is displayed\n   * in the confirmation even though it will be submitted on the correct\n   * network for the dapp. It could also be that a method expects the\n   * globally selected network to match some value in the request params itself.\n   */\n  readonly #methodsRequiringNetworkSwitch: string[];\n\n  #clearPendingConfirmations: () => void;\n\n  /**\n   * Construct a QueuedRequestController.\n   *\n   * @param options - Controller options.\n   * @param options.messenger - The restricted controller messenger that facilitates communication with other controllers.\n   * @param options.methodsRequiringNetworkSwitch - A list of methods that require the globally selected network to match the dapp selected network.\n   * @param options.clearPendingConfirmations - A function that will clear all the pending confirmations.\n   */\n  constructor({\n    messenger,\n    methodsRequiringNetworkSwitch,\n    clearPendingConfirmations,\n  }: QueuedRequestControllerOptions) {\n    super({\n      name: controllerName,\n      metadata: {\n        queuedRequestCount: {\n          anonymous: true,\n          persist: false,\n        },\n      },\n      messenger,\n      state: { queuedRequestCount: 0 },\n    });\n    this.#methodsRequiringNetworkSwitch = methodsRequiringNetworkSwitch;\n    this.#clearPendingConfirmations = clearPendingConfirmations;\n    this.#registerMessageHandlers();\n  }\n\n  #registerMessageHandlers(): void {\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:enqueueRequest`,\n      this.enqueueRequest.bind(this),\n    );\n\n    this.messagingSystem.subscribe(\n      SelectedNetworkControllerEventTypes.stateChange,\n      (_, patch) => {\n        patch.forEach(({ op, path }) => {\n          if (\n            path.length === 2 &&\n            path[0] === 'domains' &&\n            typeof path[1] === 'string'\n          ) {\n            const origin = path[1];\n            this.#flushQueueForOrigin(origin);\n            // When a domain is removed from SelectedNetworkController, its because of revoke permissions.\n            // Rather than subscribe to the permissions controller event in addition to the selectedNetworkController ones, we simplify it and just handle remove on this event alone.\n            if (op === 'remove' && origin === this.#originOfCurrentBatch) {\n              this.#clearPendingConfirmations();\n            }\n          }\n        });\n      },\n    );\n  }\n\n  #flushQueueForOrigin(flushOrigin: string) {\n    this.#requestQueue\n      .filter(({ origin }) => origin === flushOrigin)\n      .forEach(({ processRequest }) => {\n        processRequest(\n          new Error(\n            'The request has been rejected due to a change in selected network. Please verify the selected network and retry the request.',\n          ),\n        );\n      });\n    this.#requestQueue = this.#requestQueue.filter(\n      ({ origin }) => origin !== flushOrigin,\n    );\n  }\n\n  /**\n   * Process the next batch of requests.\n   *\n   * This will trigger the next batch of requests with matching origins to be processed. Each\n   * request in the batch is dequeued one at a time, in chronological order, but they all get\n   * processed in parallel.\n   *\n   * This should be called after a batch of requests has finished processing, if the queue is non-\n   * empty.\n   */\n  async #processNextBatch() {\n    const firstRequest = this.#requestQueue.shift() as QueuedRequest;\n    this.#originOfCurrentBatch = firstRequest.origin;\n    const batch = [firstRequest.processRequest];\n    while (this.#requestQueue[0]?.origin === this.#originOfCurrentBatch) {\n      const nextEntry = this.#requestQueue.shift() as QueuedRequest;\n      batch.push(nextEntry.processRequest);\n    }\n\n    // If globally selected network is different from origin selected network,\n    // switch network before processing batch\n    let networkSwitchError: unknown;\n    try {\n      await this.#switchNetworkIfNecessary();\n    } catch (error: unknown) {\n      networkSwitchError = error;\n    }\n\n    for (const processRequest of batch) {\n      processRequest(networkSwitchError);\n    }\n    this.#updateQueuedRequestCount();\n  }\n\n  /**\n   * Switch the globally selected network client to match the network\n   * client of the current batch.\n   *\n   * @throws Throws an error if the current selected `networkClientId` or the\n   * `networkClientId` on the request are invalid.\n   */\n  async #switchNetworkIfNecessary() {\n    // This branch is unreachable; it's just here for type reasons.\n    /* istanbul ignore next */\n    if (!this.#originOfCurrentBatch) {\n      throw new Error('Current batch origin must be initialized first');\n    }\n    const originNetworkClientId = this.messagingSystem.call(\n      'SelectedNetworkController:getNetworkClientIdForDomain',\n      this.#originOfCurrentBatch,\n    );\n    const { selectedNetworkClientId } = this.messagingSystem.call(\n      'NetworkController:getState',\n    );\n    if (originNetworkClientId === selectedNetworkClientId) {\n      return;\n    }\n\n    await this.messagingSystem.call(\n      'NetworkController:setActiveNetwork',\n      originNetworkClientId,\n    );\n\n    this.messagingSystem.publish(\n      'QueuedRequestController:networkSwitched',\n      originNetworkClientId,\n    );\n  }\n\n  /**\n   * Update the queued request count.\n   */\n  #updateQueuedRequestCount() {\n    this.update((state) => {\n      state.queuedRequestCount = this.#requestQueue.length;\n    });\n  }\n\n  /**\n   * Enqueue a request to be processed in a batch with other requests from the same origin.\n   *\n   * We process requests one origin at a time, so that requests from different origins do not get\n   * interwoven, and so that we can ensure that the globally selected network matches the dapp-\n   * selected network.\n   *\n   * Requests get processed in order of insertion, even across origins/batches. All requests get\n   * processed even in the event of preceding requests failing.\n   *\n   * @param request - The JSON-RPC request to process.\n   * @param requestNext - A function representing the next steps for processing this request.\n   * @returns A promise that resolves when the given request has been fully processed.\n   */\n  async enqueueRequest(\n    request: QueuedRequestMiddlewareJsonRpcRequest,\n    requestNext: () => Promise<void>,\n  ): Promise<void> {\n    if (this.#originOfCurrentBatch === undefined) {\n      this.#originOfCurrentBatch = request.origin;\n    }\n\n    try {\n      // Queue request for later processing\n      // Network switch is handled when this batch is processed\n      if (\n        this.state.queuedRequestCount > 0 ||\n        this.#originOfCurrentBatch !== request.origin\n      ) {\n        const {\n          promise: waitForDequeue,\n          reject,\n          resolve,\n        } = createDeferredPromise({\n          suppressUnhandledRejection: true,\n        });\n        this.#requestQueue.push({\n          origin: request.origin,\n          processRequest: (error: unknown) => {\n            if (error) {\n              reject(error);\n            } else {\n              resolve();\n            }\n          },\n        });\n        this.#updateQueuedRequestCount();\n\n        await waitForDequeue;\n      } else if (this.#methodsRequiringNetworkSwitch.includes(request.method)) {\n        // Process request immediately\n        // Requires switching network now if necessary\n        await this.#switchNetworkIfNecessary();\n      }\n      this.#processingRequestCount += 1;\n      try {\n        await requestNext();\n      } finally {\n        this.#processingRequestCount -= 1;\n      }\n      return undefined;\n    } finally {\n      if (this.#processingRequestCount === 0) {\n        this.#originOfCurrentBatch = undefined;\n        if (this.#requestQueue.length > 0) {\n          // The next batch is triggered here. We intentionally omit the `await` because we don't\n          // want the next batch to block resolution of the current request.\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.#processNextBatch();\n        }\n      }\n    }\n  }\n}\n"],"mappings":"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","names":[]}
\ No newline at end of file
diff --git a/dist/chunk-GYWQP5VQ.js b/dist/chunk-GYWQP5VQ.js
new file mode 100644
index 0000000000000000000000000000000000000000..997fa9568187cfa4a7450288214abc426f313b88
--- /dev/null
+++ b/dist/chunk-GYWQP5VQ.js
@@ -0,0 +1,261 @@
+"use strict";Object.defineProperty(exports, "__esModule", {value: true});
+
+
+
+
+var _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');
+
+// src/QueuedRequestController.ts
+var _basecontroller = require('@metamask/base-controller');
+var _selectednetworkcontroller = require('@metamask/selected-network-controller');
+var _utils = require('@metamask/utils');
+var controllerName = "QueuedRequestController";
+var QueuedRequestControllerActionTypes = {
+  enqueueRequest: `${controllerName}:enqueueRequest`,
+  getState: `${controllerName}:getState`
+};
+var QueuedRequestControllerEventTypes = {
+  networkSwitched: `${controllerName}:networkSwitched`,
+  stateChange: `${controllerName}:stateChange`
+};
+var _originOfCurrentBatch, _requestQueue, _processingRequestCount, _shouldRequestSwitchNetwork, _clearPendingConfirmations, _registerMessageHandlers, registerMessageHandlers_fn, _flushQueueForOrigin, flushQueueForOrigin_fn, _processNextBatch, processNextBatch_fn, _switchNetworkIfNecessary, switchNetworkIfNecessary_fn, _updateQueuedRequestCount, updateQueuedRequestCount_fn;
+var QueuedRequestController = class extends _basecontroller.BaseController {
+  /**
+   * Construct a QueuedRequestController.
+   *
+   * @param options - Controller options.
+   * @param options.messenger - The restricted controller messenger that facilitates communication with other controllers.
+   * @param options.shouldRequestSwitchNetwork - A function that returns if a request requires the globally selected network to match the dapp selected network.
+   * @param options.clearPendingConfirmations - A function that will clear all the pending confirmations.
+   */
+  constructor({
+    messenger,
+    // Core PR: https://github.com/MetaMask/core/pull/4423
+    // Patch Branch: jl/patch-queued-request-controller@0.10.0-replace-methods-array-with-callback
+    shouldRequestSwitchNetwork,
+    clearPendingConfirmations
+  }) {
+    super({
+      name: controllerName,
+      metadata: {
+        queuedRequestCount: {
+          anonymous: true,
+          persist: false
+        }
+      },
+      messenger,
+      state: { queuedRequestCount: 0 }
+    });
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _registerMessageHandlers);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _flushQueueForOrigin);
+    /**
+     * Process the next batch of requests.
+     *
+     * This will trigger the next batch of requests with matching origins to be processed. Each
+     * request in the batch is dequeued one at a time, in chronological order, but they all get
+     * processed in parallel.
+     *
+     * This should be called after a batch of requests has finished processing, if the queue is non-
+     * empty.
+     */
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _processNextBatch);
+    /**
+     * Switch the globally selected network client to match the network
+     * client of the current batch.
+     *
+     * @throws Throws an error if the current selected `networkClientId` or the
+     * `networkClientId` on the request are invalid.
+     */
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _switchNetworkIfNecessary);
+    /**
+     * Update the queued request count.
+     */
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _updateQueuedRequestCount);
+    /**
+     * The origin of the current batch of requests being processed, or `undefined` if there are no
+     * requests currently being processed.
+     */
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _originOfCurrentBatch, void 0);
+    /**
+     * The list of all queued requests, in chronological order.
+     */
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _requestQueue, []);
+    /**
+     * The number of requests currently being processed.
+     *
+     * Note that this does not include queued requests, just those being actively processed (i.e.
+     * those in the "current batch").
+     */
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _processingRequestCount, 0);
+    /**
+     * This is a function that returns true if a request requires the globally selected
+     * network to match the dapp selected network before being processed. These can
+     * be for UI/UX reasons where the currently selected network is displayed
+     * in the confirmation even though it will be submitted on the correct
+     * network for the dapp. It could also be that a method expects the
+     * globally selected network to match some value in the request params itself.
+     */
+    // Core PR: https://github.com/MetaMask/core/pull/4423
+    // Patch Branch: jl/patch-queued-request-controller@0.10.0-replace-methods-array-with-callback
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _shouldRequestSwitchNetwork, void 0);
+    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _clearPendingConfirmations, void 0);
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _shouldRequestSwitchNetwork, shouldRequestSwitchNetwork);
+    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _clearPendingConfirmations, clearPendingConfirmations);
+    _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _registerMessageHandlers, registerMessageHandlers_fn).call(this);
+  }
+  /**
+   * Enqueue a request to be processed in a batch with other requests from the same origin.
+   *
+   * We process requests one origin at a time, so that requests from different origins do not get
+   * interwoven, and so that we can ensure that the globally selected network matches the dapp-
+   * selected network.
+   *
+   * Requests get processed in order of insertion, even across origins/batches. All requests get
+   * processed even in the event of preceding requests failing.
+   *
+   * @param request - The JSON-RPC request to process.
+   * @param requestNext - A function representing the next steps for processing this request.
+   * @returns A promise that resolves when the given request has been fully processed.
+   */
+  async enqueueRequest(request, requestNext) {
+    if (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _originOfCurrentBatch) === void 0) {
+      _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _originOfCurrentBatch, request.origin);
+    }
+    try {
+      if (this.state.queuedRequestCount > 0 || _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _originOfCurrentBatch) !== request.origin) {
+        const {
+          promise: waitForDequeue,
+          reject,
+          resolve
+        } = _utils.createDeferredPromise.call(void 0, {
+          suppressUnhandledRejection: true
+        });
+        _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _requestQueue).push({
+          origin: request.origin,
+          processRequest: (error) => {
+            if (error) {
+              reject(error);
+            } else {
+              resolve();
+            }
+          }
+        });
+        _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _updateQueuedRequestCount, updateQueuedRequestCount_fn).call(this);
+        await waitForDequeue;
+      } else if (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _shouldRequestSwitchNetwork).call(this, request)) {
+        await _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _switchNetworkIfNecessary, switchNetworkIfNecessary_fn).call(this);
+      }
+      _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _processingRequestCount, _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _processingRequestCount) + 1);
+      try {
+        await requestNext();
+      } finally {
+        _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _processingRequestCount, _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _processingRequestCount) - 1);
+      }
+      return void 0;
+    } finally {
+      if (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _processingRequestCount) === 0) {
+        _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _originOfCurrentBatch, void 0);
+        if (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _requestQueue).length > 0) {
+          _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _processNextBatch, processNextBatch_fn).call(this);
+        }
+      }
+    }
+  }
+};
+_originOfCurrentBatch = new WeakMap();
+_requestQueue = new WeakMap();
+_processingRequestCount = new WeakMap();
+_shouldRequestSwitchNetwork = new WeakMap();
+_clearPendingConfirmations = new WeakMap();
+_registerMessageHandlers = new WeakSet();
+registerMessageHandlers_fn = function() {
+  this.messagingSystem.registerActionHandler(
+    `${controllerName}:enqueueRequest`,
+    this.enqueueRequest.bind(this)
+  );
+  this.messagingSystem.subscribe(
+    _selectednetworkcontroller.SelectedNetworkControllerEventTypes.stateChange,
+    (_, patch) => {
+      patch.forEach(({ op, path }) => {
+        if (path.length === 2 && path[0] === "domains" && typeof path[1] === "string") {
+          const origin = path[1];
+          _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _flushQueueForOrigin, flushQueueForOrigin_fn).call(this, origin);
+          if (op === "remove" && origin === _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _originOfCurrentBatch)) {
+            _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _clearPendingConfirmations).call(this);
+          }
+        }
+      });
+    }
+  );
+};
+_flushQueueForOrigin = new WeakSet();
+flushQueueForOrigin_fn = function(flushOrigin) {
+  _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _requestQueue).filter(({ origin }) => origin === flushOrigin).forEach(({ processRequest }) => {
+    processRequest(
+      new Error(
+        "The request has been rejected due to a change in selected network. Please verify the selected network and retry the request."
+      )
+    );
+  });
+  _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _requestQueue, _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _requestQueue).filter(
+    ({ origin }) => origin !== flushOrigin
+  ));
+};
+_processNextBatch = new WeakSet();
+processNextBatch_fn = async function() {
+  const firstRequest = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _requestQueue).shift();
+  _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _originOfCurrentBatch, firstRequest.origin);
+  const batch = [firstRequest.processRequest];
+  while (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _requestQueue)[0]?.origin === _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _originOfCurrentBatch)) {
+    const nextEntry = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _requestQueue).shift();
+    batch.push(nextEntry.processRequest);
+  }
+  let networkSwitchError;
+  try {
+    await _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _switchNetworkIfNecessary, switchNetworkIfNecessary_fn).call(this);
+  } catch (error) {
+    networkSwitchError = error;
+  }
+  for (const processRequest of batch) {
+    processRequest(networkSwitchError);
+  }
+  _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _updateQueuedRequestCount, updateQueuedRequestCount_fn).call(this);
+};
+_switchNetworkIfNecessary = new WeakSet();
+switchNetworkIfNecessary_fn = async function() {
+  if (!_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _originOfCurrentBatch)) {
+    throw new Error("Current batch origin must be initialized first");
+  }
+  const originNetworkClientId = this.messagingSystem.call(
+    "SelectedNetworkController:getNetworkClientIdForDomain",
+    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _originOfCurrentBatch)
+  );
+  const { selectedNetworkClientId } = this.messagingSystem.call(
+    "NetworkController:getState"
+  );
+  if (originNetworkClientId === selectedNetworkClientId) {
+    return;
+  }
+  await this.messagingSystem.call(
+    "NetworkController:setActiveNetwork",
+    originNetworkClientId
+  );
+  this.messagingSystem.publish(
+    "QueuedRequestController:networkSwitched",
+    originNetworkClientId
+  );
+};
+_updateQueuedRequestCount = new WeakSet();
+updateQueuedRequestCount_fn = function() {
+  this.update((state) => {
+    state.queuedRequestCount = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _requestQueue).length;
+  });
+};
+
+
+
+
+
+
+exports.controllerName = controllerName; exports.QueuedRequestControllerActionTypes = QueuedRequestControllerActionTypes; exports.QueuedRequestControllerEventTypes = QueuedRequestControllerEventTypes; exports.QueuedRequestController = QueuedRequestController;
+//# sourceMappingURL=chunk-GYWQP5VQ.js.map
\ No newline at end of file
diff --git a/dist/chunk-GYWQP5VQ.js.map b/dist/chunk-GYWQP5VQ.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..7bde665a67bbf5db7da0d6a85cc01460947d01fa
--- /dev/null
+++ b/dist/chunk-GYWQP5VQ.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":["../src/QueuedRequestController.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n  RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport { BaseController } from '@metamask/base-controller';\nimport type {\n  NetworkControllerGetStateAction,\n  NetworkControllerSetActiveNetworkAction,\n} from '@metamask/network-controller';\nimport type {\n  SelectedNetworkControllerGetNetworkClientIdForDomainAction,\n  SelectedNetworkControllerStateChangeEvent,\n} from '@metamask/selected-network-controller';\nimport { SelectedNetworkControllerEventTypes } from '@metamask/selected-network-controller';\nimport { createDeferredPromise } from '@metamask/utils';\n\nimport type { QueuedRequestMiddlewareJsonRpcRequest } from './types';\n\nexport const controllerName = 'QueuedRequestController';\n\nexport type QueuedRequestControllerState = {\n  queuedRequestCount: number;\n};\n\nexport const QueuedRequestControllerActionTypes = {\n  enqueueRequest: `${controllerName}:enqueueRequest` as const,\n  getState: `${controllerName}:getState` as const,\n};\n\nexport type QueuedRequestControllerGetStateAction = ControllerGetStateAction<\n  typeof controllerName,\n  QueuedRequestControllerState\n>;\n\nexport type QueuedRequestControllerEnqueueRequestAction = {\n  type: typeof QueuedRequestControllerActionTypes.enqueueRequest;\n  handler: QueuedRequestController['enqueueRequest'];\n};\n\nexport const QueuedRequestControllerEventTypes = {\n  networkSwitched: `${controllerName}:networkSwitched` as const,\n  stateChange: `${controllerName}:stateChange` as const,\n};\n\nexport type QueuedRequestControllerStateChangeEvent =\n  ControllerStateChangeEvent<\n    typeof controllerName,\n    QueuedRequestControllerState\n  >;\n\nexport type QueuedRequestControllerNetworkSwitched = {\n  type: typeof QueuedRequestControllerEventTypes.networkSwitched;\n  payload: [string];\n};\n\nexport type QueuedRequestControllerEvents =\n  | QueuedRequestControllerStateChangeEvent\n  | QueuedRequestControllerNetworkSwitched;\n\nexport type QueuedRequestControllerActions =\n  | QueuedRequestControllerGetStateAction\n  | QueuedRequestControllerEnqueueRequestAction;\n\nexport type AllowedActions =\n  | NetworkControllerGetStateAction\n  | NetworkControllerSetActiveNetworkAction\n  | SelectedNetworkControllerGetNetworkClientIdForDomainAction;\n\nexport type AllowedEvents = SelectedNetworkControllerStateChangeEvent;\n\nexport type QueuedRequestControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  QueuedRequestControllerActions | AllowedActions,\n  QueuedRequestControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\nexport type QueuedRequestControllerOptions = {\n  messenger: QueuedRequestControllerMessenger;\n  shouldRequestSwitchNetwork: (\n    request: QueuedRequestMiddlewareJsonRpcRequest,\n  ) => boolean;\n  clearPendingConfirmations: () => void;\n};\n\n/**\n * A queued request.\n */\ntype QueuedRequest = {\n  /**\n   * The origin of the queued request.\n   */\n  origin: string;\n  /**\n   * A callback used to continue processing the request, called when the request is dequeued.\n   */\n  processRequest: (error: unknown) => void;\n};\n\n/**\n * Queue requests for processing in batches, by request origin.\n *\n * Processing requests in batches allows us to completely separate sets of requests that originate\n * from different origins. This ensures that our UI will not display those requests as a set, which\n * could mislead users into thinking they are related.\n *\n * Queuing requests in batches also allows us to ensure the globally selected network matches the\n * dapp-selected network, before the confirmation UI is rendered. This is important because the\n * data shown on some confirmation screens is only collected for the globally selected network.\n *\n * Requests get processed in order of insertion, even across batches. All requests get processed\n * even in the event of preceding requests failing.\n */\nexport class QueuedRequestController extends BaseController<\n  typeof controllerName,\n  QueuedRequestControllerState,\n  QueuedRequestControllerMessenger\n> {\n  /**\n   * The origin of the current batch of requests being processed, or `undefined` if there are no\n   * requests currently being processed.\n   */\n  #originOfCurrentBatch: string | undefined;\n\n  /**\n   * The list of all queued requests, in chronological order.\n   */\n  #requestQueue: QueuedRequest[] = [];\n\n  /**\n   * The number of requests currently being processed.\n   *\n   * Note that this does not include queued requests, just those being actively processed (i.e.\n   * those in the \"current batch\").\n   */\n  #processingRequestCount = 0;\n\n  /**\n   * This is a function that returns true if a request requires the globally selected\n   * network to match the dapp selected network before being processed. These can\n   * be for UI/UX reasons where the currently selected network is displayed\n   * in the confirmation even though it will be submitted on the correct\n   * network for the dapp. It could also be that a method expects the\n   * globally selected network to match some value in the request params itself.\n   */\n  // Core PR: https://github.com/MetaMask/core/pull/4423\n  // Patch Branch: jl/patch-queued-request-controller@0.10.0-replace-methods-array-with-callback\n  readonly #shouldRequestSwitchNetwork: (\n    request: QueuedRequestMiddlewareJsonRpcRequest,\n  ) => boolean;\n\n  #clearPendingConfirmations: () => void;\n\n  /**\n   * Construct a QueuedRequestController.\n   *\n   * @param options - Controller options.\n   * @param options.messenger - The restricted controller messenger that facilitates communication with other controllers.\n   * @param options.shouldRequestSwitchNetwork - A function that returns if a request requires the globally selected network to match the dapp selected network.\n   * @param options.clearPendingConfirmations - A function that will clear all the pending confirmations.\n   */\n  constructor({\n    messenger,\n    // Core PR: https://github.com/MetaMask/core/pull/4423\n    // Patch Branch: jl/patch-queued-request-controller@0.10.0-replace-methods-array-with-callback\n    shouldRequestSwitchNetwork,\n    clearPendingConfirmations,\n  }: QueuedRequestControllerOptions) {\n    super({\n      name: controllerName,\n      metadata: {\n        queuedRequestCount: {\n          anonymous: true,\n          persist: false,\n        },\n      },\n      messenger,\n      state: { queuedRequestCount: 0 },\n    });\n    // Core PR: https://github.com/MetaMask/core/pull/4423\n    // Patch Branch: jl/patch-queued-request-controller@0.10.0-replace-methods-array-with-callback\n    this.#shouldRequestSwitchNetwork = shouldRequestSwitchNetwork;\n    this.#clearPendingConfirmations = clearPendingConfirmations;\n    this.#registerMessageHandlers();\n  }\n\n  #registerMessageHandlers(): void {\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:enqueueRequest`,\n      this.enqueueRequest.bind(this),\n    );\n\n    this.messagingSystem.subscribe(\n      SelectedNetworkControllerEventTypes.stateChange,\n      (_, patch) => {\n        patch.forEach(({ op, path }) => {\n          if (\n            path.length === 2 &&\n            path[0] === 'domains' &&\n            typeof path[1] === 'string'\n          ) {\n            const origin = path[1];\n            this.#flushQueueForOrigin(origin);\n            // When a domain is removed from SelectedNetworkController, its because of revoke permissions.\n            // Rather than subscribe to the permissions controller event in addition to the selectedNetworkController ones, we simplify it and just handle remove on this event alone.\n            if (op === 'remove' && origin === this.#originOfCurrentBatch) {\n              this.#clearPendingConfirmations();\n            }\n          }\n        });\n      },\n    );\n  }\n\n  #flushQueueForOrigin(flushOrigin: string) {\n    this.#requestQueue\n      .filter(({ origin }) => origin === flushOrigin)\n      .forEach(({ processRequest }) => {\n        processRequest(\n          new Error(\n            'The request has been rejected due to a change in selected network. Please verify the selected network and retry the request.',\n          ),\n        );\n      });\n    this.#requestQueue = this.#requestQueue.filter(\n      ({ origin }) => origin !== flushOrigin,\n    );\n  }\n\n  /**\n   * Process the next batch of requests.\n   *\n   * This will trigger the next batch of requests with matching origins to be processed. Each\n   * request in the batch is dequeued one at a time, in chronological order, but they all get\n   * processed in parallel.\n   *\n   * This should be called after a batch of requests has finished processing, if the queue is non-\n   * empty.\n   */\n  async #processNextBatch() {\n    const firstRequest = this.#requestQueue.shift() as QueuedRequest;\n    this.#originOfCurrentBatch = firstRequest.origin;\n    const batch = [firstRequest.processRequest];\n    while (this.#requestQueue[0]?.origin === this.#originOfCurrentBatch) {\n      const nextEntry = this.#requestQueue.shift() as QueuedRequest;\n      batch.push(nextEntry.processRequest);\n    }\n\n    // If globally selected network is different from origin selected network,\n    // switch network before processing batch\n    let networkSwitchError: unknown;\n    try {\n      await this.#switchNetworkIfNecessary();\n    } catch (error: unknown) {\n      networkSwitchError = error;\n    }\n\n    for (const processRequest of batch) {\n      processRequest(networkSwitchError);\n    }\n    this.#updateQueuedRequestCount();\n  }\n\n  /**\n   * Switch the globally selected network client to match the network\n   * client of the current batch.\n   *\n   * @throws Throws an error if the current selected `networkClientId` or the\n   * `networkClientId` on the request are invalid.\n   */\n  async #switchNetworkIfNecessary() {\n    // This branch is unreachable; it's just here for type reasons.\n    /* istanbul ignore next */\n    if (!this.#originOfCurrentBatch) {\n      throw new Error('Current batch origin must be initialized first');\n    }\n    const originNetworkClientId = this.messagingSystem.call(\n      'SelectedNetworkController:getNetworkClientIdForDomain',\n      this.#originOfCurrentBatch,\n    );\n    const { selectedNetworkClientId } = this.messagingSystem.call(\n      'NetworkController:getState',\n    );\n    if (originNetworkClientId === selectedNetworkClientId) {\n      return;\n    }\n\n    await this.messagingSystem.call(\n      'NetworkController:setActiveNetwork',\n      originNetworkClientId,\n    );\n\n    this.messagingSystem.publish(\n      'QueuedRequestController:networkSwitched',\n      originNetworkClientId,\n    );\n  }\n\n  /**\n   * Update the queued request count.\n   */\n  #updateQueuedRequestCount() {\n    this.update((state) => {\n      state.queuedRequestCount = this.#requestQueue.length;\n    });\n  }\n\n  /**\n   * Enqueue a request to be processed in a batch with other requests from the same origin.\n   *\n   * We process requests one origin at a time, so that requests from different origins do not get\n   * interwoven, and so that we can ensure that the globally selected network matches the dapp-\n   * selected network.\n   *\n   * Requests get processed in order of insertion, even across origins/batches. All requests get\n   * processed even in the event of preceding requests failing.\n   *\n   * @param request - The JSON-RPC request to process.\n   * @param requestNext - A function representing the next steps for processing this request.\n   * @returns A promise that resolves when the given request has been fully processed.\n   */\n  async enqueueRequest(\n    request: QueuedRequestMiddlewareJsonRpcRequest,\n    requestNext: () => Promise<void>,\n  ): Promise<void> {\n    if (this.#originOfCurrentBatch === undefined) {\n      this.#originOfCurrentBatch = request.origin;\n    }\n\n    try {\n      // Queue request for later processing\n      // Network switch is handled when this batch is processed\n      if (\n        this.state.queuedRequestCount > 0 ||\n        this.#originOfCurrentBatch !== request.origin\n      ) {\n        const {\n          promise: waitForDequeue,\n          reject,\n          resolve,\n        } = createDeferredPromise({\n          suppressUnhandledRejection: true,\n        });\n        this.#requestQueue.push({\n          origin: request.origin,\n          processRequest: (error: unknown) => {\n            if (error) {\n              reject(error);\n            } else {\n              resolve();\n            }\n          },\n        });\n        this.#updateQueuedRequestCount();\n\n        await waitForDequeue;\n      } else if (this.#shouldRequestSwitchNetwork(request)) {\n        // Core PR: https://github.com/MetaMask/core/pull/4423\n        // Patch Branch: jl/patch-queued-request-controller@0.10.0-replace-methods-array-with-callback\n        // Process request immediately\n        // Requires switching network now if necessary\n        await this.#switchNetworkIfNecessary();\n      }\n      this.#processingRequestCount += 1;\n      try {\n        await requestNext();\n      } finally {\n        this.#processingRequestCount -= 1;\n      }\n      return undefined;\n    } finally {\n      if (this.#processingRequestCount === 0) {\n        this.#originOfCurrentBatch = undefined;\n        if (this.#requestQueue.length > 0) {\n          // The next batch is triggered here. We intentionally omit the `await` because we don't\n          // want the next batch to block resolution of the current request.\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.#processNextBatch();\n        }\n      }\n    }\n  }\n}\n"]}
\ No newline at end of file
diff --git a/dist/chunk-O3GWRZOC.js b/dist/chunk-O3GWRZOC.js
deleted file mode 100644
index 21e12fd1bc7918bfdb22679f102b858a84862631..0000000000000000000000000000000000000000
--- a/dist/chunk-O3GWRZOC.js
+++ /dev/null
@@ -1,257 +0,0 @@
-"use strict";Object.defineProperty(exports, "__esModule", {value: true});
-
-
-
-
-var _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');
-
-// src/QueuedRequestController.ts
-var _basecontroller = require('@metamask/base-controller');
-var _selectednetworkcontroller = require('@metamask/selected-network-controller');
-var _utils = require('@metamask/utils');
-var controllerName = "QueuedRequestController";
-var QueuedRequestControllerActionTypes = {
-  enqueueRequest: `${controllerName}:enqueueRequest`,
-  getState: `${controllerName}:getState`
-};
-var QueuedRequestControllerEventTypes = {
-  networkSwitched: `${controllerName}:networkSwitched`,
-  stateChange: `${controllerName}:stateChange`
-};
-var _originOfCurrentBatch, _requestQueue, _processingRequestCount, _methodsRequiringNetworkSwitch, _clearPendingConfirmations, _registerMessageHandlers, registerMessageHandlers_fn, _flushQueueForOrigin, flushQueueForOrigin_fn, _processNextBatch, processNextBatch_fn, _switchNetworkIfNecessary, switchNetworkIfNecessary_fn, _updateQueuedRequestCount, updateQueuedRequestCount_fn;
-var QueuedRequestController = class extends _basecontroller.BaseController {
-  /**
-   * Construct a QueuedRequestController.
-   *
-   * @param options - Controller options.
-   * @param options.messenger - The restricted controller messenger that facilitates communication with other controllers.
-   * @param options.methodsRequiringNetworkSwitch - A list of methods that require the globally selected network to match the dapp selected network.
-   * @param options.clearPendingConfirmations - A function that will clear all the pending confirmations.
-   */
-  constructor({
-    messenger,
-    methodsRequiringNetworkSwitch,
-    clearPendingConfirmations
-  }) {
-    super({
-      name: controllerName,
-      metadata: {
-        queuedRequestCount: {
-          anonymous: true,
-          persist: false
-        }
-      },
-      messenger,
-      state: { queuedRequestCount: 0 }
-    });
-    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _registerMessageHandlers);
-    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _flushQueueForOrigin);
-    /**
-     * Process the next batch of requests.
-     *
-     * This will trigger the next batch of requests with matching origins to be processed. Each
-     * request in the batch is dequeued one at a time, in chronological order, but they all get
-     * processed in parallel.
-     *
-     * This should be called after a batch of requests has finished processing, if the queue is non-
-     * empty.
-     */
-    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _processNextBatch);
-    /**
-     * Switch the globally selected network client to match the network
-     * client of the current batch.
-     *
-     * @throws Throws an error if the current selected `networkClientId` or the
-     * `networkClientId` on the request are invalid.
-     */
-    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _switchNetworkIfNecessary);
-    /**
-     * Update the queued request count.
-     */
-    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _updateQueuedRequestCount);
-    /**
-     * The origin of the current batch of requests being processed, or `undefined` if there are no
-     * requests currently being processed.
-     */
-    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _originOfCurrentBatch, void 0);
-    /**
-     * The list of all queued requests, in chronological order.
-     */
-    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _requestQueue, []);
-    /**
-     * The number of requests currently being processed.
-     *
-     * Note that this does not include queued requests, just those being actively processed (i.e.
-     * those in the "current batch").
-     */
-    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _processingRequestCount, 0);
-    /**
-     * This is a list of methods that require the globally selected network
-     * to match the dapp selected network before being processed. These can
-     * be for UI/UX reasons where the currently selected network is displayed
-     * in the confirmation even though it will be submitted on the correct
-     * network for the dapp. It could also be that a method expects the
-     * globally selected network to match some value in the request params itself.
-     */
-    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _methodsRequiringNetworkSwitch, void 0);
-    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _clearPendingConfirmations, void 0);
-    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _methodsRequiringNetworkSwitch, methodsRequiringNetworkSwitch);
-    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _clearPendingConfirmations, clearPendingConfirmations);
-    _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _registerMessageHandlers, registerMessageHandlers_fn).call(this);
-  }
-  /**
-   * Enqueue a request to be processed in a batch with other requests from the same origin.
-   *
-   * We process requests one origin at a time, so that requests from different origins do not get
-   * interwoven, and so that we can ensure that the globally selected network matches the dapp-
-   * selected network.
-   *
-   * Requests get processed in order of insertion, even across origins/batches. All requests get
-   * processed even in the event of preceding requests failing.
-   *
-   * @param request - The JSON-RPC request to process.
-   * @param requestNext - A function representing the next steps for processing this request.
-   * @returns A promise that resolves when the given request has been fully processed.
-   */
-  async enqueueRequest(request, requestNext) {
-    if (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _originOfCurrentBatch) === void 0) {
-      _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _originOfCurrentBatch, request.origin);
-    }
-    try {
-      if (this.state.queuedRequestCount > 0 || _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _originOfCurrentBatch) !== request.origin) {
-        const {
-          promise: waitForDequeue,
-          reject,
-          resolve
-        } = _utils.createDeferredPromise.call(void 0, {
-          suppressUnhandledRejection: true
-        });
-        _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _requestQueue).push({
-          origin: request.origin,
-          processRequest: (error) => {
-            if (error) {
-              reject(error);
-            } else {
-              resolve();
-            }
-          }
-        });
-        _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _updateQueuedRequestCount, updateQueuedRequestCount_fn).call(this);
-        await waitForDequeue;
-      } else if (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _methodsRequiringNetworkSwitch).includes(request.method)) {
-        await _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _switchNetworkIfNecessary, switchNetworkIfNecessary_fn).call(this);
-      }
-      _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _processingRequestCount, _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _processingRequestCount) + 1);
-      try {
-        await requestNext();
-      } finally {
-        _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _processingRequestCount, _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _processingRequestCount) - 1);
-      }
-      return void 0;
-    } finally {
-      if (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _processingRequestCount) === 0) {
-        _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _originOfCurrentBatch, void 0);
-        if (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _requestQueue).length > 0) {
-          _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _processNextBatch, processNextBatch_fn).call(this);
-        }
-      }
-    }
-  }
-};
-_originOfCurrentBatch = new WeakMap();
-_requestQueue = new WeakMap();
-_processingRequestCount = new WeakMap();
-_methodsRequiringNetworkSwitch = new WeakMap();
-_clearPendingConfirmations = new WeakMap();
-_registerMessageHandlers = new WeakSet();
-registerMessageHandlers_fn = function() {
-  this.messagingSystem.registerActionHandler(
-    `${controllerName}:enqueueRequest`,
-    this.enqueueRequest.bind(this)
-  );
-  this.messagingSystem.subscribe(
-    _selectednetworkcontroller.SelectedNetworkControllerEventTypes.stateChange,
-    (_, patch) => {
-      patch.forEach(({ op, path }) => {
-        if (path.length === 2 && path[0] === "domains" && typeof path[1] === "string") {
-          const origin = path[1];
-          _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _flushQueueForOrigin, flushQueueForOrigin_fn).call(this, origin);
-          if (op === "remove" && origin === _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _originOfCurrentBatch)) {
-            _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _clearPendingConfirmations).call(this);
-          }
-        }
-      });
-    }
-  );
-};
-_flushQueueForOrigin = new WeakSet();
-flushQueueForOrigin_fn = function(flushOrigin) {
-  _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _requestQueue).filter(({ origin }) => origin === flushOrigin).forEach(({ processRequest }) => {
-    processRequest(
-      new Error(
-        "The request has been rejected due to a change in selected network. Please verify the selected network and retry the request."
-      )
-    );
-  });
-  _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _requestQueue, _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _requestQueue).filter(
-    ({ origin }) => origin !== flushOrigin
-  ));
-};
-_processNextBatch = new WeakSet();
-processNextBatch_fn = async function() {
-  const firstRequest = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _requestQueue).shift();
-  _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _originOfCurrentBatch, firstRequest.origin);
-  const batch = [firstRequest.processRequest];
-  while (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _requestQueue)[0]?.origin === _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _originOfCurrentBatch)) {
-    const nextEntry = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _requestQueue).shift();
-    batch.push(nextEntry.processRequest);
-  }
-  let networkSwitchError;
-  try {
-    await _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _switchNetworkIfNecessary, switchNetworkIfNecessary_fn).call(this);
-  } catch (error) {
-    networkSwitchError = error;
-  }
-  for (const processRequest of batch) {
-    processRequest(networkSwitchError);
-  }
-  _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _updateQueuedRequestCount, updateQueuedRequestCount_fn).call(this);
-};
-_switchNetworkIfNecessary = new WeakSet();
-switchNetworkIfNecessary_fn = async function() {
-  if (!_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _originOfCurrentBatch)) {
-    throw new Error("Current batch origin must be initialized first");
-  }
-  const originNetworkClientId = this.messagingSystem.call(
-    "SelectedNetworkController:getNetworkClientIdForDomain",
-    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _originOfCurrentBatch)
-  );
-  const { selectedNetworkClientId } = this.messagingSystem.call(
-    "NetworkController:getState"
-  );
-  if (originNetworkClientId === selectedNetworkClientId) {
-    return;
-  }
-  await this.messagingSystem.call(
-    "NetworkController:setActiveNetwork",
-    originNetworkClientId
-  );
-  this.messagingSystem.publish(
-    "QueuedRequestController:networkSwitched",
-    originNetworkClientId
-  );
-};
-_updateQueuedRequestCount = new WeakSet();
-updateQueuedRequestCount_fn = function() {
-  this.update((state) => {
-    state.queuedRequestCount = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _requestQueue).length;
-  });
-};
-
-
-
-
-
-
-exports.controllerName = controllerName; exports.QueuedRequestControllerActionTypes = QueuedRequestControllerActionTypes; exports.QueuedRequestControllerEventTypes = QueuedRequestControllerEventTypes; exports.QueuedRequestController = QueuedRequestController;
-//# sourceMappingURL=chunk-O3GWRZOC.js.map
\ No newline at end of file
diff --git a/dist/chunk-O3GWRZOC.js.map b/dist/chunk-O3GWRZOC.js.map
deleted file mode 100644
index 8fc26502465aa00f7e8dc4c73349610bc4d9cfa8..0000000000000000000000000000000000000000
--- a/dist/chunk-O3GWRZOC.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"sources":["../src/QueuedRequestController.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n  RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport { BaseController } from '@metamask/base-controller';\nimport type {\n  NetworkControllerGetStateAction,\n  NetworkControllerSetActiveNetworkAction,\n} from '@metamask/network-controller';\nimport type {\n  SelectedNetworkControllerGetNetworkClientIdForDomainAction,\n  SelectedNetworkControllerStateChangeEvent,\n} from '@metamask/selected-network-controller';\nimport { SelectedNetworkControllerEventTypes } from '@metamask/selected-network-controller';\nimport { createDeferredPromise } from '@metamask/utils';\n\nimport type { QueuedRequestMiddlewareJsonRpcRequest } from './types';\n\nexport const controllerName = 'QueuedRequestController';\n\nexport type QueuedRequestControllerState = {\n  queuedRequestCount: number;\n};\n\nexport const QueuedRequestControllerActionTypes = {\n  enqueueRequest: `${controllerName}:enqueueRequest` as const,\n  getState: `${controllerName}:getState` as const,\n};\n\nexport type QueuedRequestControllerGetStateAction = ControllerGetStateAction<\n  typeof controllerName,\n  QueuedRequestControllerState\n>;\n\nexport type QueuedRequestControllerEnqueueRequestAction = {\n  type: typeof QueuedRequestControllerActionTypes.enqueueRequest;\n  handler: QueuedRequestController['enqueueRequest'];\n};\n\nexport const QueuedRequestControllerEventTypes = {\n  networkSwitched: `${controllerName}:networkSwitched` as const,\n  stateChange: `${controllerName}:stateChange` as const,\n};\n\nexport type QueuedRequestControllerStateChangeEvent =\n  ControllerStateChangeEvent<\n    typeof controllerName,\n    QueuedRequestControllerState\n  >;\n\nexport type QueuedRequestControllerNetworkSwitched = {\n  type: typeof QueuedRequestControllerEventTypes.networkSwitched;\n  payload: [string];\n};\n\nexport type QueuedRequestControllerEvents =\n  | QueuedRequestControllerStateChangeEvent\n  | QueuedRequestControllerNetworkSwitched;\n\nexport type QueuedRequestControllerActions =\n  | QueuedRequestControllerGetStateAction\n  | QueuedRequestControllerEnqueueRequestAction;\n\nexport type AllowedActions =\n  | NetworkControllerGetStateAction\n  | NetworkControllerSetActiveNetworkAction\n  | SelectedNetworkControllerGetNetworkClientIdForDomainAction;\n\nexport type AllowedEvents = SelectedNetworkControllerStateChangeEvent;\n\nexport type QueuedRequestControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  QueuedRequestControllerActions | AllowedActions,\n  QueuedRequestControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\nexport type QueuedRequestControllerOptions = {\n  messenger: QueuedRequestControllerMessenger;\n  methodsRequiringNetworkSwitch: string[];\n  clearPendingConfirmations: () => void;\n};\n\n/**\n * A queued request.\n */\ntype QueuedRequest = {\n  /**\n   * The origin of the queued request.\n   */\n  origin: string;\n  /**\n   * A callback used to continue processing the request, called when the request is dequeued.\n   */\n  processRequest: (error: unknown) => void;\n};\n\n/**\n * Queue requests for processing in batches, by request origin.\n *\n * Processing requests in batches allows us to completely separate sets of requests that originate\n * from different origins. This ensures that our UI will not display those requests as a set, which\n * could mislead users into thinking they are related.\n *\n * Queuing requests in batches also allows us to ensure the globally selected network matches the\n * dapp-selected network, before the confirmation UI is rendered. This is important because the\n * data shown on some confirmation screens is only collected for the globally selected network.\n *\n * Requests get processed in order of insertion, even across batches. All requests get processed\n * even in the event of preceding requests failing.\n */\nexport class QueuedRequestController extends BaseController<\n  typeof controllerName,\n  QueuedRequestControllerState,\n  QueuedRequestControllerMessenger\n> {\n  /**\n   * The origin of the current batch of requests being processed, or `undefined` if there are no\n   * requests currently being processed.\n   */\n  #originOfCurrentBatch: string | undefined;\n\n  /**\n   * The list of all queued requests, in chronological order.\n   */\n  #requestQueue: QueuedRequest[] = [];\n\n  /**\n   * The number of requests currently being processed.\n   *\n   * Note that this does not include queued requests, just those being actively processed (i.e.\n   * those in the \"current batch\").\n   */\n  #processingRequestCount = 0;\n\n  /**\n   * This is a list of methods that require the globally selected network\n   * to match the dapp selected network before being processed. These can\n   * be for UI/UX reasons where the currently selected network is displayed\n   * in the confirmation even though it will be submitted on the correct\n   * network for the dapp. It could also be that a method expects the\n   * globally selected network to match some value in the request params itself.\n   */\n  readonly #methodsRequiringNetworkSwitch: string[];\n\n  #clearPendingConfirmations: () => void;\n\n  /**\n   * Construct a QueuedRequestController.\n   *\n   * @param options - Controller options.\n   * @param options.messenger - The restricted controller messenger that facilitates communication with other controllers.\n   * @param options.methodsRequiringNetworkSwitch - A list of methods that require the globally selected network to match the dapp selected network.\n   * @param options.clearPendingConfirmations - A function that will clear all the pending confirmations.\n   */\n  constructor({\n    messenger,\n    methodsRequiringNetworkSwitch,\n    clearPendingConfirmations,\n  }: QueuedRequestControllerOptions) {\n    super({\n      name: controllerName,\n      metadata: {\n        queuedRequestCount: {\n          anonymous: true,\n          persist: false,\n        },\n      },\n      messenger,\n      state: { queuedRequestCount: 0 },\n    });\n    this.#methodsRequiringNetworkSwitch = methodsRequiringNetworkSwitch;\n    this.#clearPendingConfirmations = clearPendingConfirmations;\n    this.#registerMessageHandlers();\n  }\n\n  #registerMessageHandlers(): void {\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:enqueueRequest`,\n      this.enqueueRequest.bind(this),\n    );\n\n    this.messagingSystem.subscribe(\n      SelectedNetworkControllerEventTypes.stateChange,\n      (_, patch) => {\n        patch.forEach(({ op, path }) => {\n          if (\n            path.length === 2 &&\n            path[0] === 'domains' &&\n            typeof path[1] === 'string'\n          ) {\n            const origin = path[1];\n            this.#flushQueueForOrigin(origin);\n            // When a domain is removed from SelectedNetworkController, its because of revoke permissions.\n            // Rather than subscribe to the permissions controller event in addition to the selectedNetworkController ones, we simplify it and just handle remove on this event alone.\n            if (op === 'remove' && origin === this.#originOfCurrentBatch) {\n              this.#clearPendingConfirmations();\n            }\n          }\n        });\n      },\n    );\n  }\n\n  #flushQueueForOrigin(flushOrigin: string) {\n    this.#requestQueue\n      .filter(({ origin }) => origin === flushOrigin)\n      .forEach(({ processRequest }) => {\n        processRequest(\n          new Error(\n            'The request has been rejected due to a change in selected network. Please verify the selected network and retry the request.',\n          ),\n        );\n      });\n    this.#requestQueue = this.#requestQueue.filter(\n      ({ origin }) => origin !== flushOrigin,\n    );\n  }\n\n  /**\n   * Process the next batch of requests.\n   *\n   * This will trigger the next batch of requests with matching origins to be processed. Each\n   * request in the batch is dequeued one at a time, in chronological order, but they all get\n   * processed in parallel.\n   *\n   * This should be called after a batch of requests has finished processing, if the queue is non-\n   * empty.\n   */\n  async #processNextBatch() {\n    const firstRequest = this.#requestQueue.shift() as QueuedRequest;\n    this.#originOfCurrentBatch = firstRequest.origin;\n    const batch = [firstRequest.processRequest];\n    while (this.#requestQueue[0]?.origin === this.#originOfCurrentBatch) {\n      const nextEntry = this.#requestQueue.shift() as QueuedRequest;\n      batch.push(nextEntry.processRequest);\n    }\n\n    // If globally selected network is different from origin selected network,\n    // switch network before processing batch\n    let networkSwitchError: unknown;\n    try {\n      await this.#switchNetworkIfNecessary();\n    } catch (error: unknown) {\n      networkSwitchError = error;\n    }\n\n    for (const processRequest of batch) {\n      processRequest(networkSwitchError);\n    }\n    this.#updateQueuedRequestCount();\n  }\n\n  /**\n   * Switch the globally selected network client to match the network\n   * client of the current batch.\n   *\n   * @throws Throws an error if the current selected `networkClientId` or the\n   * `networkClientId` on the request are invalid.\n   */\n  async #switchNetworkIfNecessary() {\n    // This branch is unreachable; it's just here for type reasons.\n    /* istanbul ignore next */\n    if (!this.#originOfCurrentBatch) {\n      throw new Error('Current batch origin must be initialized first');\n    }\n    const originNetworkClientId = this.messagingSystem.call(\n      'SelectedNetworkController:getNetworkClientIdForDomain',\n      this.#originOfCurrentBatch,\n    );\n    const { selectedNetworkClientId } = this.messagingSystem.call(\n      'NetworkController:getState',\n    );\n    if (originNetworkClientId === selectedNetworkClientId) {\n      return;\n    }\n\n    await this.messagingSystem.call(\n      'NetworkController:setActiveNetwork',\n      originNetworkClientId,\n    );\n\n    this.messagingSystem.publish(\n      'QueuedRequestController:networkSwitched',\n      originNetworkClientId,\n    );\n  }\n\n  /**\n   * Update the queued request count.\n   */\n  #updateQueuedRequestCount() {\n    this.update((state) => {\n      state.queuedRequestCount = this.#requestQueue.length;\n    });\n  }\n\n  /**\n   * Enqueue a request to be processed in a batch with other requests from the same origin.\n   *\n   * We process requests one origin at a time, so that requests from different origins do not get\n   * interwoven, and so that we can ensure that the globally selected network matches the dapp-\n   * selected network.\n   *\n   * Requests get processed in order of insertion, even across origins/batches. All requests get\n   * processed even in the event of preceding requests failing.\n   *\n   * @param request - The JSON-RPC request to process.\n   * @param requestNext - A function representing the next steps for processing this request.\n   * @returns A promise that resolves when the given request has been fully processed.\n   */\n  async enqueueRequest(\n    request: QueuedRequestMiddlewareJsonRpcRequest,\n    requestNext: () => Promise<void>,\n  ): Promise<void> {\n    if (this.#originOfCurrentBatch === undefined) {\n      this.#originOfCurrentBatch = request.origin;\n    }\n\n    try {\n      // Queue request for later processing\n      // Network switch is handled when this batch is processed\n      if (\n        this.state.queuedRequestCount > 0 ||\n        this.#originOfCurrentBatch !== request.origin\n      ) {\n        const {\n          promise: waitForDequeue,\n          reject,\n          resolve,\n        } = createDeferredPromise({\n          suppressUnhandledRejection: true,\n        });\n        this.#requestQueue.push({\n          origin: request.origin,\n          processRequest: (error: unknown) => {\n            if (error) {\n              reject(error);\n            } else {\n              resolve();\n            }\n          },\n        });\n        this.#updateQueuedRequestCount();\n\n        await waitForDequeue;\n      } else if (this.#methodsRequiringNetworkSwitch.includes(request.method)) {\n        // Process request immediately\n        // Requires switching network now if necessary\n        await this.#switchNetworkIfNecessary();\n      }\n      this.#processingRequestCount += 1;\n      try {\n        await requestNext();\n      } finally {\n        this.#processingRequestCount -= 1;\n      }\n      return undefined;\n    } finally {\n      if (this.#processingRequestCount === 0) {\n        this.#originOfCurrentBatch = undefined;\n        if (this.#requestQueue.length > 0) {\n          // The next batch is triggered here. We intentionally omit the `await` because we don't\n          // want the next batch to block resolution of the current request.\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.#processNextBatch();\n        }\n      }\n    }\n  }\n}\n"]}
\ No newline at end of file
diff --git a/dist/chunk-XDUKMRJ3.mjs b/dist/chunk-XDUKMRJ3.mjs
new file mode 100644
index 0000000000000000000000000000000000000000..f872c61f9aec9d1489d7a4c3cba6b210d89664b5
--- /dev/null
+++ b/dist/chunk-XDUKMRJ3.mjs
@@ -0,0 +1,43 @@
+// src/QueuedRequestMiddleware.ts
+import { createAsyncMiddleware } from "@metamask/json-rpc-engine";
+import { serializeError } from "@metamask/rpc-errors";
+function hasRequiredMetadata(request) {
+  if (!request.origin) {
+    throw new Error("Request object is lacking an 'origin'");
+  } else if (typeof request.origin !== "string") {
+    throw new Error(
+      `Request object has an invalid origin of type '${typeof request.origin}'`
+    );
+  } else if (!request.networkClientId) {
+    throw new Error("Request object is lacking a 'networkClientId'");
+  } else if (typeof request.networkClientId !== "string") {
+    throw new Error(
+      `Request object has an invalid networkClientId of type '${typeof request.networkClientId}'`
+    );
+  }
+}
+var createQueuedRequestMiddleware = ({
+  enqueueRequest,
+  useRequestQueue,
+  // Core PR: https://github.com/MetaMask/core/pull/4423
+  // Patch Branch: jl/patch-queued-request-controller@0.10.0-replace-methods-array-with-callback
+  shouldEnqueueRequest
+}) => {
+  return createAsyncMiddleware(async (req, res, next) => {
+    hasRequiredMetadata(req);
+    if (!useRequestQueue() || !shouldEnqueueRequest(req)) {
+      return await next();
+    }
+    try {
+      await enqueueRequest(req, next);
+    } catch (error) {
+      res.error = serializeError(error);
+    }
+    return void 0;
+  });
+};
+
+export {
+  createQueuedRequestMiddleware
+};
+//# sourceMappingURL=chunk-XDUKMRJ3.mjs.map
\ No newline at end of file
diff --git a/dist/chunk-XDUKMRJ3.mjs.map b/dist/chunk-XDUKMRJ3.mjs.map
new file mode 100644
index 0000000000000000000000000000000000000000..6e8b05eec78bf29a42b911217b47f32e015053e3
--- /dev/null
+++ b/dist/chunk-XDUKMRJ3.mjs.map
@@ -0,0 +1 @@
+{"version":3,"sources":["../src/QueuedRequestMiddleware.ts"],"sourcesContent":["import type { JsonRpcMiddleware } from '@metamask/json-rpc-engine';\nimport { createAsyncMiddleware } from '@metamask/json-rpc-engine';\nimport { serializeError } from '@metamask/rpc-errors';\nimport type { Json, JsonRpcParams, JsonRpcRequest } from '@metamask/utils';\n\nimport type { QueuedRequestController } from './QueuedRequestController';\nimport type { QueuedRequestMiddlewareJsonRpcRequest } from './types';\n\n/**\n * Ensure that the incoming request has the additional required request metadata. This metadata\n * should be attached to the request earlier in the middleware pipeline.\n *\n * @param request - The request to check.\n * @throws Throws an error if any required metadata is missing.\n */\nfunction hasRequiredMetadata(\n  request: Record<string, unknown>,\n): asserts request is QueuedRequestMiddlewareJsonRpcRequest {\n  if (!request.origin) {\n    throw new Error(\"Request object is lacking an 'origin'\");\n  } else if (typeof request.origin !== 'string') {\n    throw new Error(\n      `Request object has an invalid origin of type '${typeof request.origin}'`,\n    );\n  } else if (!request.networkClientId) {\n    throw new Error(\"Request object is lacking a 'networkClientId'\");\n  } else if (typeof request.networkClientId !== 'string') {\n    throw new Error(\n      `Request object has an invalid networkClientId of type '${typeof request.networkClientId}'`,\n    );\n  }\n}\n\n/**\n * Creates a JSON-RPC middleware for handling queued requests. This middleware\n * intercepts JSON-RPC requests, checks if they require queueing, and manages\n * their execution based on the specified options.\n *\n * @param options - Configuration options.\n * @param options.enqueueRequest - A method for enqueueing a request.\n * @param options.useRequestQueue - A function that determines if the request queue feature is enabled.\n * @param options.shouldEnqueueRequest - A function that returns if a request should be handled by the QueuedRequestController.\n * @returns The JSON-RPC middleware that manages queued requests.\n */\nexport const createQueuedRequestMiddleware = ({\n  enqueueRequest,\n  useRequestQueue,\n  // Core PR: https://github.com/MetaMask/core/pull/4423\n  // Patch Branch: jl/patch-queued-request-controller@0.10.0-replace-methods-array-with-callback\n  shouldEnqueueRequest,\n}: {\n  enqueueRequest: QueuedRequestController['enqueueRequest'];\n  useRequestQueue: () => boolean;\n  shouldEnqueueRequest: (\n    request: QueuedRequestMiddlewareJsonRpcRequest,\n  ) => boolean;\n}): JsonRpcMiddleware<JsonRpcParams, Json> => {\n  return createAsyncMiddleware(async (req: JsonRpcRequest, res, next) => {\n    hasRequiredMetadata(req);\n\n    // if the request queue feature is turned off, or this method is not a confirmation method\n    // bypass the queue completely\n    // Core PR: https://github.com/MetaMask/core/pull/4423\n    // Patch Branch: jl/patch-queued-request-controller@0.10.0-replace-methods-array-with-callback\n    if (!useRequestQueue() || !shouldEnqueueRequest(req)) {\n      return await next();\n    }\n\n    try {\n      await enqueueRequest(req, next);\n    } catch (error: unknown) {\n      res.error = serializeError(error);\n    }\n    return undefined;\n  });\n};\n"],"mappings":";AACA,SAAS,6BAA6B;AACtC,SAAS,sBAAsB;AAa/B,SAAS,oBACP,SAC0D;AAC1D,MAAI,CAAC,QAAQ,QAAQ;AACnB,UAAM,IAAI,MAAM,uCAAuC;AAAA,EACzD,WAAW,OAAO,QAAQ,WAAW,UAAU;AAC7C,UAAM,IAAI;AAAA,MACR,iDAAiD,OAAO,QAAQ,MAAM;AAAA,IACxE;AAAA,EACF,WAAW,CAAC,QAAQ,iBAAiB;AACnC,UAAM,IAAI,MAAM,+CAA+C;AAAA,EACjE,WAAW,OAAO,QAAQ,oBAAoB,UAAU;AACtD,UAAM,IAAI;AAAA,MACR,0DAA0D,OAAO,QAAQ,eAAe;AAAA,IAC1F;AAAA,EACF;AACF;AAaO,IAAM,gCAAgC,CAAC;AAAA,EAC5C;AAAA,EACA;AAAA;AAAA;AAAA,EAGA;AACF,MAM8C;AAC5C,SAAO,sBAAsB,OAAO,KAAqB,KAAK,SAAS;AACrE,wBAAoB,GAAG;AAMvB,QAAI,CAAC,gBAAgB,KAAK,CAAC,qBAAqB,GAAG,GAAG;AACpD,aAAO,MAAM,KAAK;AAAA,IACpB;AAEA,QAAI;AACF,YAAM,eAAe,KAAK,IAAI;AAAA,IAChC,SAAS,OAAgB;AACvB,UAAI,QAAQ,eAAe,KAAK;AAAA,IAClC;AACA,WAAO;AAAA,EACT,CAAC;AACH;","names":[]}
\ No newline at end of file
diff --git a/dist/chunk-YQEMBMKG.mjs b/dist/chunk-YQEMBMKG.mjs
deleted file mode 100644
index f732331b71142aa81279f55aeb48807069849512..0000000000000000000000000000000000000000
--- a/dist/chunk-YQEMBMKG.mjs
+++ /dev/null
@@ -1,41 +0,0 @@
-// src/QueuedRequestMiddleware.ts
-import { createAsyncMiddleware } from "@metamask/json-rpc-engine";
-import { serializeError } from "@metamask/rpc-errors";
-function hasRequiredMetadata(request) {
-  if (!request.origin) {
-    throw new Error("Request object is lacking an 'origin'");
-  } else if (typeof request.origin !== "string") {
-    throw new Error(
-      `Request object has an invalid origin of type '${typeof request.origin}'`
-    );
-  } else if (!request.networkClientId) {
-    throw new Error("Request object is lacking a 'networkClientId'");
-  } else if (typeof request.networkClientId !== "string") {
-    throw new Error(
-      `Request object has an invalid networkClientId of type '${typeof request.networkClientId}'`
-    );
-  }
-}
-var createQueuedRequestMiddleware = ({
-  enqueueRequest,
-  useRequestQueue,
-  methodsWithConfirmation
-}) => {
-  return createAsyncMiddleware(async (req, res, next) => {
-    hasRequiredMetadata(req);
-    if (!useRequestQueue() || !methodsWithConfirmation.includes(req.method)) {
-      return await next();
-    }
-    try {
-      await enqueueRequest(req, next);
-    } catch (error) {
-      res.error = serializeError(error);
-    }
-    return void 0;
-  });
-};
-
-export {
-  createQueuedRequestMiddleware
-};
-//# sourceMappingURL=chunk-YQEMBMKG.mjs.map
\ No newline at end of file
diff --git a/dist/chunk-YQEMBMKG.mjs.map b/dist/chunk-YQEMBMKG.mjs.map
deleted file mode 100644
index 94be34d93013fbe9f303b5a2a26dd35ade4ab801..0000000000000000000000000000000000000000
--- a/dist/chunk-YQEMBMKG.mjs.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"sources":["../src/QueuedRequestMiddleware.ts"],"sourcesContent":["import type { JsonRpcMiddleware } from '@metamask/json-rpc-engine';\nimport { createAsyncMiddleware } from '@metamask/json-rpc-engine';\nimport { serializeError } from '@metamask/rpc-errors';\nimport type { Json, JsonRpcParams, JsonRpcRequest } from '@metamask/utils';\n\nimport type { QueuedRequestController } from './QueuedRequestController';\nimport type { QueuedRequestMiddlewareJsonRpcRequest } from './types';\n\n/**\n * Ensure that the incoming request has the additional required request metadata. This metadata\n * should be attached to the request earlier in the middleware pipeline.\n *\n * @param request - The request to check.\n * @throws Throws an error if any required metadata is missing.\n */\nfunction hasRequiredMetadata(\n  request: Record<string, unknown>,\n): asserts request is QueuedRequestMiddlewareJsonRpcRequest {\n  if (!request.origin) {\n    throw new Error(\"Request object is lacking an 'origin'\");\n  } else if (typeof request.origin !== 'string') {\n    throw new Error(\n      `Request object has an invalid origin of type '${typeof request.origin}'`,\n    );\n  } else if (!request.networkClientId) {\n    throw new Error(\"Request object is lacking a 'networkClientId'\");\n  } else if (typeof request.networkClientId !== 'string') {\n    throw new Error(\n      `Request object has an invalid networkClientId of type '${typeof request.networkClientId}'`,\n    );\n  }\n}\n\n/**\n * Creates a JSON-RPC middleware for handling queued requests. This middleware\n * intercepts JSON-RPC requests, checks if they require queueing, and manages\n * their execution based on the specified options.\n *\n * @param options - Configuration options.\n * @param options.enqueueRequest - A method for enqueueing a request.\n * @param options.useRequestQueue - A function that determines if the request queue feature is enabled.\n * @param options.methodsWithConfirmation - A list of methods that can cause a confirmation to be presented to the user.\n * @returns The JSON-RPC middleware that manages queued requests.\n */\nexport const createQueuedRequestMiddleware = ({\n  enqueueRequest,\n  useRequestQueue,\n  methodsWithConfirmation,\n}: {\n  enqueueRequest: QueuedRequestController['enqueueRequest'];\n  useRequestQueue: () => boolean;\n  methodsWithConfirmation: string[];\n}): JsonRpcMiddleware<JsonRpcParams, Json> => {\n  return createAsyncMiddleware(async (req: JsonRpcRequest, res, next) => {\n    hasRequiredMetadata(req);\n\n    // if the request queue feature is turned off, or this method is not a confirmation method\n    // bypass the queue completely\n    if (!useRequestQueue() || !methodsWithConfirmation.includes(req.method)) {\n      return await next();\n    }\n\n    try {\n      await enqueueRequest(req, next);\n    } catch (error: unknown) {\n      res.error = serializeError(error);\n    }\n    return undefined;\n  });\n};\n"],"mappings":";AACA,SAAS,6BAA6B;AACtC,SAAS,sBAAsB;AAa/B,SAAS,oBACP,SAC0D;AAC1D,MAAI,CAAC,QAAQ,QAAQ;AACnB,UAAM,IAAI,MAAM,uCAAuC;AAAA,EACzD,WAAW,OAAO,QAAQ,WAAW,UAAU;AAC7C,UAAM,IAAI;AAAA,MACR,iDAAiD,OAAO,QAAQ,MAAM;AAAA,IACxE;AAAA,EACF,WAAW,CAAC,QAAQ,iBAAiB;AACnC,UAAM,IAAI,MAAM,+CAA+C;AAAA,EACjE,WAAW,OAAO,QAAQ,oBAAoB,UAAU;AACtD,UAAM,IAAI;AAAA,MACR,0DAA0D,OAAO,QAAQ,eAAe;AAAA,IAC1F;AAAA,EACF;AACF;AAaO,IAAM,gCAAgC,CAAC;AAAA,EAC5C;AAAA,EACA;AAAA,EACA;AACF,MAI8C;AAC5C,SAAO,sBAAsB,OAAO,KAAqB,KAAK,SAAS;AACrE,wBAAoB,GAAG;AAIvB,QAAI,CAAC,gBAAgB,KAAK,CAAC,wBAAwB,SAAS,IAAI,MAAM,GAAG;AACvE,aAAO,MAAM,KAAK;AAAA,IACpB;AAEA,QAAI;AACF,YAAM,eAAe,KAAK,IAAI;AAAA,IAChC,SAAS,OAAgB;AACvB,UAAI,QAAQ,eAAe,KAAK;AAAA,IAClC;AACA,WAAO;AAAA,EACT,CAAC;AACH;","names":[]}
\ No newline at end of file
diff --git a/dist/index.js b/dist/index.js
index 8ccbe5265da973dcba1c5dbbee7be713e38a4fd0..52776026f5ac96d5953156af76c51f6403af6d18 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -2,15 +2,15 @@
 
 
 
-var _chunkO3GWRZOCjs = require('./chunk-O3GWRZOC.js');
+var _chunkGYWQP5VQjs = require('./chunk-GYWQP5VQ.js');
 
 
-var _chunk2FGGS72Ljs = require('./chunk-2FGGS72L.js');
+var _chunkDHADYPYBjs = require('./chunk-DHADYPYB.js');
 require('./chunk-Z4BLTVTB.js');
 
 
 
 
 
-exports.QueuedRequestController = _chunkO3GWRZOCjs.QueuedRequestController; exports.QueuedRequestControllerActionTypes = _chunkO3GWRZOCjs.QueuedRequestControllerActionTypes; exports.QueuedRequestControllerEventTypes = _chunkO3GWRZOCjs.QueuedRequestControllerEventTypes; exports.createQueuedRequestMiddleware = _chunk2FGGS72Ljs.createQueuedRequestMiddleware;
+exports.QueuedRequestController = _chunkGYWQP5VQjs.QueuedRequestController; exports.QueuedRequestControllerActionTypes = _chunkGYWQP5VQjs.QueuedRequestControllerActionTypes; exports.QueuedRequestControllerEventTypes = _chunkGYWQP5VQjs.QueuedRequestControllerEventTypes; exports.createQueuedRequestMiddleware = _chunkDHADYPYBjs.createQueuedRequestMiddleware;
 //# sourceMappingURL=index.js.map
\ No newline at end of file
diff --git a/dist/index.mjs b/dist/index.mjs
index 3a660b6a2072a37a370f3caceca34a89f4a62e6f..c0bf24085eb177df51fd6dcd79d246cf707ce19d 100644
--- a/dist/index.mjs
+++ b/dist/index.mjs
@@ -2,10 +2,10 @@ import {
   QueuedRequestController,
   QueuedRequestControllerActionTypes,
   QueuedRequestControllerEventTypes
-} from "./chunk-EUEPSRVZ.mjs";
+} from "./chunk-2CDOML2V.mjs";
 import {
   createQueuedRequestMiddleware
-} from "./chunk-YQEMBMKG.mjs";
+} from "./chunk-XDUKMRJ3.mjs";
 import "./chunk-XUI43LEZ.mjs";
 export {
   QueuedRequestController,
diff --git a/dist/tsconfig.build.tsbuildinfo b/dist/tsconfig.build.tsbuildinfo
index 9d61ceeb758f817a8e03565584b292a69d2986b5..c5f406e96aca4f54383a6cc107b649429cb91a55 100644
--- a/dist/tsconfig.build.tsbuildinfo
+++ b/dist/tsconfig.build.tsbuildinfo
@@ -1 +1 @@
-{"program":{"fileNames":["../../../node_modules/typescript/lib/lib.es5.d.ts","../../../node_modules/typescript/lib/lib.es2015.d.ts","../../../node_modules/typescript/lib/lib.es2016.d.ts","../../../node_modules/typescript/lib/lib.es2017.d.ts","../../../node_modules/typescript/lib/lib.es2018.d.ts","../../../node_modules/typescript/lib/lib.es2019.d.ts","../../../node_modules/typescript/lib/lib.es2020.d.ts","../../../node_modules/typescript/lib/lib.dom.d.ts","../../../node_modules/typescript/lib/lib.es2015.core.d.ts","../../../node_modules/typescript/lib/lib.es2015.collection.d.ts","../../../node_modules/typescript/lib/lib.es2015.generator.d.ts","../../../node_modules/typescript/lib/lib.es2015.iterable.d.ts","../../../node_modules/typescript/lib/lib.es2015.promise.d.ts","../../../node_modules/typescript/lib/lib.es2015.proxy.d.ts","../../../node_modules/typescript/lib/lib.es2015.reflect.d.ts","../../../node_modules/typescript/lib/lib.es2015.symbol.d.ts","../../../node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts","../../../node_modules/typescript/lib/lib.es2016.array.include.d.ts","../../../node_modules/typescript/lib/lib.es2017.object.d.ts","../../../node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts","../../../node_modules/typescript/lib/lib.es2017.string.d.ts","../../../node_modules/typescript/lib/lib.es2017.intl.d.ts","../../../node_modules/typescript/lib/lib.es2017.typedarrays.d.ts","../../../node_modules/typescript/lib/lib.es2018.asyncgenerator.d.ts","../../../node_modules/typescript/lib/lib.es2018.asynciterable.d.ts","../../../node_modules/typescript/lib/lib.es2018.intl.d.ts","../../../node_modules/typescript/lib/lib.es2018.promise.d.ts","../../../node_modules/typescript/lib/lib.es2018.regexp.d.ts","../../../node_modules/typescript/lib/lib.es2019.array.d.ts","../../../node_modules/typescript/lib/lib.es2019.object.d.ts","../../../node_modules/typescript/lib/lib.es2019.string.d.ts","../../../node_modules/typescript/lib/lib.es2019.symbol.d.ts","../../../node_modules/typescript/lib/lib.es2019.intl.d.ts","../../../node_modules/typescript/lib/lib.es2020.bigint.d.ts","../../../node_modules/typescript/lib/lib.es2020.date.d.ts","../../../node_modules/typescript/lib/lib.es2020.promise.d.ts","../../../node_modules/typescript/lib/lib.es2020.sharedmemory.d.ts","../../../node_modules/typescript/lib/lib.es2020.string.d.ts","../../../node_modules/typescript/lib/lib.es2020.symbol.wellknown.d.ts","../../../node_modules/typescript/lib/lib.es2020.intl.d.ts","../../../node_modules/typescript/lib/lib.es2020.number.d.ts","../../../node_modules/typescript/lib/lib.esnext.intl.d.ts","../../../types/eth-ens-namehash.d.ts","../../../types/ethereum-ens-network-map.d.ts","../../../types/global.d.ts","../../../types/single-call-balance-checker-abi.d.ts","../../../types/@metamask/contract-metadata.d.ts","../../../types/@metamask/eth-hd-keyring.d.ts","../../../types/@metamask/eth-simple-keyring.d.ts","../../../types/@metamask/ethjs-provider-http.d.ts","../../../types/@metamask/ethjs-unit.d.ts","../../../types/@metamask/metamask-eth-abis.d.ts","../../../types/eth-json-rpc-infura/src/createprovider.d.ts","../../../types/eth-phishing-detect/src/config.json.d.ts","../../../types/eth-phishing-detect/src/detector.d.ts","../../base-controller/dist/types/basecontrollerv1.d.ts","../../../node_modules/superstruct/dist/error.d.ts","../../../node_modules/superstruct/dist/utils.d.ts","../../../node_modules/superstruct/dist/struct.d.ts","../../../node_modules/superstruct/dist/structs/coercions.d.ts","../../../node_modules/superstruct/dist/structs/refinements.d.ts","../../../node_modules/superstruct/dist/structs/types.d.ts","../../../node_modules/superstruct/dist/structs/utilities.d.ts","../../../node_modules/superstruct/dist/index.d.ts","../../../node_modules/@metamask/utils/dist/types/assert.d.ts","../../../node_modules/@metamask/utils/dist/types/base64.d.ts","../../../node_modules/@metamask/utils/dist/types/hex.d.ts","../../../node_modules/@metamask/utils/dist/types/bytes.d.ts","../../../node_modules/@metamask/utils/dist/types/caip-types.d.ts","../../../node_modules/@metamask/utils/dist/types/checksum.d.ts","../../../node_modules/@metamask/utils/dist/types/coercers.d.ts","../../../node_modules/@metamask/utils/dist/types/collections.d.ts","../../../node_modules/@metamask/utils/dist/types/encryption-types.d.ts","../../../node_modules/@metamask/utils/dist/types/errors.d.ts","../../../node_modules/@metamask/utils/dist/types/json.d.ts","../../../node_modules/@types/node/assert.d.ts","../../../node_modules/@types/node/assert/strict.d.ts","../../../node_modules/@types/node/globals.d.ts","../../../node_modules/@types/node/async_hooks.d.ts","../../../node_modules/@types/node/buffer.d.ts","../../../node_modules/@types/node/child_process.d.ts","../../../node_modules/@types/node/cluster.d.ts","../../../node_modules/@types/node/console.d.ts","../../../node_modules/@types/node/constants.d.ts","../../../node_modules/@types/node/crypto.d.ts","../../../node_modules/@types/node/dgram.d.ts","../../../node_modules/@types/node/diagnostics_channel.d.ts","../../../node_modules/@types/node/dns.d.ts","../../../node_modules/@types/node/dns/promises.d.ts","../../../node_modules/@types/node/domain.d.ts","../../../node_modules/@types/node/events.d.ts","../../../node_modules/@types/node/fs.d.ts","../../../node_modules/@types/node/fs/promises.d.ts","../../../node_modules/@types/node/http.d.ts","../../../node_modules/@types/node/http2.d.ts","../../../node_modules/@types/node/https.d.ts","../../../node_modules/@types/node/inspector.d.ts","../../../node_modules/@types/node/module.d.ts","../../../node_modules/@types/node/net.d.ts","../../../node_modules/@types/node/os.d.ts","../../../node_modules/@types/node/path.d.ts","../../../node_modules/@types/node/perf_hooks.d.ts","../../../node_modules/@types/node/process.d.ts","../../../node_modules/@types/node/punycode.d.ts","../../../node_modules/@types/node/querystring.d.ts","../../../node_modules/@types/node/readline.d.ts","../../../node_modules/@types/node/repl.d.ts","../../../node_modules/@types/node/stream.d.ts","../../../node_modules/@types/node/stream/promises.d.ts","../../../node_modules/@types/node/stream/consumers.d.ts","../../../node_modules/@types/node/stream/web.d.ts","../../../node_modules/@types/node/string_decoder.d.ts","../../../node_modules/@types/node/test.d.ts","../../../node_modules/@types/node/timers.d.ts","../../../node_modules/@types/node/timers/promises.d.ts","../../../node_modules/@types/node/tls.d.ts","../../../node_modules/@types/node/trace_events.d.ts","../../../node_modules/@types/node/tty.d.ts","../../../node_modules/@types/node/url.d.ts","../../../node_modules/@types/node/util.d.ts","../../../node_modules/@types/node/v8.d.ts","../../../node_modules/@types/node/vm.d.ts","../../../node_modules/@types/node/wasi.d.ts","../../../node_modules/@types/node/worker_threads.d.ts","../../../node_modules/@types/node/zlib.d.ts","../../../node_modules/@types/node/globals.global.d.ts","../../../node_modules/@types/node/index.d.ts","../../../node_modules/@ethereumjs/common/dist/enums.d.ts","../../../node_modules/@ethereumjs/common/dist/types.d.ts","../../../node_modules/buffer/index.d.ts","../../../node_modules/@ethereumjs/util/dist/constants.d.ts","../../../node_modules/@ethereumjs/util/dist/units.d.ts","../../../node_modules/@ethereumjs/util/dist/address.d.ts","../../../node_modules/@ethereumjs/util/dist/bytes.d.ts","../../../node_modules/@ethereumjs/util/dist/types.d.ts","../../../node_modules/@ethereumjs/util/dist/account.d.ts","../../../node_modules/@ethereumjs/util/dist/withdrawal.d.ts","../../../node_modules/@ethereumjs/util/dist/signature.d.ts","../../../node_modules/@ethereumjs/util/dist/encoding.d.ts","../../../node_modules/@ethereumjs/util/dist/asynceventemitter.d.ts","../../../node_modules/@ethereumjs/util/dist/internal.d.ts","../../../node_modules/@ethereumjs/util/dist/lock.d.ts","../../../node_modules/@ethereumjs/util/dist/provider.d.ts","../../../node_modules/@ethereumjs/util/dist/index.d.ts","../../../node_modules/@ethereumjs/common/dist/common.d.ts","../../../node_modules/@ethereumjs/common/dist/utils.d.ts","../../../node_modules/@ethereumjs/common/dist/index.d.ts","../../../node_modules/@ethereumjs/tx/dist/eip2930transaction.d.ts","../../../node_modules/@ethereumjs/tx/dist/legacytransaction.d.ts","../../../node_modules/@ethereumjs/tx/dist/types.d.ts","../../../node_modules/@ethereumjs/tx/dist/basetransaction.d.ts","../../../node_modules/@ethereumjs/tx/dist/eip1559transaction.d.ts","../../../node_modules/@ethereumjs/tx/dist/transactionfactory.d.ts","../../../node_modules/@ethereumjs/tx/dist/index.d.ts","../../../node_modules/@metamask/utils/dist/types/keyring.d.ts","../../../node_modules/@types/ms/index.d.ts","../../../node_modules/@types/debug/index.d.ts","../../../node_modules/@metamask/utils/dist/types/logging.d.ts","../../../node_modules/@metamask/utils/dist/types/misc.d.ts","../../../node_modules/@metamask/utils/dist/types/number.d.ts","../../../node_modules/@metamask/utils/dist/types/opaque.d.ts","../../../node_modules/@metamask/utils/dist/types/promise.d.ts","../../../node_modules/@metamask/utils/dist/types/time.d.ts","../../../node_modules/@metamask/utils/dist/types/transaction-types.d.ts","../../../node_modules/@metamask/utils/dist/types/versions.d.ts","../../../node_modules/@metamask/utils/dist/types/index.d.ts","../../../node_modules/immer/dist/utils/env.d.ts","../../../node_modules/immer/dist/utils/errors.d.ts","../../../node_modules/immer/dist/types/types-external.d.ts","../../../node_modules/immer/dist/types/types-internal.d.ts","../../../node_modules/immer/dist/utils/common.d.ts","../../../node_modules/immer/dist/utils/plugins.d.ts","../../../node_modules/immer/dist/core/scope.d.ts","../../../node_modules/immer/dist/core/finalize.d.ts","../../../node_modules/immer/dist/core/proxy.d.ts","../../../node_modules/immer/dist/core/immerclass.d.ts","../../../node_modules/immer/dist/core/current.d.ts","../../../node_modules/immer/dist/internal.d.ts","../../../node_modules/immer/dist/plugins/es5.d.ts","../../../node_modules/immer/dist/plugins/patches.d.ts","../../../node_modules/immer/dist/plugins/mapset.d.ts","../../../node_modules/immer/dist/plugins/all.d.ts","../../../node_modules/immer/dist/immer.d.ts","../../base-controller/dist/types/restrictedcontrollermessenger.d.ts","../../base-controller/dist/types/controllermessenger.d.ts","../../base-controller/dist/types/basecontrollerv2.d.ts","../../base-controller/dist/types/index.d.ts","../../controller-utils/dist/types/types.d.ts","../../controller-utils/dist/types/constants.d.ts","../../../node_modules/@metamask/eth-query/index.d.ts","../../../node_modules/@types/bn.js/index.d.ts","../../controller-utils/dist/types/util.d.ts","../../../node_modules/@spruceid/siwe-parser/dist/abnf.d.ts","../../../node_modules/@spruceid/siwe-parser/dist/utils.d.ts","../../../node_modules/@spruceid/siwe-parser/dist/parsers.d.ts","../../controller-utils/dist/types/siwe.d.ts","../../controller-utils/dist/types/index.d.ts","../../../node_modules/@metamask/swappable-obj-proxy/dist/types.d.ts","../../../node_modules/@metamask/swappable-obj-proxy/dist/createeventemitterproxy.d.ts","../../../node_modules/@metamask/swappable-obj-proxy/dist/createswappableproxy.d.ts","../../../node_modules/@metamask/swappable-obj-proxy/dist/index.d.ts","../../network-controller/dist/types/constants.d.ts","../../../node_modules/@metamask/safe-event-emitter/index.d.ts","../../json-rpc-engine/dist/types/jsonrpcengine.d.ts","../../json-rpc-engine/dist/types/createasyncmiddleware.d.ts","../../json-rpc-engine/dist/types/createscaffoldmiddleware.d.ts","../../json-rpc-engine/dist/types/getuniqueid.d.ts","../../json-rpc-engine/dist/types/idremapmiddleware.d.ts","../../json-rpc-engine/dist/types/mergemiddleware.d.ts","../../json-rpc-engine/dist/types/index.d.ts","../../eth-json-rpc-provider/dist/types/safe-event-emitter-provider.d.ts","../../eth-json-rpc-provider/dist/types/provider-from-engine.d.ts","../../eth-json-rpc-provider/dist/types/provider-from-middleware.d.ts","../../eth-json-rpc-provider/dist/types/index.d.ts","../../../node_modules/eth-block-tracker/dist/blocktracker.d.ts","../../../node_modules/eth-block-tracker/dist/pollingblocktracker.d.ts","../../../node_modules/eth-block-tracker/dist/subscribeblocktracker.d.ts","../../../node_modules/eth-block-tracker/dist/index.d.ts","../../network-controller/dist/types/types.d.ts","../../network-controller/dist/types/create-auto-managed-network-client.d.ts","../../network-controller/dist/types/networkcontroller.d.ts","../../network-controller/dist/types/create-network-client.d.ts","../../network-controller/dist/types/index.d.ts","../../../node_modules/@metamask/rpc-errors/dist/types/utils.d.ts","../../../node_modules/@metamask/rpc-errors/dist/types/classes.d.ts","../../../node_modules/@metamask/rpc-errors/dist/types/errors.d.ts","../../../node_modules/@metamask/rpc-errors/dist/types/error-constants.d.ts","../../../node_modules/@metamask/rpc-errors/dist/types/index.d.ts","../../approval-controller/dist/types/approvalcontroller.d.ts","../../approval-controller/dist/types/errors.d.ts","../../approval-controller/dist/types/index.d.ts","../../permission-controller/dist/types/permission-middleware.d.ts","../../permission-controller/dist/types/subjectmetadatacontroller.d.ts","../../permission-controller/dist/types/permissioncontroller.d.ts","../../permission-controller/dist/types/permission.d.ts","../../permission-controller/dist/types/caveat.d.ts","../../permission-controller/dist/types/errors.d.ts","../../permission-controller/dist/types/utils.d.ts","../../permission-controller/dist/types/rpc-methods/getpermissions.d.ts","../../permission-controller/dist/types/rpc-methods/requestpermissions.d.ts","../../permission-controller/dist/types/rpc-methods/revokepermissions.d.ts","../../permission-controller/dist/types/rpc-methods/index.d.ts","../../permission-controller/dist/types/index.d.ts","../../selected-network-controller/dist/types/selectednetworkcontroller.d.ts","../../selected-network-controller/dist/types/selectednetworkmiddleware.d.ts","../../selected-network-controller/dist/types/index.d.ts","../src/types.ts","../src/queuedrequestcontroller.ts","../src/queuedrequestmiddleware.ts","../src/index.ts","../../../node_modules/@babel/types/lib/index.d.ts","../../../node_modules/@types/babel__generator/index.d.ts","../../../node_modules/@babel/parser/typings/babel-parser.d.ts","../../../node_modules/@types/babel__template/index.d.ts","../../../node_modules/@types/babel__traverse/index.d.ts","../../../node_modules/@types/babel__core/index.d.ts","../../../node_modules/@types/deep-freeze-strict/index.d.ts","../../../node_modules/@types/eslint/helpers.d.ts","../../../node_modules/@types/estree/index.d.ts","../../../node_modules/@types/json-schema/index.d.ts","../../../node_modules/@types/eslint/index.d.ts","../../../node_modules/@types/graceful-fs/index.d.ts","../../../node_modules/@types/istanbul-lib-coverage/index.d.ts","../../../node_modules/@types/istanbul-lib-report/index.d.ts","../../../node_modules/@types/istanbul-reports/index.d.ts","../../../node_modules/chalk/index.d.ts","../../../node_modules/jest-diff/build/cleanupsemantic.d.ts","../../../node_modules/pretty-format/build/types.d.ts","../../../node_modules/pretty-format/build/index.d.ts","../../../node_modules/jest-diff/build/types.d.ts","../../../node_modules/jest-diff/build/difflines.d.ts","../../../node_modules/jest-diff/build/printdiffs.d.ts","../../../node_modules/jest-diff/build/index.d.ts","../../../node_modules/jest-matcher-utils/build/index.d.ts","../../../node_modules/@types/jest/index.d.ts","../../../node_modules/@types/jest-when/index.d.ts","../../../node_modules/@types/json5/index.d.ts","../../../node_modules/@types/lodash/common/common.d.ts","../../../node_modules/@types/lodash/common/array.d.ts","../../../node_modules/@types/lodash/common/collection.d.ts","../../../node_modules/@types/lodash/common/date.d.ts","../../../node_modules/@types/lodash/common/function.d.ts","../../../node_modules/@types/lodash/common/lang.d.ts","../../../node_modules/@types/lodash/common/math.d.ts","../../../node_modules/@types/lodash/common/number.d.ts","../../../node_modules/@types/lodash/common/object.d.ts","../../../node_modules/@types/lodash/common/seq.d.ts","../../../node_modules/@types/lodash/common/string.d.ts","../../../node_modules/@types/lodash/common/util.d.ts","../../../node_modules/@types/lodash/index.d.ts","../../../node_modules/@types/minimatch/index.d.ts","../../../node_modules/@types/parse-json/index.d.ts","../../../node_modules/@types/pbkdf2/index.d.ts","../../../node_modules/@types/prettier/index.d.ts","../../../node_modules/@types/punycode/index.d.ts","../../../node_modules/@types/readable-stream/node_modules/safe-buffer/index.d.ts","../../../node_modules/@types/readable-stream/index.d.ts","../../../node_modules/@types/secp256k1/index.d.ts","../../../node_modules/@types/semver/classes/semver.d.ts","../../../node_modules/@types/semver/functions/parse.d.ts","../../../node_modules/@types/semver/functions/valid.d.ts","../../../node_modules/@types/semver/functions/clean.d.ts","../../../node_modules/@types/semver/functions/inc.d.ts","../../../node_modules/@types/semver/functions/diff.d.ts","../../../node_modules/@types/semver/functions/major.d.ts","../../../node_modules/@types/semver/functions/minor.d.ts","../../../node_modules/@types/semver/functions/patch.d.ts","../../../node_modules/@types/semver/functions/prerelease.d.ts","../../../node_modules/@types/semver/functions/compare.d.ts","../../../node_modules/@types/semver/functions/rcompare.d.ts","../../../node_modules/@types/semver/functions/compare-loose.d.ts","../../../node_modules/@types/semver/functions/compare-build.d.ts","../../../node_modules/@types/semver/functions/sort.d.ts","../../../node_modules/@types/semver/functions/rsort.d.ts","../../../node_modules/@types/semver/functions/gt.d.ts","../../../node_modules/@types/semver/functions/lt.d.ts","../../../node_modules/@types/semver/functions/eq.d.ts","../../../node_modules/@types/semver/functions/neq.d.ts","../../../node_modules/@types/semver/functions/gte.d.ts","../../../node_modules/@types/semver/functions/lte.d.ts","../../../node_modules/@types/semver/functions/cmp.d.ts","../../../node_modules/@types/semver/functions/coerce.d.ts","../../../node_modules/@types/semver/classes/comparator.d.ts","../../../node_modules/@types/semver/classes/range.d.ts","../../../node_modules/@types/semver/functions/satisfies.d.ts","../../../node_modules/@types/semver/ranges/max-satisfying.d.ts","../../../node_modules/@types/semver/ranges/min-satisfying.d.ts","../../../node_modules/@types/semver/ranges/to-comparators.d.ts","../../../node_modules/@types/semver/ranges/min-version.d.ts","../../../node_modules/@types/semver/ranges/valid.d.ts","../../../node_modules/@types/semver/ranges/outside.d.ts","../../../node_modules/@types/semver/ranges/gtr.d.ts","../../../node_modules/@types/semver/ranges/ltr.d.ts","../../../node_modules/@types/semver/ranges/intersects.d.ts","../../../node_modules/@types/semver/ranges/simplify.d.ts","../../../node_modules/@types/semver/ranges/subset.d.ts","../../../node_modules/@types/semver/internals/identifiers.d.ts","../../../node_modules/@types/semver/index.d.ts","../../../node_modules/@types/sinonjs__fake-timers/index.d.ts","../../../node_modules/@types/sinon/index.d.ts","../../../node_modules/@types/stack-utils/index.d.ts","../../../node_modules/@types/uuid/index.d.ts","../../../node_modules/@types/yargs-parser/index.d.ts","../../../node_modules/@types/yargs/index.d.ts"],"fileInfos":[{"version":"8730f4bf322026ff5229336391a18bcaa1f94d4f82416c8b2f3954e2ccaae2ba","affectsGlobalScope":true},"dc47c4fa66b9b9890cf076304de2a9c5201e94b740cffdf09f87296d877d71f6","7a387c58583dfca701b6c85e0adaf43fb17d590fb16d5b2dc0a2fbd89f35c467","8a12173c586e95f4433e0c6dc446bc88346be73ffe9ca6eec7aa63c8f3dca7f9","5f4e733ced4e129482ae2186aae29fde948ab7182844c3a5a51dd346182c7b06","4b421cbfb3a38a27c279dec1e9112c3d1da296f77a1a85ddadf7e7a425d45d18","1fc5ab7a764205c68fa10d381b08417795fc73111d6dd16b5b1ed36badb743d9",{"version":"3aafcb693fe5b5c3bd277bd4c3a617b53db474fe498fc5df067c5603b1eebde7","affectsGlobalScope":true},{"version":"adb996790133eb33b33aadb9c09f15c2c575e71fb57a62de8bf74dbf59ec7dfb","affectsGlobalScope":true},{"version":"8cc8c5a3bac513368b0157f3d8b31cfdcfe78b56d3724f30f80ed9715e404af8","affectsGlobalScope":true},{"version":"cdccba9a388c2ee3fd6ad4018c640a471a6c060e96f1232062223063b0a5ac6a","affectsGlobalScope":true},{"version":"c5c05907c02476e4bde6b7e76a79ffcd948aedd14b6a8f56e4674221b0417398","affectsGlobalScope":true},{"version":"5f406584aef28a331c36523df688ca3650288d14f39c5d2e555c95f0d2ff8f6f","affectsGlobalScope":true},{"version":"22f230e544b35349cfb3bd9110b6ef37b41c6d6c43c3314a31bd0d9652fcec72","affectsGlobalScope":true},{"version":"7ea0b55f6b315cf9ac2ad622b0a7813315bb6e97bf4bb3fbf8f8affbca7dc695","affectsGlobalScope":true},{"version":"3013574108c36fd3aaca79764002b3717da09725a36a6fc02eac386593110f93","affectsGlobalScope":true},{"version":"eb26de841c52236d8222f87e9e6a235332e0788af8c87a71e9e210314300410a","affectsGlobalScope":true},{"version":"3be5a1453daa63e031d266bf342f3943603873d890ab8b9ada95e22389389006","affectsGlobalScope":true},{"version":"17bb1fc99591b00515502d264fa55dc8370c45c5298f4a5c2083557dccba5a2a","affectsGlobalScope":true},{"version":"7ce9f0bde3307ca1f944119f6365f2d776d281a393b576a18a2f2893a2d75c98","affectsGlobalScope":true},{"version":"6a6b173e739a6a99629a8594bfb294cc7329bfb7b227f12e1f7c11bc163b8577","affectsGlobalScope":true},{"version":"81cac4cbc92c0c839c70f8ffb94eb61e2d32dc1c3cf6d95844ca099463cf37ea","affectsGlobalScope":true},{"version":"b0124885ef82641903d232172577f2ceb5d3e60aed4da1153bab4221e1f6dd4e","affectsGlobalScope":true},{"version":"0eb85d6c590b0d577919a79e0084fa1744c1beba6fd0d4e951432fa1ede5510a","affectsGlobalScope":true},{"version":"da233fc1c8a377ba9e0bed690a73c290d843c2c3d23a7bd7ec5cd3d7d73ba1e0","affectsGlobalScope":true},{"version":"d154ea5bb7f7f9001ed9153e876b2d5b8f5c2bb9ec02b3ae0d239ec769f1f2ae","affectsGlobalScope":true},{"version":"bb2d3fb05a1d2ffbca947cc7cbc95d23e1d053d6595391bd325deb265a18d36c","affectsGlobalScope":true},{"version":"c80df75850fea5caa2afe43b9949338ce4e2de086f91713e9af1a06f973872b8","affectsGlobalScope":true},{"version":"9d57b2b5d15838ed094aa9ff1299eecef40b190722eb619bac4616657a05f951","affectsGlobalScope":true},{"version":"6c51b5dd26a2c31dbf37f00cfc32b2aa6a92e19c995aefb5b97a3a64f1ac99de","affectsGlobalScope":true},{"version":"6e7997ef61de3132e4d4b2250e75343f487903ddf5370e7ce33cf1b9db9a63ed","affectsGlobalScope":true},{"version":"2ad234885a4240522efccd77de6c7d99eecf9b4de0914adb9a35c0c22433f993","affectsGlobalScope":true},{"version":"5e5e095c4470c8bab227dbbc61374878ecead104c74ab9960d3adcccfee23205","affectsGlobalScope":true},{"version":"09aa50414b80c023553090e2f53827f007a301bc34b0495bfb2c3c08ab9ad1eb","affectsGlobalScope":true},{"version":"d7f680a43f8cd12a6b6122c07c54ba40952b0c8aa140dcfcf32eb9e6cb028596","affectsGlobalScope":true},{"version":"3787b83e297de7c315d55d4a7c546ae28e5f6c0a361b7a1dcec1f1f50a54ef11","affectsGlobalScope":true},{"version":"e7e8e1d368290e9295ef18ca23f405cf40d5456fa9f20db6373a61ca45f75f40","affectsGlobalScope":true},{"version":"faf0221ae0465363c842ce6aa8a0cbda5d9296940a8e26c86e04cc4081eea21e","affectsGlobalScope":true},{"version":"06393d13ea207a1bfe08ec8d7be562549c5e2da8983f2ee074e00002629d1871","affectsGlobalScope":true},{"version":"2768ef564cfc0689a1b76106c421a2909bdff0acbe87da010785adab80efdd5c","affectsGlobalScope":true},{"version":"b248e32ca52e8f5571390a4142558ae4f203ae2f94d5bac38a3084d529ef4e58","affectsGlobalScope":true},{"version":"52d1bb7ab7a3306fd0375c8bff560feed26ed676a5b0457fa8027b563aecb9a4","affectsGlobalScope":true},"70bbfaec021ac4a0c805374225b55d70887f987df8b8dd7711d79464bb7b4385","869089d60b67219f63e6aca810284c89bae1b384b5cbc7ce64e53d82ad223ed5",{"version":"18338b6a4b920ec7d49b4ffafcbf0fa8a86b4bfd432966efd722dab611157cf4","affectsGlobalScope":true},"62a0875a0397b35a2364f1d401c0ce17975dfa4d47bf6844de858ae04da349f9","ee7491d0318d1fafcba97d5b72b450eb52671570f7a4ecd9e8898d40eaae9472","e3e7d217d89b380c1f34395eadc9289542851b0f0a64007dfe1fb7cf7423d24e","fd79909e93b4d50fd0ed9f3d39ddf8ba0653290bac25c295aac49f6befbd081b","345a9cc2945406f53051cd0e9b51f82e1e53929848eab046fdda91ee8aa7da31","9debe2de883da37a914e5e784a7be54c201b8f1d783822ad6f443ff409a5ea21","dee5d5c5440cda1f3668f11809a5503c30db0476ad117dd450f7ba5a45300e8f","f5e396c1424c391078c866d6f84afe0b4d2f7f85a160b9c756cd63b5b1775d93","5caa6f4fff16066d377d4e254f6c34c16540da3809cd66cd626a303bc33c419f","730d055528bdf12c8524870bb33d237991be9084c57634e56e5d8075f6605e02","75b22c74010ba649de1a1676a4c4b8b5bb4294fecd05089e2094429b16d7840c","e475453e7140e95542332943d3052fe4c7430ad1efce42b3e9157f1fee8cbc5f","ebfdf904255ce746c9d30117c2edef355fb19bf7650478d2405f39f0e4f302e6","f3f63b48addb8e2ea9d20bb671c3c306413b3daa39996d0ae52f63d8e32158e1","a50599c08934a62f11657bdbe0dc929ab66da1b1f09974408fd9a33ec1bb8060","5a20e7d6c630b91be15e9b837853173829d00273197481dc8d3e94df61105a71","8d478048d71cc16f806d4b71b252ecb67c7444ccf4f4b09b29a312712184f859","b4000a0a525fa921e896cbdb32ae802c9684f0fd371b5fc69e7310f7918cc2c3","9df4662ca3dbc2522bc115833ee04faa1afbb4e249a85ef4a0a09c621346bd08","b25d9065cf1c1f537a140bbc508e953ed2262f77134574c432d206ff36f4bdbf","1b103313097041aa9cd705a682c652f08613cb5cf8663321061c0902f845e81c","68ccec8662818911d8a12b8ed028bc5729fb4f1d34793c4701265ba60bc73cf4","5f85b8b79dc4d36af672c035b2beb71545de63a5d60bccbeee64c260941672ab","b3d48529ae61dc27d0bfbfa2cb3e0dff8189644bd155bdf5df1e8e14669f7043","40fe4b689225816b31fe5794c0fbf3534568819709e40295ead998a2bc1ab237","f65b5e33b9ad545a1eebbd6afe857314725ad42aaf069913e33f928ab3e4990a","fb6f2a87beb7fb1f4c2b762d0c76a9459fc91f557231569b0ee21399e22aa13d","31c858dc85996fac4b7fa944e1016d5c72f514930a72357ab5001097bf6511c7","3de30a871b3340be8b679c52aa12f90dd1c8c60874517be58968fdbcc4d79445","6fd985bd31eaf77542625306fb0404d32bff978990f0a06428e5f0b9a3b58109","34693fb4a5e771e11668219221344dd1bd7d8b77ed005a1c1d965fb559be8406","7394959e5a741b185456e1ef5d64599c36c60a323207450991e7a42e08911419",{"version":"e44ea2d6b7b853f6c81482416db43dafc11944561b810e469ae423085511ce7e","affectsGlobalScope":true},"f51b4042a3ac86f1f707500a9768f88d0b0c1fc3f3e45a73333283dea720cdc6",{"version":"a7289d79eb84a59d2475b4d0136b4404be3cfdd17c3ea46b9194add1d645df01","affectsGlobalScope":true},"0bb26fa2a90ee890eed57ee812c71fa84d3d07850163ec4a204de86412cc57c1","132ca47da601c60141dd6f10bd08c70d0620177e5638439df2464ec3945b6d98",{"version":"55d2bbae076fed7269c3e16faeb32f988f558427b7a1c3bf04aa7551ab86ae90","affectsGlobalScope":true},"a40826e8476694e90da94aa008283a7de50d1dafd37beada623863f1901cb7fb","cf83847c9264dcd592b6c89c1542925b899b277228687f3638614e3fa784cf76","3a41ebe7f089d50f447466b35b6cabb8b584c0994fc9809d0cd0a4ebc41e1239","7693b90b3075deaccafd5efb467bf9f2b747a3075be888652ef73e64396d8628","0c42d6cba77d9ad1cf45256ccb8489aa502fe2dbee1ec9048a29d49f5d532e73","2cf89c17245db65d175d4ef699cd68187516f9b3ae5c572fc0b9ad60f35dc223","5f20d20b7607174caf1a6da9141aeb9f2142159ae2410ca30c7a0fccd1d19c99",{"version":"a34d65f61ec5aac5b53502c8b0bd4e00d217bccb95bf94d449e2571baa11fb8c","affectsGlobalScope":true},"8d42e5af5fb0a96a77e135ce84cc60636c9bad39d9dba043a4efe9d1bdeb3cc3","56fcc451e9065eb121c9cc4c1b9994a816306f3b0b3b1fce7ad59f0ac97a9999","8a6f12b74d3e6c4f5e1b918cb8e64ae16bc6756cf0d48bcc28a28e1bf26ca0cd","c3759b5bc5cc40f5988d86a497741a80fa91258629ae50a2b3735e774cd377cc","bf268a0aea37ad4ae3b7a9b58559190b6fc01ea16a31e35cd05817a0a60f895a","45dd82fb5aea9b12b2a90b427b28f3a014e8b2ee9b74087a5ab882841cb5fbc5",{"version":"d7dad6db394a3d9f7b49755e4b610fbf8ed6eb0c9810ae5f1a119f6b5d76de45","affectsGlobalScope":true},"48b2f9302651eb31acd5be69bb4e6b35797a7fcd6b77391d10a4ccadf7dc3609","0c8c917ef15498c827bd494a0ef365e9f76deb211f8acbb86932e20489310788","dd67d2b5e4e8a182a38de8e69fb736945eaa4588e0909c14e01a14bd3cc1fd1e",{"version":"9cdc2c6144b03822c9842505d09945bcf813b86827fdb260dd7586b63abc19bf","affectsGlobalScope":true},{"version":"2923dee3c897f03e91b54a210cdbefea7290562f0ac4b948667d4c9ee844b79e","affectsGlobalScope":true},"79169698d09a2be54b14f3bcad2575b414bf3525063fde0a1e4fcd5d6efd380e","051d939bcf77caa3cef3282708ab3a6fdfb741a7366e1d74a9e7603b67417ec3","0be79b3ff0f16b6c2f9bc8c4cc7097ea417d8d67f8267f7e1eec8e32b548c2ff","1c61ffa3a71b77363b30d19832c269ef62fba787f5610cac7254728d3b69ab2e","a234d62ae81d012ebf23898a45672edf3e5c93ecf5a438a42b96c08dd68cde43","269929a24b2816343a178008ac9ae9248304d92a8ba8e233055e0ed6dbe6ef71","09ed02a725db002693236b6dfc49b2c6eb5557be1421d7fbe4f07cfe38211d92","09d801ff4a303d4976d4b9cb94af3a9097c4a70345e662d176975872d2998e51","c8558b01389b5f7610ac293aa612ccea2ae64d83af43b49f8142f190be1f414c","c40fdf7b2e18df49ce0568e37f0292c12807a0748be79e272745e7216bed2606",{"version":"b10b426c56e220b5093bf8a2446ee47af47263b7b1a03f4b18e42326b231b111","affectsGlobalScope":true},"4e228e78c1e9b0a75c70588d59288f63a6258e8b1fe4a67b0c53fe03461421d9","b4635ef36bee17e1304337d591c3b6b461ecdbc1876d0effbe6a581e62201fe5","205d50c24359ead003dc537b9b65d2a64208dfdffe368f403cf9e0357831db9e","1265fddcd0c68be9d2a3b29805d0280484c961264dd95e0b675f7bd91f777e78",{"version":"e4507242542bd499238f693d88b2d32e22177cc508854625f87bcc9bc3fa1256","affectsGlobalScope":true},{"version":"d942354e4966a98d3a92d1b1af0b4ac06f33af3f88116743e2c304c027ca26ef","affectsGlobalScope":true},"39f0808e5be3cb38674726c21fe2eb453c55e48a901679b4ce30fef85549b892","6afd66a7432ef100027ea110449e874196381e019e30eda7e7d8ca390366b7a8","befb8a9a78ac99d8fbc3ed392810489a7b90760c7a58934e8f1c8538f581cff3","e670bdf01540d35c170fae68edfd2f288eff909936780c379d6a9103b787b22c","867f95abf1df444aab146b19847391fc2f922a55f6a970a27ed8226766cee29f",{"version":"ab9b9a36e5284fd8d3bf2f7d5fcbc60052f25f27e4d20954782099282c60d23e","affectsGlobalScope":true},"88003d9ab15507806f41b120be6d407c1afe566c2f6689ebe3a034dd5ec0c8dc","175323e2a79a6076e0bada8a390d535a3ea817158bf1b1f46e31efca9028a0a2","7a10053aadc19335532a4d02756db4865974fd69bea5439ddcc5bfdf062d9476","4967529644e391115ca5592184d4b63980569adf60ee685f968fd59ab1557188","aed9e712a9b168345362e8f3a949f16c99ca1e05d21328f05735dfdbb24414ef","b04fe6922ed3db93afdbd49cdda8576aa75f744592fceea96fb0d5f32158c4f5","ed8d6c8de90fc2a4faaebc28e91f2469928738efd5208fb75ade0fa607e892b7","d7c52b198d680fe65b1a8d1b001f0173ffa2536ca2e7082431d726ce1f6714cd","c07f251e1c4e415a838e5498380b55cfea94f3513229de292d2aa85ae52fc3e9","0ed401424892d6bf294a5374efe512d6951b54a71e5dd0290c55b6d0d915f6f7","b945be6da6a3616ef3a250bfe223362b1c7c6872e775b0c4d82a1bf7a28ff902","beea49237dd7c7110fabf3c7509919c9cb9da841d847c53cac162dc3479e2f87","0f45f8a529c450d8f394106cc622bff79e44a1716e1ac9c3cc68b43f7ecf65ee","c624ce90b04c27ce4f318ba6330d39bde3d4e306f0f497ce78d4bda5ab8e22ca","9b8253aa5cb2c82d505f72afdbf96e83b15cc6b9a6f4fadbbbab46210d5f1977","86a8f52e4b1ac49155e889376bcfa8528a634c90c27fec65aa0e949f77b740c5","aab5dd41c1e2316cc0b42a7dd15684f8582d5a1d16c0516276a2a8a7d0fecd9c","59948226626ee210045296ba1fc6cb0fe748d1ff613204e08e7157ab6862dee7","ec3e54d8b713c170fdc8110a7e4a6a97513a7ab6b05ac9e1100cb064d2bb7349","43beb30ecb39a603fde4376554887310b0699f25f7f39c5c91e3147b51bb3a26","666b77d7f06f49da114b090a399abbfa66d5b6c01a3fd9dc4f063a52ace28507","31997714a93fbc570f52d47d6a8ebfb021a34a68ea9ba58bbb69cdec9565657e","6032e4262822160128e644de3fc4410bcd7517c2f137525fd2623d2bb23cb0d3","8bd5c9b1016629c144fd228983395b9dbf0676a576716bc3d316cab612c33cd5","2ed90bd3925b23aed8f859ffd0e885250be0424ca2b57e9866dabef152e1d6b7","93f6bd17d92dab9db7897e1430a5aeaa03bcf51623156213d8397710367a76ce","3f62b770a42e8c47c7008726f95aa383e69d97e85e680d237b99fcb0ee601dd8","5b84cfe78028c35c3bb89c042f18bf08d09da11e82d275c378ae4d07d8477e6c","980d21b0081cbf81774083b1e3a46f4bbdcd2b68858df0f66d7fad9c82bc34bc","6a9c5127096b35264eb7cd21b2417bfc1d42cceca9ba4ce2bb0c3410b7816042","93b7325b49dfbf613d940ed0e471216657b2d77459dac34f1b5b1678f08f884c","b17f3bb7d8333479c7e45e5f3d876761b9bca58f97594eca3f6a944fd825e632","3c1f1236cce6d6e0c4e2c1b4371e6f72d7c14842ecd76a98ed0748ee5730c8f3","6d7f58d5ea72d7834946fd7104a734dc7d40661be8b2e1eaced1ddce3268ebaf","4c26222991e6c97d5a8f541d4f2c67585eda9e8b33cf9f52931b098045236e88","277983d414aa99d78655186c3ee1e1c38c302e336aff1d77b47fcdc39d8273fe","47383b45796d525a4039cd22d2840ac55a1ff03a43d027f7f867ba7314a9cf53","6548773b3abbc18de29176c2141f766d4e437e40596ee480447abf83575445ad","6ddd27af0436ce59dd4c1896e2bfdb2bdb2529847d078b83ce67a144dff05491","816264799aef3fd5a09a3b6c25217d5ec26a9dfc7465eac7d6073bcdc7d88f3f","4df0891b133884cd9ed752d31c7d0ec0a09234e9ed5394abffd3c660761598db","b603b62d3dcd31ef757dc7339b4fa8acdbca318b0fb9ac485f9a1351955615f9","e642bd47b75ad6b53cbf0dfd7ddfa0f120bd10193f0c58ec37d87b59bf604aca","be90b24d2ee6f875ce3aaa482e7c41a54278856b03d04212681c4032df62baf9","78f5ff400b3cb37e7b90eef1ff311253ed31c8cb66505e9828fad099bffde021","372c47090e1131305d163469a895ff2938f33fa73aad988df31cd31743f9efb6","71c67dc6987bdbd5599353f90009ff825dd7db0450ef9a0aee5bb0c574d18512","6f12403b5eca6ae7ca8e3efe3eeb9c683b06ce3e3844ccfd04098d83cd7e4957","282c535df88175d64d9df4550d2fd1176fd940c1c6822f1e7584003237f179d3","c3a4752cf103e4c6034d5bd449c8f9d5e7b352d22a5f8f9a41a8efb11646f9c2","11a9e38611ac3c77c74240c58b6bd64a0032128b29354e999650f1de1e034b1c","4ed103ca6fff9cb244f7c4b86d1eb28ce8069c32db720784329946731badb5bb","d738f282842970e058672663311c6875482ee36607c88b98ffb6604fba99cb2a","ec859cd8226aa623e41bbb47c249a55ee16dc1b8647359585244d57d3a5ed0c7","8891c6e959d253a66434ff5dc9ae46058fb3493e84b4ca39f710ef2d350656b1","c4463cf02535444dcbc3e67ecd29f1972490f74e49957d6fd4282a1013796ba6","0cb0a957ff02de0b25fd0f3f37130ca7f22d1e0dea256569c714c1f73c6791f8","2f5075dc512d51786b1ba3b1696565641dfaae3ac854f5f13d61fa12ef81a47e","ca3353cc82b1981f0d25d71d7432d583a6ef882ccdea82d65fbe49af37be51cb","50679a8e27aacf72f8c40bcab15d7ef5e83494089b4726b83eec4554344d5cdc","45351e0d51780b6f4088277a4457b9879506ee2720a887de232df0f1efcb33d8","5d697a4b315cc5bb3042ae869abffd10c3b0d7b182cda0e4c45d8819937e5796","563fa27fdaec8f195b84f71a7af0ef48d30d5cc830575db86da86a63a470c8e6","6ee58aa536dabb19b09bc036f1abe83feb51e13d63b23d30b2d0631a2de99b8f","8aceb205dcc6f814ad99635baf1e40b6e01d06d3fe27b72fd766c6d0b8c0c600","299567f84bfedd1468dca2755a829cb19e607a6811673788807dc8921e211bc9","795d9fb85aad92221504db74dd179b506bd189bba0c104426f7e7bb8a66ffee5","1311bc194e0a69fe61031e852c1c0b439e2a2a3d1d5e2d8ff795499b9f283459","4b7ce19369d7e7fae76720c2c6c7f671bf3fa0f7093edb864f1ac358ca7c456c","c972ef44deca1fa8fab465915ffa00f82e126aacf3dfc8979c03b1b066ce5bb6","30285a1011c6d6b52f3ba3abb0a984be8148c05cdefb8eb6eb562335a3991f35","8e7adb22c0adecf7464861fc58ae3fc617b41ffbd70c97aa8493dc0966a82273","755f3cd1d9c1b564cff090e3b0e29200ae55690a91b87cb9e7a64c2dbeb314d3","d6bb7e0a6877b7856c183bff13d09dd9ae599ea43c6f6b33d3d5f72a830ed460","f1b51ae93c762d7c43f559933cd4842dd870367e8d92e90704ffa685dd5b29a3","3f450762fd7c34ed545e738abccb0af6a703572a10521643cf8fc88e3724c99c","fcc8beef29f39f09b1d9c9f99c42f9fed605ab1c28d2a630185f732b9ba53763","d6e6620a30d582182acc3f0a992a0c311adc589f111096aea11ab83fc09a5ccc","6213b8f686f56beab22b59a0f468590fd3a4c5fa931236a017efeca91d7c9584","c451cec9a588b1f105a5ea2c6063d4fca112b9d70105cacdadda0e1ef67e9379","cb047832dc68f5a2c41c62c5e95ddcacbae3a8b034d40cd15319a8cb7f25104a","980336ccdfc3c08f3c3b201aa6662e6016e20f15847f8465b68f3e8e67b4665c","5a3493939995f46ff3d9073cd534fb8961c3bf4e08c71db27066ff03d906dea8","bb5a2ac327605ebebf831c469b05bd34a33a6a46ee8c1edd9f3310aad32cf6a1","bf5d041f2440b4a9391e2b5eb3b8d94cbf1e3b8ff4703b6539d4e65e758c8f37","8516469eb90e723b0eb03df1be098f7e6a4709f6f48fd4532868d20a0a934f6e","d60e9ab369a72d234aac49adbe2900d8ef1408a6ea4db552cf2a48c9d8d6a1bc","0ebb4698803f01e2e7df6acce572fff068f4a20c47221721dafd70a27e372831","a12eaa942232703a8a8477a2f240ad5a2c26c595012ea8f128224e77984099c4","4070c2f1c3434fcf84886e04d30d82cd650ee443e53b82b404b144175cf8741e","2cea9689efa8591732096235abe7f084fc29c92badd5b0897a5e876b77e71887","4ed4e504126014fee13aaef5e3fc140f2ff7031ff3a8b5386717905820ea2d09","8129a34006218a6f3cdc81bbd438d5429eb18b08b4338a26977ac3b4df129d75","30d2170e1a718b5035611af55e3618b4ba8f42f0749bb52ee593da6082c4e2ce","98ef38666d88ec9699a722053e07ede65d3042f693fe7ff8c786e53dbb6fd43b","a3b8b6be7620897d1e481e8650c980a210a138fceb6e710eaf95fd9dd0dfe94a","12c89d0e32758c120a569045f21cf5b77244f86792611ced8de7f86b37e77781","9f9e5bae412fa5909fae636d6733aee27a108cc2ed5b13980611016336774d3c","662fe197bba64bd3f17ee118058cd2d0d2dbe33d7c0c865fd6365d90bfc44e1e","030519c351f800551cac2658038804969ca4584d2c0175a710602ac234ca1340","0278a6939ca83cd040b08ff8c5fc7838b6693ddc52f22526bf158e6b10e0246c","c2d6206e5ba4fd3063b01218c2b3b997afc1cfbeb49fcee991fa8595842ce53d","29c188a2c660f99f1b4835022e011c4268d7af989d4b7dda33c0a69ca1a777f8","1ed0bf138e87912d741e28333b58cbf814ae863783b3b404d2454cbabb9c5fc0","3452ee7d8ef0b1bbd47b2a56924a1dc3c79dc84a19d212e9dc496f92e4943aa0","99510e20e3d4816e283e59e8f0f31f603b2f026648240ffdb1ca9f24be678419","037d1fbeb96dc35600814be14d0fbf31acf35f1d7b443ea33514937de69c2bf2","64d1859b7dd9f419ba08e064c2b16b1a5edde0316d6c2bb1833c9381d4dffc3d","69b0f96ca137c0dba05f321a159141ad36f79cfba2fffcc29d131e280275e6f2","7bb64cf513a2b1cf7a94f81ca201f3d76a9b17af556f0cfc4e2707443e6caa66","a9add2a29da4cd0b617ae89f196b3f2172a031aeb086922cdf097236eef8b008","99afac3e6e683ee3111e499f9919953e9489cb39cad74363717aa3805e91db51","c49f92b83968f4ee0b6026396a9b6e2d6fee8b660d08a90efb03355ce3433a7a","4fdc6afe4d7ef6aeb32ac0818d47e99f98a31d0696abc4cb2af489c78ac1ba1d","d73d5a0e854037d43781b2d5d33f4b95ee509e0ddede677aade79fbee6a97cdc","35d14e1ae04be300828b1a1614316b9312a009cfd5e29fa56f94c2a9f60b12df","d160fe745f9c3b72d7b9036fdb2b6b500a520d43e36bb842c927b6fe59ea2c23","b9cb805fd5b34db55ff8f82ba40aec6c8807d0d56cb8ec8d1ae2f451ed609572","b226110435ec1391c36bfd75c1fc83077a87505db5b5b0abfa83757e58fd9041","f6dc5fa7af6825bbc912f7166022be85ba7f897ac2ffdef45250160dbb61a920",{"version":"108032756725f470736ea2571b52d012d20a0059679a2837b05618fd501e7a9b","signature":"5188ab7a04703366af6ada769156ffb6dc479269b0b56a5a35d19db1d9718c47"},{"version":"c9ab02c1f6de49dd97f2b4c4d5c6448cec98275646f5f397303ca4b02ce28280","signature":"88f8e242af97eacb3f8131e71d24aee326dc70ce14afebf9ea6549ba7017e30e"},{"version":"a42acd4019798982a8afc331cff78e8dc63871df95fe88d329e8b3ad2a848e7e","signature":"8afec60c7f76763cfd666b689e5c2a66ac27c4d03f39517ae80086378014623e"},{"version":"b02ff449d945de02365ce341058c1e5b0fcc8fcd4b4c2bb689f7762a068ea330","signature":"2e4093f1d001ba35c05b7ec71da1aa53c2bb53c5195aa96d28855271714121ee"},"a5aaeca001d2f69093d04aac4db321e4c338fd9b20cbc4f0b0af3dc6ae0f235b","cc957354aa3c94c9961ebf46282cfde1e81d107fc5785a61f62c67f1dd3ac2eb","8041cfce439ff29d339742389de04c136e3029d6b1817f07b2d7fcbfb7534990","93de1c6dab503f053efe8d304cb522bb3a89feab8c98f307a674a4fae04773e9","29a46d003ca3c721e6405f00dee7e3de91b14e09701eba5d887bf76fb2d47d38","069bebfee29864e3955378107e243508b163e77ab10de6a5ee03ae06939f0bb9","9990f9e566bc3c2c6e38df81294fb756e7f5b7b0e5bb17ab75384e190548b4b6",{"version":"64d4b35c5456adf258d2cf56c341e203a073253f229ef3208fc0d5020253b241","affectsGlobalScope":true},"ee7d8894904b465b072be0d2e4b45cf6b887cdba16a467645c4e200982ece7ea","f3d8c757e148ad968f0d98697987db363070abada5f503da3c06aefd9d4248c1","df95e00612c1faa5e0e7ef0dba589b18665bbeb3221db2b6cee1fe4d0e61921f","afe73051ff6a03a9565cbd8ebb0e956ee3df5e913ad5c1ded64218aabfa3dcb5","8b06ac3faeacb8484d84ddb44571d8f410697f98d7bfa86c0fda60373a9f5215","7eb06594824ada538b1d8b48c3925a83e7db792f47a081a62cf3e5c4e23cf0ee","f5638f7c2f12a9a1a57b5c41b3c1ea7db3876c003bab68e6a57afd6bcc169af0","0d14fa22c41fdc7277e6f71473b20ebc07f40f00e38875142335d5b63cdfc9d2","d8aab31ba8e618cc3eea10b0945de81cb93b7e8150a013a482332263b9305322","462bccdf75fcafc1ae8c30400c9425e1a4681db5d605d1a0edb4f990a54d8094","5923d8facbac6ecf7c84739a5c701a57af94a6f6648d6229a6c768cf28f0f8cb","7adecb2c3238794c378d336a8182d4c3dd2c4fa6fa1785e2797a3db550edea62","dc12dc0e5aa06f4e1a7692149b78f89116af823b9e1f1e4eae140cd3e0e674e6","1bfc6565b90c8771615cd8cfcf9b36efc0275e5e83ac7d9181307e96eb495161","8a8a96898906f065f296665e411f51010b51372fa260d5373bf9f64356703190","7f82ef88bdb67d9a850dd1c7cd2d690f33e0f0acd208e3c9eba086f3670d4f73",{"version":"ccfd8774cd9b929f63ff7dcf657977eb0652e3547f1fcac1b3a1dc5db22d4d58","affectsGlobalScope":true},"d92dc90fecd2552db74d8dc3c6fb4db9145b2aa0efe2c127236ba035969068d4","96d14f21b7652903852eef49379d04dbda28c16ed36468f8c9fa08f7c14c9538","675e702f2032766a91eeadee64f51014c64688525da99dccd8178f0c599f13a8","458111fc89d11d2151277c822dfdc1a28fa5b6b2493cf942e37d4cd0a6ee5f22","19c816167e076e7c24f074389c6cf3ed87bdbb917d1ea439ca281f9d26db2439","187119ff4f9553676a884e296089e131e8cc01691c546273b1d0089c3533ce42","febf0b2de54781102b00f61653b21377390a048fbf5262718c91860d11ff34a6","98f9d826db9cd99d27a01a59ee5f22863df00ccf1aaf43e1d7db80ebf716f7c3","0aaef8cded245bf5036a7a40b65622dd6c4da71f7a35343112edbe112b348a1e","00baffbe8a2f2e4875367479489b5d43b5fc1429ecb4a4cc98cfc3009095f52a","dcd91d3b697cb650b95db5471189b99815af5db2a1cd28760f91e0b12ede8ed5","3c92b6dfd43cc1c2485d9eba5ff0b74a19bb8725b692773ef1d66dac48cda4bd","3cf0d343c2276842a5b617f22ba82af6322c7cfe8bb52238ffc0c491a3c21019","df996e25faa505f85aeb294d15ebe61b399cf1d1e49959cdfaf2cc0815c203f9",{"version":"f2eff8704452659641164876c1ef0df4174659ce7311b0665798ea3f556fa9ad","affectsGlobalScope":true},"8841e2aa774b89bd23302dede20663306dc1b9902431ac64b24be8b8d0e3f649","2b8264b2fefd7367e0f20e2c04eed5d3038831fe00f5efbc110ff0131aab899b","a73a445c1e0a6d0f8b48e8eb22dc9d647896783a7f8991cbbc31c0d94bf1f5a2","d88a5e779faf033be3d52142a04fbe1cb96009868e3bbdd296b2bc6c59e06c0e","cd1d2f103b79002cd94b85a640a103f094227a2c4c53bc8af1fdbf4e13d9729e","5e379df3d61561c2ed7789b5995b9ba2143bbba21a905e2381e16efe7d1fa424","f07a137bbe2de7a122c37bfea00e761975fb264c49f18003d398d71b3fb35a5f","3dce33e7eb25594863b8e615f14a45ab98190d85953436750644212d8a18c066","2b93035328f7778d200252681c1d86285d501ed424825a18f81e4c3028aa51d9","2ac9c8332c5f8510b8bdd571f8271e0f39b0577714d5e95c1e79a12b2616f069","42c21aa963e7b86fa00801d96e88b36803188018d5ad91db2a9101bccd40b3ff","d31eb848cdebb4c55b4893b335a7c0cca95ad66dee13cbb7d0893810c0a9c301","b9f96255e1048ed2ea33ec553122716f0e57fc1c3ad778e9aa15f5b46547bd23","7a9e0a564fee396cacf706523b5aeed96e04c6b871a8bebefad78499fbffc5bc","906c751ef5822ec0dadcea2f0e9db64a33fb4ee926cc9f7efa38afe5d5371b2a","5387c049e9702f2d2d7ece1a74836a14b47fbebe9bbeb19f94c580a37c855351","c68391fb9efad5d99ff332c65b1606248c4e4a9f1dd9a087204242b56c7126d6","e9cf02252d3a0ced987d24845dcb1f11c1be5541f17e5daa44c6de2d18138d0c","e8b02b879754d85f48489294f99147aeccc352c760d95a6fe2b6e49cd400b2fe","9f6908ab3d8a86c68b86e38578afc7095114e66b2fc36a2a96e9252aac3998e0","0eedb2344442b143ddcd788f87096961cd8572b64f10b4afc3356aa0460171c6","71405cc70f183d029cc5018375f6c35117ffdaf11846c35ebf85ee3956b1b2a6","c68baff4d8ba346130e9753cefe2e487a16731bf17e05fdacc81e8c9a26aae9d","2cd15528d8bb5d0453aa339b4b52e0696e8b07e790c153831c642c3dea5ac8af","479d622e66283ffa9883fbc33e441f7fc928b2277ff30aacbec7b7761b4e9579","ade307876dc5ca267ca308d09e737b611505e015c535863f22420a11fffc1c54","f8cdefa3e0dee639eccbe9794b46f90291e5fd3989fcba60d2f08fde56179fb9","86c5a62f99aac7053976e317dbe9acb2eaf903aaf3d2e5bb1cafe5c2df7b37a8","2b300954ce01a8343866f737656e13243e86e5baef51bd0631b21dcef1f6e954","a2d409a9ffd872d6b9d78ead00baa116bbc73cfa959fce9a2f29d3227876b2a1","b288936f560cd71f4a6002953290de9ff8dfbfbf37f5a9391be5c83322324898","61178a781ef82e0ff54f9430397e71e8f365fc1e3725e0e5346f2de7b0d50dfa","6a6ccb37feb3aad32d9be026a3337db195979cd5727a616fc0f557e974101a54","c649ea79205c029a02272ef55b7ab14ada0903db26144d2205021f24727ac7a3","38e2b02897c6357bbcff729ef84c736727b45cc152abe95a7567caccdfad2a1d","d6610ea7e0b1a7686dba062a1e5544dd7d34140f4545305b7c6afaebfb348341","3dee35db743bdba2c8d19aece7ac049bde6fa587e195d86547c882784e6ba34c","b15e55c5fa977c2f25ca0b1db52cfa2d1fd4bf0baf90a8b90d4a7678ca462ff1","f41d30972724714763a2698ae949fbc463afb203b5fa7c4ad7e4de0871129a17","843dd7b6a7c6269fd43827303f5cbe65c1fecabc30b4670a50d5a15d57daeeb9","f06d8b8567ee9fd799bf7f806efe93b67683ef24f4dea5b23ef12edff4434d9d","6017384f697ff38bc3ef6a546df5b230c3c31329db84cbfe686c83bec011e2b2","e1a5b30d9248549ca0c0bb1d653bafae20c64c4aa5928cc4cd3017b55c2177b0","a593632d5878f17295bd53e1c77f27bf4c15212822f764a2bfc1702f4b413fa0","a868a534ba1c2ca9060b8a13b0ffbbbf78b4be7b0ff80d8c75b02773f7192c29","da7545aba8f54a50fde23e2ede00158dc8112560d934cee58098dfb03aae9b9d","34baf65cfee92f110d6653322e2120c2d368ee64b3c7981dff08ed105c4f19b0","a1a261624efb3a00ff346b13580f70f3463b8cdcc58b60f5793ff11785d52cab","f83b320cceccfc48457a818d18fc9a006ab18d0bdd727aa2c2e73dc1b4a45e98","9d92b037978bb9525bc4b673ebddd443277542e010c0aef019c03a170ccdaa73","b0d10e46cfe3f6c476b69af02eaa38e4ccc7430221ce3109ae84bb9fb8282298","fab58e600970e66547644a44bc9918e3223aa2cbd9e8763cec004b2cfb48827e","70e9a18da08294f75bf23e46c7d69e67634c0765d355887b9b41f0d959e1426e","ed44ba6b95f08b758748be7902e0cc54178b1337c56d0e2469c77b03f63ac73b"],"options":{"composite":true,"declaration":true,"declarationMap":true,"emitDeclarationOnly":true,"esModuleInterop":true,"inlineSources":true,"module":1,"outDir":"./types","rootDir":"../src","sourceMap":true,"strict":true,"target":7},"fileIdsList":[[120,251],[120],[91,120,127,128,129,144],[120,128,129,145,146],[120,127,128],[120,127,144,147,150],[120,127,147,150,151],[120,148,149,150,152,153],[120,127,150],[120,127,144,147,148,149,152],[120,127,135],[120,127],[91,120,127],[80,120,127],[120,131,132,133,134,135,136,137,138,139,140,141,142,143],[120,127,133,134],[120,127,133,135],[120,166,224],[120,224,225],[120,224,225,226,227],[120,166],[120,198],[120,198,199,200],[64,120],[67,120],[64,67,120],[65,66,67,68,69,70,71,72,73,74,75,120,155,158,159,160,161,162,163,164,165],[58,64,65,120],[67,73,75,120,154],[120,157],[67,68,120],[64,120,161],[120,193,194],[120,251,252,253,254,255],[120,251,253],[120,156],[120,258,259,260],[92,120,127],[120,263],[120,264],[120,275],[120,269,274],[120,278,280,281,282,283,284,285,286,287,288,289,290],[120,278,279,281,282,283,284,285,286,287,288,289,290],[120,279,280,281,282,283,284,285,286,287,288,289,290],[120,278,279,280,282,283,284,285,286,287,288,289,290],[120,278,279,280,281,283,284,285,286,287,288,289,290],[120,278,279,280,281,282,284,285,286,287,288,289,290],[120,278,279,280,281,282,283,285,286,287,288,289,290],[120,278,279,280,281,282,283,284,286,287,288,289,290],[120,278,279,280,281,282,283,284,285,287,288,289,290],[120,278,279,280,281,282,283,284,285,286,288,289,290],[120,278,279,280,281,282,283,284,285,286,287,289,290],[120,278,279,280,281,282,283,284,285,286,287,288,290],[120,278,279,280,281,282,283,284,285,286,287,288,289],[76,120],[79,120],[80,85,111,120],[81,91,92,99,108,119,120],[81,82,91,99,120],[83,120],[84,85,92,100,120],[85,108,116,120],[86,88,91,99,120],[87,120],[88,89,120],[90,91,120],[91,120],[91,92,93,108,119,120],[91,92,93,108,120],[91,94,99,108,119,120],[91,92,94,95,99,108,116,119,120],[94,96,108,116,119,120],[76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126],[91,97,120],[98,119,120,124],[88,91,99,108,120],[100,120],[101,120],[79,102,120],[103,118,120,124],[104,120],[105,120],[91,106,120],[106,107,120,122],[80,91,108,109,110,120],[80,108,110,120],[108,109,120],[111,120],[112,120],[91,114,115,120],[114,115,120],[85,99,116,120],[117,120],[99,118,120],[80,94,105,119,120],[85,120],[108,120,121],[120,122],[120,123],[80,85,91,93,102,108,119,120,122,124],[108,120,125],[120,127,296],[120,299,338],[120,299,323,338],[120,338],[120,299],[120,299,324,338],[120,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337],[120,324,338],[120,339],[120,343],[120,203],[120,215,216,217],[120,203,214,215],[120,178],[120,178,179,180,181,182],[120,167,168,169,170,171,172,173,174,175,176,177],[120,267,270],[120,267,270,271,272],[120,269],[120,266,273],[120,268],[57,59,60,61,62,63,120],[57,58,120],[59,120],[58,59,120],[57,59,120],[120,166,187,228],[120,229,230],[120,166,183,184,185],[120,184],[56,120,184,185,186],[120,185],[120,188],[120,188,189,192,196],[120,195],[120,166,190,191],[120,211,212,213],[120,210,211],[120,166,210,211],[120,166,203,210],[120,166,204],[120,204,205,206,207,208,209],[120,166,203],[120,219],[120,202,219,221,222],[120,166,187,190,197,201,202,219,220],[120,166,197,214,218],[120,166,235],[120,166,228,235],[120,233,234,235,236,237,238,242],[120,166,210,243],[120,166,187,197,233,234,236],[120,166,187,197,231,232,233,235,236],[120,234,235,238],[120,239,240,241,243],[120,235,238],[120,166,235,238],[120,166,187,234],[120,166,210,235,236],[120,247,248,249],[120,166,187,223,246,247],[120,166,210,228,247,248],[120,166,223],[120,244,245],[120,183,187,223,243],[120,166,210,223,244],[247,248,249],[187,223,246,247],[166,210,248],[166,223]],"referencedMap":[[253,1],[251,2],[145,3],[128,2],[147,4],[129,5],[146,2],[151,6],[152,7],[148,7],[154,8],[149,7],[153,9],[150,10],[136,11],[133,12],[140,13],[134,11],[131,14],[139,2],[144,15],[141,2],[142,2],[143,2],[138,12],[135,16],[132,2],[137,17],[190,2],[225,18],[227,2],[226,19],[228,20],[224,21],[203,13],[199,22],[200,22],[201,23],[198,2],[65,24],[66,24],[68,25],[69,24],[70,24],[71,26],[72,2],[73,2],[74,2],[67,24],[166,27],[75,28],[155,29],[158,30],[159,2],[160,2],[161,2],[162,2],[163,2],[164,31],[165,32],[193,2],[195,33],[194,2],[256,34],[252,1],[254,35],[255,1],[191,12],[157,36],[257,2],[258,2],[261,37],[259,2],[262,38],[263,2],[264,39],[265,40],[276,41],[275,42],[260,2],[277,2],[279,43],[280,44],[278,45],[281,46],[282,47],[283,48],[284,49],[285,50],[286,51],[287,52],[288,53],[289,54],[290,55],[291,2],[156,2],[76,56],[77,56],[79,57],[80,58],[81,59],[82,60],[83,61],[84,62],[85,63],[86,64],[87,65],[88,66],[89,66],[90,67],[91,68],[92,69],[93,70],[78,2],[126,2],[94,71],[95,72],[96,73],[127,74],[97,75],[98,76],[99,77],[100,78],[101,79],[102,80],[103,81],[104,82],[105,83],[106,84],[107,85],[108,86],[110,87],[109,88],[111,89],[112,90],[113,2],[114,91],[115,92],[116,93],[117,94],[118,95],[119,96],[120,97],[121,98],[122,99],[123,100],[124,101],[125,102],[292,2],[293,12],[294,2],[295,2],[297,103],[296,2],[298,12],[323,104],[324,105],[299,106],[302,106],[321,104],[322,104],[312,104],[311,107],[309,104],[304,104],[317,104],[315,104],[319,104],[303,104],[316,104],[320,104],[305,104],[306,104],[318,104],[300,104],[307,104],[308,104],[310,104],[314,104],[325,108],[313,104],[301,104],[338,109],[337,2],[332,108],[334,110],[333,108],[326,108],[327,108],[329,108],[331,108],[335,110],[336,110],[328,110],[330,110],[340,111],[339,2],[341,2],[342,2],[343,2],[344,112],[130,2],[266,2],[215,113],[218,114],[216,115],[217,115],[177,2],[174,116],[176,116],[175,116],[173,116],[183,117],[178,118],[182,2],[179,2],[181,2],[180,2],[169,116],[170,116],[171,116],[167,2],[168,2],[172,116],[267,2],[271,119],[273,120],[272,119],[270,121],[274,122],[269,123],[268,2],[57,2],[64,124],[59,125],[60,126],[61,126],[62,127],[63,127],[58,128],[8,2],[10,2],[9,2],[2,2],[11,2],[12,2],[13,2],[14,2],[15,2],[16,2],[17,2],[18,2],[3,2],[4,2],[22,2],[19,2],[20,2],[21,2],[23,2],[24,2],[25,2],[5,2],[26,2],[27,2],[28,2],[29,2],[6,2],[33,2],[30,2],[31,2],[32,2],[34,2],[7,2],[35,2],[40,2],[41,2],[36,2],[37,2],[38,2],[39,2],[1,2],[42,2],[229,129],[230,2],[231,130],[56,2],[186,131],[185,132],[187,133],[184,134],[189,135],[197,136],[196,137],[188,2],[192,138],[214,139],[212,140],[213,141],[211,142],[205,143],[206,143],[207,2],[208,143],[210,144],[204,145],[209,143],[202,2],[220,146],[222,146],[223,147],[221,148],[219,149],[236,150],[237,151],[243,152],[232,153],[235,154],[234,155],[239,156],[242,157],[240,158],[241,159],[233,160],[238,161],[250,162],[248,163],[249,164],[247,165],[246,166],[244,167],[245,168],[47,2],[48,2],[49,2],[50,2],[51,2],[52,2],[43,2],[53,2],[54,2],[55,2],[44,2],[45,2],[46,2]],"exportedModulesMap":[[253,1],[251,2],[145,3],[128,2],[147,4],[129,5],[146,2],[151,6],[152,7],[148,7],[154,8],[149,7],[153,9],[150,10],[136,11],[133,12],[140,13],[134,11],[131,14],[139,2],[144,15],[141,2],[142,2],[143,2],[138,12],[135,16],[132,2],[137,17],[190,2],[225,18],[227,2],[226,19],[228,20],[224,21],[203,13],[199,22],[200,22],[201,23],[198,2],[65,24],[66,24],[68,25],[69,24],[70,24],[71,26],[72,2],[73,2],[74,2],[67,24],[166,27],[75,28],[155,29],[158,30],[159,2],[160,2],[161,2],[162,2],[163,2],[164,31],[165,32],[193,2],[195,33],[194,2],[256,34],[252,1],[254,35],[255,1],[191,12],[157,36],[257,2],[258,2],[261,37],[259,2],[262,38],[263,2],[264,39],[265,40],[276,41],[275,42],[260,2],[277,2],[279,43],[280,44],[278,45],[281,46],[282,47],[283,48],[284,49],[285,50],[286,51],[287,52],[288,53],[289,54],[290,55],[291,2],[156,2],[76,56],[77,56],[79,57],[80,58],[81,59],[82,60],[83,61],[84,62],[85,63],[86,64],[87,65],[88,66],[89,66],[90,67],[91,68],[92,69],[93,70],[78,2],[126,2],[94,71],[95,72],[96,73],[127,74],[97,75],[98,76],[99,77],[100,78],[101,79],[102,80],[103,81],[104,82],[105,83],[106,84],[107,85],[108,86],[110,87],[109,88],[111,89],[112,90],[113,2],[114,91],[115,92],[116,93],[117,94],[118,95],[119,96],[120,97],[121,98],[122,99],[123,100],[124,101],[125,102],[292,2],[293,12],[294,2],[295,2],[297,103],[296,2],[298,12],[323,104],[324,105],[299,106],[302,106],[321,104],[322,104],[312,104],[311,107],[309,104],[304,104],[317,104],[315,104],[319,104],[303,104],[316,104],[320,104],[305,104],[306,104],[318,104],[300,104],[307,104],[308,104],[310,104],[314,104],[325,108],[313,104],[301,104],[338,109],[337,2],[332,108],[334,110],[333,108],[326,108],[327,108],[329,108],[331,108],[335,110],[336,110],[328,110],[330,110],[340,111],[339,2],[341,2],[342,2],[343,2],[344,112],[130,2],[266,2],[215,113],[218,114],[216,115],[217,115],[177,2],[174,116],[176,116],[175,116],[173,116],[183,117],[178,118],[182,2],[179,2],[181,2],[180,2],[169,116],[170,116],[171,116],[167,2],[168,2],[172,116],[267,2],[271,119],[273,120],[272,119],[270,121],[274,122],[269,123],[268,2],[57,2],[64,124],[59,125],[60,126],[61,126],[62,127],[63,127],[58,128],[8,2],[10,2],[9,2],[2,2],[11,2],[12,2],[13,2],[14,2],[15,2],[16,2],[17,2],[18,2],[3,2],[4,2],[22,2],[19,2],[20,2],[21,2],[23,2],[24,2],[25,2],[5,2],[26,2],[27,2],[28,2],[29,2],[6,2],[33,2],[30,2],[31,2],[32,2],[34,2],[7,2],[35,2],[40,2],[41,2],[36,2],[37,2],[38,2],[39,2],[1,2],[42,2],[229,129],[230,2],[231,130],[56,2],[186,131],[185,132],[187,133],[184,134],[189,135],[197,136],[196,137],[188,2],[192,138],[214,139],[212,140],[213,141],[211,142],[205,143],[206,143],[207,2],[208,143],[210,144],[204,145],[209,143],[202,2],[220,146],[222,146],[223,147],[221,148],[219,149],[236,150],[237,151],[243,152],[232,153],[235,154],[234,155],[239,156],[242,157],[240,158],[241,159],[233,160],[238,161],[250,169],[248,170],[249,171],[247,172],[246,166],[244,167],[245,168],[47,2],[48,2],[49,2],[50,2],[51,2],[52,2],[43,2],[53,2],[54,2],[55,2],[44,2],[45,2],[46,2]],"semanticDiagnosticsPerFile":[253,251,145,128,147,129,146,151,152,148,154,149,153,150,136,133,140,134,131,139,144,141,142,143,138,135,132,137,190,225,227,226,228,224,203,199,200,201,198,65,66,68,69,70,71,72,73,74,67,166,75,155,158,159,160,161,162,163,164,165,193,195,194,256,252,254,255,191,157,257,258,261,259,262,263,264,265,276,275,260,277,279,280,278,281,282,283,284,285,286,287,288,289,290,291,156,76,77,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,78,126,94,95,96,127,97,98,99,100,101,102,103,104,105,106,107,108,110,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,292,293,294,295,297,296,298,323,324,299,302,321,322,312,311,309,304,317,315,319,303,316,320,305,306,318,300,307,308,310,314,325,313,301,338,337,332,334,333,326,327,329,331,335,336,328,330,340,339,341,342,343,344,130,266,215,218,216,217,177,174,176,175,173,183,178,182,179,181,180,169,170,171,167,168,172,267,271,273,272,270,274,269,268,57,64,59,60,61,62,63,58,8,10,9,2,11,12,13,14,15,16,17,18,3,4,22,19,20,21,23,24,25,5,26,27,28,29,6,33,30,31,32,34,7,35,40,41,36,37,38,39,1,42,229,230,231,56,186,185,187,184,189,197,196,188,192,214,212,213,211,205,206,207,208,210,204,209,202,220,222,223,221,219,236,237,243,232,235,234,239,242,240,241,233,238,250,248,249,247,246,244,245,47,48,49,50,51,52,43,53,54,55,44,45,46],"latestChangedDtsFile":"./types/index.d.ts"},"version":"4.9.5"}
\ No newline at end of file
+{"program":{"fileNames":["../../../node_modules/typescript/lib/lib.es5.d.ts","../../../node_modules/typescript/lib/lib.es2015.d.ts","../../../node_modules/typescript/lib/lib.es2016.d.ts","../../../node_modules/typescript/lib/lib.es2017.d.ts","../../../node_modules/typescript/lib/lib.es2018.d.ts","../../../node_modules/typescript/lib/lib.es2019.d.ts","../../../node_modules/typescript/lib/lib.es2020.d.ts","../../../node_modules/typescript/lib/lib.dom.d.ts","../../../node_modules/typescript/lib/lib.es2015.core.d.ts","../../../node_modules/typescript/lib/lib.es2015.collection.d.ts","../../../node_modules/typescript/lib/lib.es2015.generator.d.ts","../../../node_modules/typescript/lib/lib.es2015.iterable.d.ts","../../../node_modules/typescript/lib/lib.es2015.promise.d.ts","../../../node_modules/typescript/lib/lib.es2015.proxy.d.ts","../../../node_modules/typescript/lib/lib.es2015.reflect.d.ts","../../../node_modules/typescript/lib/lib.es2015.symbol.d.ts","../../../node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts","../../../node_modules/typescript/lib/lib.es2016.array.include.d.ts","../../../node_modules/typescript/lib/lib.es2017.object.d.ts","../../../node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts","../../../node_modules/typescript/lib/lib.es2017.string.d.ts","../../../node_modules/typescript/lib/lib.es2017.intl.d.ts","../../../node_modules/typescript/lib/lib.es2017.typedarrays.d.ts","../../../node_modules/typescript/lib/lib.es2018.asyncgenerator.d.ts","../../../node_modules/typescript/lib/lib.es2018.asynciterable.d.ts","../../../node_modules/typescript/lib/lib.es2018.intl.d.ts","../../../node_modules/typescript/lib/lib.es2018.promise.d.ts","../../../node_modules/typescript/lib/lib.es2018.regexp.d.ts","../../../node_modules/typescript/lib/lib.es2019.array.d.ts","../../../node_modules/typescript/lib/lib.es2019.object.d.ts","../../../node_modules/typescript/lib/lib.es2019.string.d.ts","../../../node_modules/typescript/lib/lib.es2019.symbol.d.ts","../../../node_modules/typescript/lib/lib.es2019.intl.d.ts","../../../node_modules/typescript/lib/lib.es2020.bigint.d.ts","../../../node_modules/typescript/lib/lib.es2020.date.d.ts","../../../node_modules/typescript/lib/lib.es2020.promise.d.ts","../../../node_modules/typescript/lib/lib.es2020.sharedmemory.d.ts","../../../node_modules/typescript/lib/lib.es2020.string.d.ts","../../../node_modules/typescript/lib/lib.es2020.symbol.wellknown.d.ts","../../../node_modules/typescript/lib/lib.es2020.intl.d.ts","../../../node_modules/typescript/lib/lib.es2020.number.d.ts","../../../node_modules/typescript/lib/lib.esnext.intl.d.ts","../../../types/eth-ens-namehash.d.ts","../../../types/ethereum-ens-network-map.d.ts","../../../types/global.d.ts","../../../types/single-call-balance-checker-abi.d.ts","../../../types/@metamask/contract-metadata.d.ts","../../../types/@metamask/eth-hd-keyring.d.ts","../../../types/@metamask/eth-simple-keyring.d.ts","../../../types/@metamask/ethjs-provider-http.d.ts","../../../types/@metamask/ethjs-unit.d.ts","../../../types/@metamask/metamask-eth-abis.d.ts","../../../types/eth-json-rpc-infura/src/createprovider.d.ts","../../../types/eth-phishing-detect/src/config.json.d.ts","../../../types/eth-phishing-detect/src/detector.d.ts","../../base-controller/dist/types/basecontrollerv1.d.ts","../../../node_modules/superstruct/dist/error.d.ts","../../../node_modules/superstruct/dist/utils.d.ts","../../../node_modules/superstruct/dist/struct.d.ts","../../../node_modules/superstruct/dist/structs/coercions.d.ts","../../../node_modules/superstruct/dist/structs/refinements.d.ts","../../../node_modules/superstruct/dist/structs/types.d.ts","../../../node_modules/superstruct/dist/structs/utilities.d.ts","../../../node_modules/superstruct/dist/index.d.ts","../../../node_modules/@metamask/utils/dist/types/assert.d.ts","../../../node_modules/@metamask/utils/dist/types/base64.d.ts","../../../node_modules/@metamask/utils/dist/types/hex.d.ts","../../../node_modules/@metamask/utils/dist/types/bytes.d.ts","../../../node_modules/@metamask/utils/dist/types/caip-types.d.ts","../../../node_modules/@metamask/utils/dist/types/checksum.d.ts","../../../node_modules/@metamask/utils/dist/types/coercers.d.ts","../../../node_modules/@metamask/utils/dist/types/collections.d.ts","../../../node_modules/@metamask/utils/dist/types/encryption-types.d.ts","../../../node_modules/@metamask/utils/dist/types/errors.d.ts","../../../node_modules/@metamask/utils/dist/types/json.d.ts","../../../node_modules/@types/node/assert.d.ts","../../../node_modules/@types/node/assert/strict.d.ts","../../../node_modules/@types/node/globals.d.ts","../../../node_modules/@types/node/async_hooks.d.ts","../../../node_modules/@types/node/buffer.d.ts","../../../node_modules/@types/node/child_process.d.ts","../../../node_modules/@types/node/cluster.d.ts","../../../node_modules/@types/node/console.d.ts","../../../node_modules/@types/node/constants.d.ts","../../../node_modules/@types/node/crypto.d.ts","../../../node_modules/@types/node/dgram.d.ts","../../../node_modules/@types/node/diagnostics_channel.d.ts","../../../node_modules/@types/node/dns.d.ts","../../../node_modules/@types/node/dns/promises.d.ts","../../../node_modules/@types/node/domain.d.ts","../../../node_modules/@types/node/events.d.ts","../../../node_modules/@types/node/fs.d.ts","../../../node_modules/@types/node/fs/promises.d.ts","../../../node_modules/@types/node/http.d.ts","../../../node_modules/@types/node/http2.d.ts","../../../node_modules/@types/node/https.d.ts","../../../node_modules/@types/node/inspector.d.ts","../../../node_modules/@types/node/module.d.ts","../../../node_modules/@types/node/net.d.ts","../../../node_modules/@types/node/os.d.ts","../../../node_modules/@types/node/path.d.ts","../../../node_modules/@types/node/perf_hooks.d.ts","../../../node_modules/@types/node/process.d.ts","../../../node_modules/@types/node/punycode.d.ts","../../../node_modules/@types/node/querystring.d.ts","../../../node_modules/@types/node/readline.d.ts","../../../node_modules/@types/node/repl.d.ts","../../../node_modules/@types/node/stream.d.ts","../../../node_modules/@types/node/stream/promises.d.ts","../../../node_modules/@types/node/stream/consumers.d.ts","../../../node_modules/@types/node/stream/web.d.ts","../../../node_modules/@types/node/string_decoder.d.ts","../../../node_modules/@types/node/test.d.ts","../../../node_modules/@types/node/timers.d.ts","../../../node_modules/@types/node/timers/promises.d.ts","../../../node_modules/@types/node/tls.d.ts","../../../node_modules/@types/node/trace_events.d.ts","../../../node_modules/@types/node/tty.d.ts","../../../node_modules/@types/node/url.d.ts","../../../node_modules/@types/node/util.d.ts","../../../node_modules/@types/node/v8.d.ts","../../../node_modules/@types/node/vm.d.ts","../../../node_modules/@types/node/wasi.d.ts","../../../node_modules/@types/node/worker_threads.d.ts","../../../node_modules/@types/node/zlib.d.ts","../../../node_modules/@types/node/globals.global.d.ts","../../../node_modules/@types/node/index.d.ts","../../../node_modules/@ethereumjs/common/dist/enums.d.ts","../../../node_modules/@ethereumjs/common/dist/types.d.ts","../../../node_modules/buffer/index.d.ts","../../../node_modules/@ethereumjs/util/dist/constants.d.ts","../../../node_modules/@ethereumjs/util/dist/units.d.ts","../../../node_modules/@ethereumjs/util/dist/address.d.ts","../../../node_modules/@ethereumjs/util/dist/bytes.d.ts","../../../node_modules/@ethereumjs/util/dist/types.d.ts","../../../node_modules/@ethereumjs/util/dist/account.d.ts","../../../node_modules/@ethereumjs/util/dist/withdrawal.d.ts","../../../node_modules/@ethereumjs/util/dist/signature.d.ts","../../../node_modules/@ethereumjs/util/dist/encoding.d.ts","../../../node_modules/@ethereumjs/util/dist/asynceventemitter.d.ts","../../../node_modules/@ethereumjs/util/dist/internal.d.ts","../../../node_modules/@ethereumjs/util/dist/lock.d.ts","../../../node_modules/@ethereumjs/util/dist/provider.d.ts","../../../node_modules/@ethereumjs/util/dist/index.d.ts","../../../node_modules/@ethereumjs/common/dist/common.d.ts","../../../node_modules/@ethereumjs/common/dist/utils.d.ts","../../../node_modules/@ethereumjs/common/dist/index.d.ts","../../../node_modules/@ethereumjs/tx/dist/eip2930transaction.d.ts","../../../node_modules/@ethereumjs/tx/dist/legacytransaction.d.ts","../../../node_modules/@ethereumjs/tx/dist/types.d.ts","../../../node_modules/@ethereumjs/tx/dist/basetransaction.d.ts","../../../node_modules/@ethereumjs/tx/dist/eip1559transaction.d.ts","../../../node_modules/@ethereumjs/tx/dist/transactionfactory.d.ts","../../../node_modules/@ethereumjs/tx/dist/index.d.ts","../../../node_modules/@metamask/utils/dist/types/keyring.d.ts","../../../node_modules/@types/ms/index.d.ts","../../../node_modules/@types/debug/index.d.ts","../../../node_modules/@metamask/utils/dist/types/logging.d.ts","../../../node_modules/@metamask/utils/dist/types/misc.d.ts","../../../node_modules/@metamask/utils/dist/types/number.d.ts","../../../node_modules/@metamask/utils/dist/types/opaque.d.ts","../../../node_modules/@metamask/utils/dist/types/promise.d.ts","../../../node_modules/@metamask/utils/dist/types/time.d.ts","../../../node_modules/@metamask/utils/dist/types/transaction-types.d.ts","../../../node_modules/@metamask/utils/dist/types/versions.d.ts","../../../node_modules/@metamask/utils/dist/types/index.d.ts","../../../node_modules/immer/dist/utils/env.d.ts","../../../node_modules/immer/dist/utils/errors.d.ts","../../../node_modules/immer/dist/types/types-external.d.ts","../../../node_modules/immer/dist/types/types-internal.d.ts","../../../node_modules/immer/dist/utils/common.d.ts","../../../node_modules/immer/dist/utils/plugins.d.ts","../../../node_modules/immer/dist/core/scope.d.ts","../../../node_modules/immer/dist/core/finalize.d.ts","../../../node_modules/immer/dist/core/proxy.d.ts","../../../node_modules/immer/dist/core/immerclass.d.ts","../../../node_modules/immer/dist/core/current.d.ts","../../../node_modules/immer/dist/internal.d.ts","../../../node_modules/immer/dist/plugins/es5.d.ts","../../../node_modules/immer/dist/plugins/patches.d.ts","../../../node_modules/immer/dist/plugins/mapset.d.ts","../../../node_modules/immer/dist/plugins/all.d.ts","../../../node_modules/immer/dist/immer.d.ts","../../base-controller/dist/types/restrictedcontrollermessenger.d.ts","../../base-controller/dist/types/controllermessenger.d.ts","../../base-controller/dist/types/basecontrollerv2.d.ts","../../base-controller/dist/types/index.d.ts","../../controller-utils/dist/types/types.d.ts","../../controller-utils/dist/types/constants.d.ts","../../../node_modules/@metamask/eth-query/index.d.ts","../../../node_modules/@types/bn.js/index.d.ts","../../controller-utils/dist/types/util.d.ts","../../../node_modules/@spruceid/siwe-parser/dist/abnf.d.ts","../../../node_modules/@spruceid/siwe-parser/dist/utils.d.ts","../../../node_modules/@spruceid/siwe-parser/dist/parsers.d.ts","../../controller-utils/dist/types/siwe.d.ts","../../controller-utils/dist/types/index.d.ts","../../../node_modules/@metamask/swappable-obj-proxy/dist/types.d.ts","../../../node_modules/@metamask/swappable-obj-proxy/dist/createeventemitterproxy.d.ts","../../../node_modules/@metamask/swappable-obj-proxy/dist/createswappableproxy.d.ts","../../../node_modules/@metamask/swappable-obj-proxy/dist/index.d.ts","../../network-controller/dist/types/constants.d.ts","../../../node_modules/@metamask/safe-event-emitter/index.d.ts","../../json-rpc-engine/dist/types/jsonrpcengine.d.ts","../../json-rpc-engine/dist/types/createasyncmiddleware.d.ts","../../json-rpc-engine/dist/types/createscaffoldmiddleware.d.ts","../../json-rpc-engine/dist/types/getuniqueid.d.ts","../../json-rpc-engine/dist/types/idremapmiddleware.d.ts","../../json-rpc-engine/dist/types/mergemiddleware.d.ts","../../json-rpc-engine/dist/types/index.d.ts","../../eth-json-rpc-provider/dist/types/safe-event-emitter-provider.d.ts","../../eth-json-rpc-provider/dist/types/provider-from-engine.d.ts","../../eth-json-rpc-provider/dist/types/provider-from-middleware.d.ts","../../eth-json-rpc-provider/dist/types/index.d.ts","../../../node_modules/eth-block-tracker/dist/blocktracker.d.ts","../../../node_modules/eth-block-tracker/dist/pollingblocktracker.d.ts","../../../node_modules/eth-block-tracker/dist/subscribeblocktracker.d.ts","../../../node_modules/eth-block-tracker/dist/index.d.ts","../../network-controller/dist/types/types.d.ts","../../network-controller/dist/types/create-auto-managed-network-client.d.ts","../../network-controller/dist/types/networkcontroller.d.ts","../../network-controller/dist/types/create-network-client.d.ts","../../network-controller/dist/types/index.d.ts","../../../node_modules/@metamask/rpc-errors/dist/types/utils.d.ts","../../../node_modules/@metamask/rpc-errors/dist/types/classes.d.ts","../../../node_modules/@metamask/rpc-errors/dist/types/errors.d.ts","../../../node_modules/@metamask/rpc-errors/dist/types/error-constants.d.ts","../../../node_modules/@metamask/rpc-errors/dist/types/index.d.ts","../../approval-controller/dist/types/approvalcontroller.d.ts","../../approval-controller/dist/types/errors.d.ts","../../approval-controller/dist/types/index.d.ts","../../permission-controller/dist/types/permission-middleware.d.ts","../../permission-controller/dist/types/subjectmetadatacontroller.d.ts","../../permission-controller/dist/types/permissioncontroller.d.ts","../../permission-controller/dist/types/permission.d.ts","../../permission-controller/dist/types/caveat.d.ts","../../permission-controller/dist/types/errors.d.ts","../../permission-controller/dist/types/utils.d.ts","../../permission-controller/dist/types/rpc-methods/getpermissions.d.ts","../../permission-controller/dist/types/rpc-methods/requestpermissions.d.ts","../../permission-controller/dist/types/rpc-methods/revokepermissions.d.ts","../../permission-controller/dist/types/rpc-methods/index.d.ts","../../permission-controller/dist/types/index.d.ts","../../selected-network-controller/dist/types/selectednetworkcontroller.d.ts","../../selected-network-controller/dist/types/selectednetworkmiddleware.d.ts","../../selected-network-controller/dist/types/index.d.ts","../src/types.ts","../src/queuedrequestcontroller.ts","../src/queuedrequestmiddleware.ts","../src/index.ts","../../../node_modules/@babel/types/lib/index.d.ts","../../../node_modules/@types/babel__generator/index.d.ts","../../../node_modules/@babel/parser/typings/babel-parser.d.ts","../../../node_modules/@types/babel__template/index.d.ts","../../../node_modules/@types/babel__traverse/index.d.ts","../../../node_modules/@types/babel__core/index.d.ts","../../../node_modules/@types/deep-freeze-strict/index.d.ts","../../../node_modules/@types/eslint/helpers.d.ts","../../../node_modules/@types/estree/index.d.ts","../../../node_modules/@types/json-schema/index.d.ts","../../../node_modules/@types/eslint/index.d.ts","../../../node_modules/@types/graceful-fs/index.d.ts","../../../node_modules/@types/istanbul-lib-coverage/index.d.ts","../../../node_modules/@types/istanbul-lib-report/index.d.ts","../../../node_modules/@types/istanbul-reports/index.d.ts","../../../node_modules/chalk/index.d.ts","../../../node_modules/jest-diff/build/cleanupsemantic.d.ts","../../../node_modules/pretty-format/build/types.d.ts","../../../node_modules/pretty-format/build/index.d.ts","../../../node_modules/jest-diff/build/types.d.ts","../../../node_modules/jest-diff/build/difflines.d.ts","../../../node_modules/jest-diff/build/printdiffs.d.ts","../../../node_modules/jest-diff/build/index.d.ts","../../../node_modules/jest-matcher-utils/build/index.d.ts","../../../node_modules/@types/jest/index.d.ts","../../../node_modules/@types/jest-when/index.d.ts","../../../node_modules/@types/json5/index.d.ts","../../../node_modules/@types/lodash/common/common.d.ts","../../../node_modules/@types/lodash/common/array.d.ts","../../../node_modules/@types/lodash/common/collection.d.ts","../../../node_modules/@types/lodash/common/date.d.ts","../../../node_modules/@types/lodash/common/function.d.ts","../../../node_modules/@types/lodash/common/lang.d.ts","../../../node_modules/@types/lodash/common/math.d.ts","../../../node_modules/@types/lodash/common/number.d.ts","../../../node_modules/@types/lodash/common/object.d.ts","../../../node_modules/@types/lodash/common/seq.d.ts","../../../node_modules/@types/lodash/common/string.d.ts","../../../node_modules/@types/lodash/common/util.d.ts","../../../node_modules/@types/lodash/index.d.ts","../../../node_modules/@types/minimatch/index.d.ts","../../../node_modules/@types/parse-json/index.d.ts","../../../node_modules/@types/pbkdf2/index.d.ts","../../../node_modules/@types/prettier/index.d.ts","../../../node_modules/@types/punycode/index.d.ts","../../../node_modules/@types/readable-stream/node_modules/safe-buffer/index.d.ts","../../../node_modules/@types/readable-stream/index.d.ts","../../../node_modules/@types/secp256k1/index.d.ts","../../../node_modules/@types/semver/classes/semver.d.ts","../../../node_modules/@types/semver/functions/parse.d.ts","../../../node_modules/@types/semver/functions/valid.d.ts","../../../node_modules/@types/semver/functions/clean.d.ts","../../../node_modules/@types/semver/functions/inc.d.ts","../../../node_modules/@types/semver/functions/diff.d.ts","../../../node_modules/@types/semver/functions/major.d.ts","../../../node_modules/@types/semver/functions/minor.d.ts","../../../node_modules/@types/semver/functions/patch.d.ts","../../../node_modules/@types/semver/functions/prerelease.d.ts","../../../node_modules/@types/semver/functions/compare.d.ts","../../../node_modules/@types/semver/functions/rcompare.d.ts","../../../node_modules/@types/semver/functions/compare-loose.d.ts","../../../node_modules/@types/semver/functions/compare-build.d.ts","../../../node_modules/@types/semver/functions/sort.d.ts","../../../node_modules/@types/semver/functions/rsort.d.ts","../../../node_modules/@types/semver/functions/gt.d.ts","../../../node_modules/@types/semver/functions/lt.d.ts","../../../node_modules/@types/semver/functions/eq.d.ts","../../../node_modules/@types/semver/functions/neq.d.ts","../../../node_modules/@types/semver/functions/gte.d.ts","../../../node_modules/@types/semver/functions/lte.d.ts","../../../node_modules/@types/semver/functions/cmp.d.ts","../../../node_modules/@types/semver/functions/coerce.d.ts","../../../node_modules/@types/semver/classes/comparator.d.ts","../../../node_modules/@types/semver/classes/range.d.ts","../../../node_modules/@types/semver/functions/satisfies.d.ts","../../../node_modules/@types/semver/ranges/max-satisfying.d.ts","../../../node_modules/@types/semver/ranges/min-satisfying.d.ts","../../../node_modules/@types/semver/ranges/to-comparators.d.ts","../../../node_modules/@types/semver/ranges/min-version.d.ts","../../../node_modules/@types/semver/ranges/valid.d.ts","../../../node_modules/@types/semver/ranges/outside.d.ts","../../../node_modules/@types/semver/ranges/gtr.d.ts","../../../node_modules/@types/semver/ranges/ltr.d.ts","../../../node_modules/@types/semver/ranges/intersects.d.ts","../../../node_modules/@types/semver/ranges/simplify.d.ts","../../../node_modules/@types/semver/ranges/subset.d.ts","../../../node_modules/@types/semver/internals/identifiers.d.ts","../../../node_modules/@types/semver/index.d.ts","../../../node_modules/@types/sinonjs__fake-timers/index.d.ts","../../../node_modules/@types/sinon/index.d.ts","../../../node_modules/@types/stack-utils/index.d.ts","../../../node_modules/@types/uuid/index.d.ts","../../../node_modules/@types/yargs-parser/index.d.ts","../../../node_modules/@types/yargs/index.d.ts"],"fileInfos":[{"version":"8730f4bf322026ff5229336391a18bcaa1f94d4f82416c8b2f3954e2ccaae2ba","affectsGlobalScope":true},"dc47c4fa66b9b9890cf076304de2a9c5201e94b740cffdf09f87296d877d71f6","7a387c58583dfca701b6c85e0adaf43fb17d590fb16d5b2dc0a2fbd89f35c467","8a12173c586e95f4433e0c6dc446bc88346be73ffe9ca6eec7aa63c8f3dca7f9","5f4e733ced4e129482ae2186aae29fde948ab7182844c3a5a51dd346182c7b06","4b421cbfb3a38a27c279dec1e9112c3d1da296f77a1a85ddadf7e7a425d45d18","1fc5ab7a764205c68fa10d381b08417795fc73111d6dd16b5b1ed36badb743d9",{"version":"3aafcb693fe5b5c3bd277bd4c3a617b53db474fe498fc5df067c5603b1eebde7","affectsGlobalScope":true},{"version":"adb996790133eb33b33aadb9c09f15c2c575e71fb57a62de8bf74dbf59ec7dfb","affectsGlobalScope":true},{"version":"8cc8c5a3bac513368b0157f3d8b31cfdcfe78b56d3724f30f80ed9715e404af8","affectsGlobalScope":true},{"version":"cdccba9a388c2ee3fd6ad4018c640a471a6c060e96f1232062223063b0a5ac6a","affectsGlobalScope":true},{"version":"c5c05907c02476e4bde6b7e76a79ffcd948aedd14b6a8f56e4674221b0417398","affectsGlobalScope":true},{"version":"5f406584aef28a331c36523df688ca3650288d14f39c5d2e555c95f0d2ff8f6f","affectsGlobalScope":true},{"version":"22f230e544b35349cfb3bd9110b6ef37b41c6d6c43c3314a31bd0d9652fcec72","affectsGlobalScope":true},{"version":"7ea0b55f6b315cf9ac2ad622b0a7813315bb6e97bf4bb3fbf8f8affbca7dc695","affectsGlobalScope":true},{"version":"3013574108c36fd3aaca79764002b3717da09725a36a6fc02eac386593110f93","affectsGlobalScope":true},{"version":"eb26de841c52236d8222f87e9e6a235332e0788af8c87a71e9e210314300410a","affectsGlobalScope":true},{"version":"3be5a1453daa63e031d266bf342f3943603873d890ab8b9ada95e22389389006","affectsGlobalScope":true},{"version":"17bb1fc99591b00515502d264fa55dc8370c45c5298f4a5c2083557dccba5a2a","affectsGlobalScope":true},{"version":"7ce9f0bde3307ca1f944119f6365f2d776d281a393b576a18a2f2893a2d75c98","affectsGlobalScope":true},{"version":"6a6b173e739a6a99629a8594bfb294cc7329bfb7b227f12e1f7c11bc163b8577","affectsGlobalScope":true},{"version":"81cac4cbc92c0c839c70f8ffb94eb61e2d32dc1c3cf6d95844ca099463cf37ea","affectsGlobalScope":true},{"version":"b0124885ef82641903d232172577f2ceb5d3e60aed4da1153bab4221e1f6dd4e","affectsGlobalScope":true},{"version":"0eb85d6c590b0d577919a79e0084fa1744c1beba6fd0d4e951432fa1ede5510a","affectsGlobalScope":true},{"version":"da233fc1c8a377ba9e0bed690a73c290d843c2c3d23a7bd7ec5cd3d7d73ba1e0","affectsGlobalScope":true},{"version":"d154ea5bb7f7f9001ed9153e876b2d5b8f5c2bb9ec02b3ae0d239ec769f1f2ae","affectsGlobalScope":true},{"version":"bb2d3fb05a1d2ffbca947cc7cbc95d23e1d053d6595391bd325deb265a18d36c","affectsGlobalScope":true},{"version":"c80df75850fea5caa2afe43b9949338ce4e2de086f91713e9af1a06f973872b8","affectsGlobalScope":true},{"version":"9d57b2b5d15838ed094aa9ff1299eecef40b190722eb619bac4616657a05f951","affectsGlobalScope":true},{"version":"6c51b5dd26a2c31dbf37f00cfc32b2aa6a92e19c995aefb5b97a3a64f1ac99de","affectsGlobalScope":true},{"version":"6e7997ef61de3132e4d4b2250e75343f487903ddf5370e7ce33cf1b9db9a63ed","affectsGlobalScope":true},{"version":"2ad234885a4240522efccd77de6c7d99eecf9b4de0914adb9a35c0c22433f993","affectsGlobalScope":true},{"version":"5e5e095c4470c8bab227dbbc61374878ecead104c74ab9960d3adcccfee23205","affectsGlobalScope":true},{"version":"09aa50414b80c023553090e2f53827f007a301bc34b0495bfb2c3c08ab9ad1eb","affectsGlobalScope":true},{"version":"d7f680a43f8cd12a6b6122c07c54ba40952b0c8aa140dcfcf32eb9e6cb028596","affectsGlobalScope":true},{"version":"3787b83e297de7c315d55d4a7c546ae28e5f6c0a361b7a1dcec1f1f50a54ef11","affectsGlobalScope":true},{"version":"e7e8e1d368290e9295ef18ca23f405cf40d5456fa9f20db6373a61ca45f75f40","affectsGlobalScope":true},{"version":"faf0221ae0465363c842ce6aa8a0cbda5d9296940a8e26c86e04cc4081eea21e","affectsGlobalScope":true},{"version":"06393d13ea207a1bfe08ec8d7be562549c5e2da8983f2ee074e00002629d1871","affectsGlobalScope":true},{"version":"2768ef564cfc0689a1b76106c421a2909bdff0acbe87da010785adab80efdd5c","affectsGlobalScope":true},{"version":"b248e32ca52e8f5571390a4142558ae4f203ae2f94d5bac38a3084d529ef4e58","affectsGlobalScope":true},{"version":"52d1bb7ab7a3306fd0375c8bff560feed26ed676a5b0457fa8027b563aecb9a4","affectsGlobalScope":true},"70bbfaec021ac4a0c805374225b55d70887f987df8b8dd7711d79464bb7b4385","869089d60b67219f63e6aca810284c89bae1b384b5cbc7ce64e53d82ad223ed5",{"version":"18338b6a4b920ec7d49b4ffafcbf0fa8a86b4bfd432966efd722dab611157cf4","affectsGlobalScope":true},"62a0875a0397b35a2364f1d401c0ce17975dfa4d47bf6844de858ae04da349f9","ee7491d0318d1fafcba97d5b72b450eb52671570f7a4ecd9e8898d40eaae9472","e3e7d217d89b380c1f34395eadc9289542851b0f0a64007dfe1fb7cf7423d24e","fd79909e93b4d50fd0ed9f3d39ddf8ba0653290bac25c295aac49f6befbd081b","345a9cc2945406f53051cd0e9b51f82e1e53929848eab046fdda91ee8aa7da31","9debe2de883da37a914e5e784a7be54c201b8f1d783822ad6f443ff409a5ea21","dee5d5c5440cda1f3668f11809a5503c30db0476ad117dd450f7ba5a45300e8f","f5e396c1424c391078c866d6f84afe0b4d2f7f85a160b9c756cd63b5b1775d93","5caa6f4fff16066d377d4e254f6c34c16540da3809cd66cd626a303bc33c419f","730d055528bdf12c8524870bb33d237991be9084c57634e56e5d8075f6605e02","75b22c74010ba649de1a1676a4c4b8b5bb4294fecd05089e2094429b16d7840c","e475453e7140e95542332943d3052fe4c7430ad1efce42b3e9157f1fee8cbc5f","ebfdf904255ce746c9d30117c2edef355fb19bf7650478d2405f39f0e4f302e6","f3f63b48addb8e2ea9d20bb671c3c306413b3daa39996d0ae52f63d8e32158e1","a50599c08934a62f11657bdbe0dc929ab66da1b1f09974408fd9a33ec1bb8060","5a20e7d6c630b91be15e9b837853173829d00273197481dc8d3e94df61105a71","8d478048d71cc16f806d4b71b252ecb67c7444ccf4f4b09b29a312712184f859","b4000a0a525fa921e896cbdb32ae802c9684f0fd371b5fc69e7310f7918cc2c3","9df4662ca3dbc2522bc115833ee04faa1afbb4e249a85ef4a0a09c621346bd08","b25d9065cf1c1f537a140bbc508e953ed2262f77134574c432d206ff36f4bdbf","1b103313097041aa9cd705a682c652f08613cb5cf8663321061c0902f845e81c","68ccec8662818911d8a12b8ed028bc5729fb4f1d34793c4701265ba60bc73cf4","5f85b8b79dc4d36af672c035b2beb71545de63a5d60bccbeee64c260941672ab","b3d48529ae61dc27d0bfbfa2cb3e0dff8189644bd155bdf5df1e8e14669f7043","40fe4b689225816b31fe5794c0fbf3534568819709e40295ead998a2bc1ab237","f65b5e33b9ad545a1eebbd6afe857314725ad42aaf069913e33f928ab3e4990a","fb6f2a87beb7fb1f4c2b762d0c76a9459fc91f557231569b0ee21399e22aa13d","31c858dc85996fac4b7fa944e1016d5c72f514930a72357ab5001097bf6511c7","3de30a871b3340be8b679c52aa12f90dd1c8c60874517be58968fdbcc4d79445","6fd985bd31eaf77542625306fb0404d32bff978990f0a06428e5f0b9a3b58109","34693fb4a5e771e11668219221344dd1bd7d8b77ed005a1c1d965fb559be8406","7394959e5a741b185456e1ef5d64599c36c60a323207450991e7a42e08911419",{"version":"e44ea2d6b7b853f6c81482416db43dafc11944561b810e469ae423085511ce7e","affectsGlobalScope":true},"f51b4042a3ac86f1f707500a9768f88d0b0c1fc3f3e45a73333283dea720cdc6",{"version":"a7289d79eb84a59d2475b4d0136b4404be3cfdd17c3ea46b9194add1d645df01","affectsGlobalScope":true},"0bb26fa2a90ee890eed57ee812c71fa84d3d07850163ec4a204de86412cc57c1","132ca47da601c60141dd6f10bd08c70d0620177e5638439df2464ec3945b6d98",{"version":"55d2bbae076fed7269c3e16faeb32f988f558427b7a1c3bf04aa7551ab86ae90","affectsGlobalScope":true},"a40826e8476694e90da94aa008283a7de50d1dafd37beada623863f1901cb7fb","cf83847c9264dcd592b6c89c1542925b899b277228687f3638614e3fa784cf76","3a41ebe7f089d50f447466b35b6cabb8b584c0994fc9809d0cd0a4ebc41e1239","7693b90b3075deaccafd5efb467bf9f2b747a3075be888652ef73e64396d8628","0c42d6cba77d9ad1cf45256ccb8489aa502fe2dbee1ec9048a29d49f5d532e73","2cf89c17245db65d175d4ef699cd68187516f9b3ae5c572fc0b9ad60f35dc223","5f20d20b7607174caf1a6da9141aeb9f2142159ae2410ca30c7a0fccd1d19c99",{"version":"a34d65f61ec5aac5b53502c8b0bd4e00d217bccb95bf94d449e2571baa11fb8c","affectsGlobalScope":true},"8d42e5af5fb0a96a77e135ce84cc60636c9bad39d9dba043a4efe9d1bdeb3cc3","56fcc451e9065eb121c9cc4c1b9994a816306f3b0b3b1fce7ad59f0ac97a9999","8a6f12b74d3e6c4f5e1b918cb8e64ae16bc6756cf0d48bcc28a28e1bf26ca0cd","c3759b5bc5cc40f5988d86a497741a80fa91258629ae50a2b3735e774cd377cc","bf268a0aea37ad4ae3b7a9b58559190b6fc01ea16a31e35cd05817a0a60f895a","45dd82fb5aea9b12b2a90b427b28f3a014e8b2ee9b74087a5ab882841cb5fbc5",{"version":"d7dad6db394a3d9f7b49755e4b610fbf8ed6eb0c9810ae5f1a119f6b5d76de45","affectsGlobalScope":true},"48b2f9302651eb31acd5be69bb4e6b35797a7fcd6b77391d10a4ccadf7dc3609","0c8c917ef15498c827bd494a0ef365e9f76deb211f8acbb86932e20489310788","dd67d2b5e4e8a182a38de8e69fb736945eaa4588e0909c14e01a14bd3cc1fd1e",{"version":"9cdc2c6144b03822c9842505d09945bcf813b86827fdb260dd7586b63abc19bf","affectsGlobalScope":true},{"version":"2923dee3c897f03e91b54a210cdbefea7290562f0ac4b948667d4c9ee844b79e","affectsGlobalScope":true},"79169698d09a2be54b14f3bcad2575b414bf3525063fde0a1e4fcd5d6efd380e","051d939bcf77caa3cef3282708ab3a6fdfb741a7366e1d74a9e7603b67417ec3","0be79b3ff0f16b6c2f9bc8c4cc7097ea417d8d67f8267f7e1eec8e32b548c2ff","1c61ffa3a71b77363b30d19832c269ef62fba787f5610cac7254728d3b69ab2e","a234d62ae81d012ebf23898a45672edf3e5c93ecf5a438a42b96c08dd68cde43","269929a24b2816343a178008ac9ae9248304d92a8ba8e233055e0ed6dbe6ef71","09ed02a725db002693236b6dfc49b2c6eb5557be1421d7fbe4f07cfe38211d92","09d801ff4a303d4976d4b9cb94af3a9097c4a70345e662d176975872d2998e51","c8558b01389b5f7610ac293aa612ccea2ae64d83af43b49f8142f190be1f414c","c40fdf7b2e18df49ce0568e37f0292c12807a0748be79e272745e7216bed2606",{"version":"b10b426c56e220b5093bf8a2446ee47af47263b7b1a03f4b18e42326b231b111","affectsGlobalScope":true},"4e228e78c1e9b0a75c70588d59288f63a6258e8b1fe4a67b0c53fe03461421d9","b4635ef36bee17e1304337d591c3b6b461ecdbc1876d0effbe6a581e62201fe5","205d50c24359ead003dc537b9b65d2a64208dfdffe368f403cf9e0357831db9e","1265fddcd0c68be9d2a3b29805d0280484c961264dd95e0b675f7bd91f777e78",{"version":"e4507242542bd499238f693d88b2d32e22177cc508854625f87bcc9bc3fa1256","affectsGlobalScope":true},{"version":"d942354e4966a98d3a92d1b1af0b4ac06f33af3f88116743e2c304c027ca26ef","affectsGlobalScope":true},"39f0808e5be3cb38674726c21fe2eb453c55e48a901679b4ce30fef85549b892","6afd66a7432ef100027ea110449e874196381e019e30eda7e7d8ca390366b7a8","befb8a9a78ac99d8fbc3ed392810489a7b90760c7a58934e8f1c8538f581cff3","e670bdf01540d35c170fae68edfd2f288eff909936780c379d6a9103b787b22c","867f95abf1df444aab146b19847391fc2f922a55f6a970a27ed8226766cee29f",{"version":"ab9b9a36e5284fd8d3bf2f7d5fcbc60052f25f27e4d20954782099282c60d23e","affectsGlobalScope":true},"88003d9ab15507806f41b120be6d407c1afe566c2f6689ebe3a034dd5ec0c8dc","175323e2a79a6076e0bada8a390d535a3ea817158bf1b1f46e31efca9028a0a2","7a10053aadc19335532a4d02756db4865974fd69bea5439ddcc5bfdf062d9476","4967529644e391115ca5592184d4b63980569adf60ee685f968fd59ab1557188","aed9e712a9b168345362e8f3a949f16c99ca1e05d21328f05735dfdbb24414ef","b04fe6922ed3db93afdbd49cdda8576aa75f744592fceea96fb0d5f32158c4f5","ed8d6c8de90fc2a4faaebc28e91f2469928738efd5208fb75ade0fa607e892b7","d7c52b198d680fe65b1a8d1b001f0173ffa2536ca2e7082431d726ce1f6714cd","c07f251e1c4e415a838e5498380b55cfea94f3513229de292d2aa85ae52fc3e9","0ed401424892d6bf294a5374efe512d6951b54a71e5dd0290c55b6d0d915f6f7","b945be6da6a3616ef3a250bfe223362b1c7c6872e775b0c4d82a1bf7a28ff902","beea49237dd7c7110fabf3c7509919c9cb9da841d847c53cac162dc3479e2f87","0f45f8a529c450d8f394106cc622bff79e44a1716e1ac9c3cc68b43f7ecf65ee","c624ce90b04c27ce4f318ba6330d39bde3d4e306f0f497ce78d4bda5ab8e22ca","9b8253aa5cb2c82d505f72afdbf96e83b15cc6b9a6f4fadbbbab46210d5f1977","86a8f52e4b1ac49155e889376bcfa8528a634c90c27fec65aa0e949f77b740c5","aab5dd41c1e2316cc0b42a7dd15684f8582d5a1d16c0516276a2a8a7d0fecd9c","59948226626ee210045296ba1fc6cb0fe748d1ff613204e08e7157ab6862dee7","ec3e54d8b713c170fdc8110a7e4a6a97513a7ab6b05ac9e1100cb064d2bb7349","43beb30ecb39a603fde4376554887310b0699f25f7f39c5c91e3147b51bb3a26","666b77d7f06f49da114b090a399abbfa66d5b6c01a3fd9dc4f063a52ace28507","31997714a93fbc570f52d47d6a8ebfb021a34a68ea9ba58bbb69cdec9565657e","6032e4262822160128e644de3fc4410bcd7517c2f137525fd2623d2bb23cb0d3","8bd5c9b1016629c144fd228983395b9dbf0676a576716bc3d316cab612c33cd5","2ed90bd3925b23aed8f859ffd0e885250be0424ca2b57e9866dabef152e1d6b7","93f6bd17d92dab9db7897e1430a5aeaa03bcf51623156213d8397710367a76ce","3f62b770a42e8c47c7008726f95aa383e69d97e85e680d237b99fcb0ee601dd8","5b84cfe78028c35c3bb89c042f18bf08d09da11e82d275c378ae4d07d8477e6c","980d21b0081cbf81774083b1e3a46f4bbdcd2b68858df0f66d7fad9c82bc34bc","6a9c5127096b35264eb7cd21b2417bfc1d42cceca9ba4ce2bb0c3410b7816042","93b7325b49dfbf613d940ed0e471216657b2d77459dac34f1b5b1678f08f884c","b17f3bb7d8333479c7e45e5f3d876761b9bca58f97594eca3f6a944fd825e632","3c1f1236cce6d6e0c4e2c1b4371e6f72d7c14842ecd76a98ed0748ee5730c8f3","6d7f58d5ea72d7834946fd7104a734dc7d40661be8b2e1eaced1ddce3268ebaf","4c26222991e6c97d5a8f541d4f2c67585eda9e8b33cf9f52931b098045236e88","277983d414aa99d78655186c3ee1e1c38c302e336aff1d77b47fcdc39d8273fe","47383b45796d525a4039cd22d2840ac55a1ff03a43d027f7f867ba7314a9cf53","6548773b3abbc18de29176c2141f766d4e437e40596ee480447abf83575445ad","6ddd27af0436ce59dd4c1896e2bfdb2bdb2529847d078b83ce67a144dff05491","816264799aef3fd5a09a3b6c25217d5ec26a9dfc7465eac7d6073bcdc7d88f3f","4df0891b133884cd9ed752d31c7d0ec0a09234e9ed5394abffd3c660761598db","b603b62d3dcd31ef757dc7339b4fa8acdbca318b0fb9ac485f9a1351955615f9","e642bd47b75ad6b53cbf0dfd7ddfa0f120bd10193f0c58ec37d87b59bf604aca","be90b24d2ee6f875ce3aaa482e7c41a54278856b03d04212681c4032df62baf9","78f5ff400b3cb37e7b90eef1ff311253ed31c8cb66505e9828fad099bffde021","372c47090e1131305d163469a895ff2938f33fa73aad988df31cd31743f9efb6","71c67dc6987bdbd5599353f90009ff825dd7db0450ef9a0aee5bb0c574d18512","6f12403b5eca6ae7ca8e3efe3eeb9c683b06ce3e3844ccfd04098d83cd7e4957","282c535df88175d64d9df4550d2fd1176fd940c1c6822f1e7584003237f179d3","c3a4752cf103e4c6034d5bd449c8f9d5e7b352d22a5f8f9a41a8efb11646f9c2","11a9e38611ac3c77c74240c58b6bd64a0032128b29354e999650f1de1e034b1c","4ed103ca6fff9cb244f7c4b86d1eb28ce8069c32db720784329946731badb5bb","d738f282842970e058672663311c6875482ee36607c88b98ffb6604fba99cb2a","ec859cd8226aa623e41bbb47c249a55ee16dc1b8647359585244d57d3a5ed0c7","8891c6e959d253a66434ff5dc9ae46058fb3493e84b4ca39f710ef2d350656b1","c4463cf02535444dcbc3e67ecd29f1972490f74e49957d6fd4282a1013796ba6","0cb0a957ff02de0b25fd0f3f37130ca7f22d1e0dea256569c714c1f73c6791f8","2f5075dc512d51786b1ba3b1696565641dfaae3ac854f5f13d61fa12ef81a47e","ca3353cc82b1981f0d25d71d7432d583a6ef882ccdea82d65fbe49af37be51cb","50679a8e27aacf72f8c40bcab15d7ef5e83494089b4726b83eec4554344d5cdc","45351e0d51780b6f4088277a4457b9879506ee2720a887de232df0f1efcb33d8","5d697a4b315cc5bb3042ae869abffd10c3b0d7b182cda0e4c45d8819937e5796","563fa27fdaec8f195b84f71a7af0ef48d30d5cc830575db86da86a63a470c8e6","6ee58aa536dabb19b09bc036f1abe83feb51e13d63b23d30b2d0631a2de99b8f","8aceb205dcc6f814ad99635baf1e40b6e01d06d3fe27b72fd766c6d0b8c0c600","299567f84bfedd1468dca2755a829cb19e607a6811673788807dc8921e211bc9","795d9fb85aad92221504db74dd179b506bd189bba0c104426f7e7bb8a66ffee5","1311bc194e0a69fe61031e852c1c0b439e2a2a3d1d5e2d8ff795499b9f283459","4b7ce19369d7e7fae76720c2c6c7f671bf3fa0f7093edb864f1ac358ca7c456c","c972ef44deca1fa8fab465915ffa00f82e126aacf3dfc8979c03b1b066ce5bb6","30285a1011c6d6b52f3ba3abb0a984be8148c05cdefb8eb6eb562335a3991f35","8e7adb22c0adecf7464861fc58ae3fc617b41ffbd70c97aa8493dc0966a82273","755f3cd1d9c1b564cff090e3b0e29200ae55690a91b87cb9e7a64c2dbeb314d3","d6bb7e0a6877b7856c183bff13d09dd9ae599ea43c6f6b33d3d5f72a830ed460","f1b51ae93c762d7c43f559933cd4842dd870367e8d92e90704ffa685dd5b29a3","3f450762fd7c34ed545e738abccb0af6a703572a10521643cf8fc88e3724c99c","fcc8beef29f39f09b1d9c9f99c42f9fed605ab1c28d2a630185f732b9ba53763","d6e6620a30d582182acc3f0a992a0c311adc589f111096aea11ab83fc09a5ccc","6213b8f686f56beab22b59a0f468590fd3a4c5fa931236a017efeca91d7c9584","c451cec9a588b1f105a5ea2c6063d4fca112b9d70105cacdadda0e1ef67e9379","cb047832dc68f5a2c41c62c5e95ddcacbae3a8b034d40cd15319a8cb7f25104a","980336ccdfc3c08f3c3b201aa6662e6016e20f15847f8465b68f3e8e67b4665c","5a3493939995f46ff3d9073cd534fb8961c3bf4e08c71db27066ff03d906dea8","bb5a2ac327605ebebf831c469b05bd34a33a6a46ee8c1edd9f3310aad32cf6a1","bf5d041f2440b4a9391e2b5eb3b8d94cbf1e3b8ff4703b6539d4e65e758c8f37","8516469eb90e723b0eb03df1be098f7e6a4709f6f48fd4532868d20a0a934f6e","d60e9ab369a72d234aac49adbe2900d8ef1408a6ea4db552cf2a48c9d8d6a1bc","0ebb4698803f01e2e7df6acce572fff068f4a20c47221721dafd70a27e372831","a12eaa942232703a8a8477a2f240ad5a2c26c595012ea8f128224e77984099c4","4070c2f1c3434fcf84886e04d30d82cd650ee443e53b82b404b144175cf8741e","2cea9689efa8591732096235abe7f084fc29c92badd5b0897a5e876b77e71887","4ed4e504126014fee13aaef5e3fc140f2ff7031ff3a8b5386717905820ea2d09","8129a34006218a6f3cdc81bbd438d5429eb18b08b4338a26977ac3b4df129d75","30d2170e1a718b5035611af55e3618b4ba8f42f0749bb52ee593da6082c4e2ce","98ef38666d88ec9699a722053e07ede65d3042f693fe7ff8c786e53dbb6fd43b","a3b8b6be7620897d1e481e8650c980a210a138fceb6e710eaf95fd9dd0dfe94a","12c89d0e32758c120a569045f21cf5b77244f86792611ced8de7f86b37e77781","9f9e5bae412fa5909fae636d6733aee27a108cc2ed5b13980611016336774d3c","662fe197bba64bd3f17ee118058cd2d0d2dbe33d7c0c865fd6365d90bfc44e1e","030519c351f800551cac2658038804969ca4584d2c0175a710602ac234ca1340","0278a6939ca83cd040b08ff8c5fc7838b6693ddc52f22526bf158e6b10e0246c","c2d6206e5ba4fd3063b01218c2b3b997afc1cfbeb49fcee991fa8595842ce53d","29c188a2c660f99f1b4835022e011c4268d7af989d4b7dda33c0a69ca1a777f8","1ed0bf138e87912d741e28333b58cbf814ae863783b3b404d2454cbabb9c5fc0","3452ee7d8ef0b1bbd47b2a56924a1dc3c79dc84a19d212e9dc496f92e4943aa0","99510e20e3d4816e283e59e8f0f31f603b2f026648240ffdb1ca9f24be678419","037d1fbeb96dc35600814be14d0fbf31acf35f1d7b443ea33514937de69c2bf2","64d1859b7dd9f419ba08e064c2b16b1a5edde0316d6c2bb1833c9381d4dffc3d","69b0f96ca137c0dba05f321a159141ad36f79cfba2fffcc29d131e280275e6f2","7bb64cf513a2b1cf7a94f81ca201f3d76a9b17af556f0cfc4e2707443e6caa66","a9add2a29da4cd0b617ae89f196b3f2172a031aeb086922cdf097236eef8b008","99afac3e6e683ee3111e499f9919953e9489cb39cad74363717aa3805e91db51","c49f92b83968f4ee0b6026396a9b6e2d6fee8b660d08a90efb03355ce3433a7a","4fdc6afe4d7ef6aeb32ac0818d47e99f98a31d0696abc4cb2af489c78ac1ba1d","d73d5a0e854037d43781b2d5d33f4b95ee509e0ddede677aade79fbee6a97cdc","35d14e1ae04be300828b1a1614316b9312a009cfd5e29fa56f94c2a9f60b12df","d160fe745f9c3b72d7b9036fdb2b6b500a520d43e36bb842c927b6fe59ea2c23","b9cb805fd5b34db55ff8f82ba40aec6c8807d0d56cb8ec8d1ae2f451ed609572","b226110435ec1391c36bfd75c1fc83077a87505db5b5b0abfa83757e58fd9041","f6dc5fa7af6825bbc912f7166022be85ba7f897ac2ffdef45250160dbb61a920",{"version":"108032756725f470736ea2571b52d012d20a0059679a2837b05618fd501e7a9b","signature":"5188ab7a04703366af6ada769156ffb6dc479269b0b56a5a35d19db1d9718c47"},{"version":"7afe0e1c34fe33f6751c92e130eee94c89246866c1d16997be6e4e3f760bab9c","signature":"0eb74a7ada6c58005c2a9dd97f3127a5fd3cdc8812a1783ae8a5da8dfded6f04"},{"version":"5281008641efdaabb8cbd75c3b79dbdd294efcdfbd5231e7c2cfac4d8d50a893","signature":"97e3d72e9fc0987e573a3bad834696b83eba308705bfe7fd14b15b2e0927ce3a"},{"version":"b02ff449d945de02365ce341058c1e5b0fcc8fcd4b4c2bb689f7762a068ea330","signature":"2e4093f1d001ba35c05b7ec71da1aa53c2bb53c5195aa96d28855271714121ee"},"a5aaeca001d2f69093d04aac4db321e4c338fd9b20cbc4f0b0af3dc6ae0f235b","cc957354aa3c94c9961ebf46282cfde1e81d107fc5785a61f62c67f1dd3ac2eb","8041cfce439ff29d339742389de04c136e3029d6b1817f07b2d7fcbfb7534990","93de1c6dab503f053efe8d304cb522bb3a89feab8c98f307a674a4fae04773e9","29a46d003ca3c721e6405f00dee7e3de91b14e09701eba5d887bf76fb2d47d38","069bebfee29864e3955378107e243508b163e77ab10de6a5ee03ae06939f0bb9","9990f9e566bc3c2c6e38df81294fb756e7f5b7b0e5bb17ab75384e190548b4b6",{"version":"64d4b35c5456adf258d2cf56c341e203a073253f229ef3208fc0d5020253b241","affectsGlobalScope":true},"ee7d8894904b465b072be0d2e4b45cf6b887cdba16a467645c4e200982ece7ea","f3d8c757e148ad968f0d98697987db363070abada5f503da3c06aefd9d4248c1","df95e00612c1faa5e0e7ef0dba589b18665bbeb3221db2b6cee1fe4d0e61921f","afe73051ff6a03a9565cbd8ebb0e956ee3df5e913ad5c1ded64218aabfa3dcb5","8b06ac3faeacb8484d84ddb44571d8f410697f98d7bfa86c0fda60373a9f5215","7eb06594824ada538b1d8b48c3925a83e7db792f47a081a62cf3e5c4e23cf0ee","f5638f7c2f12a9a1a57b5c41b3c1ea7db3876c003bab68e6a57afd6bcc169af0","0d14fa22c41fdc7277e6f71473b20ebc07f40f00e38875142335d5b63cdfc9d2","d8aab31ba8e618cc3eea10b0945de81cb93b7e8150a013a482332263b9305322","462bccdf75fcafc1ae8c30400c9425e1a4681db5d605d1a0edb4f990a54d8094","5923d8facbac6ecf7c84739a5c701a57af94a6f6648d6229a6c768cf28f0f8cb","7adecb2c3238794c378d336a8182d4c3dd2c4fa6fa1785e2797a3db550edea62","dc12dc0e5aa06f4e1a7692149b78f89116af823b9e1f1e4eae140cd3e0e674e6","1bfc6565b90c8771615cd8cfcf9b36efc0275e5e83ac7d9181307e96eb495161","8a8a96898906f065f296665e411f51010b51372fa260d5373bf9f64356703190","7f82ef88bdb67d9a850dd1c7cd2d690f33e0f0acd208e3c9eba086f3670d4f73",{"version":"ccfd8774cd9b929f63ff7dcf657977eb0652e3547f1fcac1b3a1dc5db22d4d58","affectsGlobalScope":true},"d92dc90fecd2552db74d8dc3c6fb4db9145b2aa0efe2c127236ba035969068d4","96d14f21b7652903852eef49379d04dbda28c16ed36468f8c9fa08f7c14c9538","675e702f2032766a91eeadee64f51014c64688525da99dccd8178f0c599f13a8","458111fc89d11d2151277c822dfdc1a28fa5b6b2493cf942e37d4cd0a6ee5f22","19c816167e076e7c24f074389c6cf3ed87bdbb917d1ea439ca281f9d26db2439","187119ff4f9553676a884e296089e131e8cc01691c546273b1d0089c3533ce42","febf0b2de54781102b00f61653b21377390a048fbf5262718c91860d11ff34a6","98f9d826db9cd99d27a01a59ee5f22863df00ccf1aaf43e1d7db80ebf716f7c3","0aaef8cded245bf5036a7a40b65622dd6c4da71f7a35343112edbe112b348a1e","00baffbe8a2f2e4875367479489b5d43b5fc1429ecb4a4cc98cfc3009095f52a","dcd91d3b697cb650b95db5471189b99815af5db2a1cd28760f91e0b12ede8ed5","3c92b6dfd43cc1c2485d9eba5ff0b74a19bb8725b692773ef1d66dac48cda4bd","3cf0d343c2276842a5b617f22ba82af6322c7cfe8bb52238ffc0c491a3c21019","df996e25faa505f85aeb294d15ebe61b399cf1d1e49959cdfaf2cc0815c203f9",{"version":"f2eff8704452659641164876c1ef0df4174659ce7311b0665798ea3f556fa9ad","affectsGlobalScope":true},"8841e2aa774b89bd23302dede20663306dc1b9902431ac64b24be8b8d0e3f649","2b8264b2fefd7367e0f20e2c04eed5d3038831fe00f5efbc110ff0131aab899b","a73a445c1e0a6d0f8b48e8eb22dc9d647896783a7f8991cbbc31c0d94bf1f5a2","d88a5e779faf033be3d52142a04fbe1cb96009868e3bbdd296b2bc6c59e06c0e","cd1d2f103b79002cd94b85a640a103f094227a2c4c53bc8af1fdbf4e13d9729e","5e379df3d61561c2ed7789b5995b9ba2143bbba21a905e2381e16efe7d1fa424","f07a137bbe2de7a122c37bfea00e761975fb264c49f18003d398d71b3fb35a5f","3dce33e7eb25594863b8e615f14a45ab98190d85953436750644212d8a18c066","2b93035328f7778d200252681c1d86285d501ed424825a18f81e4c3028aa51d9","2ac9c8332c5f8510b8bdd571f8271e0f39b0577714d5e95c1e79a12b2616f069","42c21aa963e7b86fa00801d96e88b36803188018d5ad91db2a9101bccd40b3ff","d31eb848cdebb4c55b4893b335a7c0cca95ad66dee13cbb7d0893810c0a9c301","b9f96255e1048ed2ea33ec553122716f0e57fc1c3ad778e9aa15f5b46547bd23","7a9e0a564fee396cacf706523b5aeed96e04c6b871a8bebefad78499fbffc5bc","906c751ef5822ec0dadcea2f0e9db64a33fb4ee926cc9f7efa38afe5d5371b2a","5387c049e9702f2d2d7ece1a74836a14b47fbebe9bbeb19f94c580a37c855351","c68391fb9efad5d99ff332c65b1606248c4e4a9f1dd9a087204242b56c7126d6","e9cf02252d3a0ced987d24845dcb1f11c1be5541f17e5daa44c6de2d18138d0c","e8b02b879754d85f48489294f99147aeccc352c760d95a6fe2b6e49cd400b2fe","9f6908ab3d8a86c68b86e38578afc7095114e66b2fc36a2a96e9252aac3998e0","0eedb2344442b143ddcd788f87096961cd8572b64f10b4afc3356aa0460171c6","71405cc70f183d029cc5018375f6c35117ffdaf11846c35ebf85ee3956b1b2a6","c68baff4d8ba346130e9753cefe2e487a16731bf17e05fdacc81e8c9a26aae9d","2cd15528d8bb5d0453aa339b4b52e0696e8b07e790c153831c642c3dea5ac8af","479d622e66283ffa9883fbc33e441f7fc928b2277ff30aacbec7b7761b4e9579","ade307876dc5ca267ca308d09e737b611505e015c535863f22420a11fffc1c54","f8cdefa3e0dee639eccbe9794b46f90291e5fd3989fcba60d2f08fde56179fb9","86c5a62f99aac7053976e317dbe9acb2eaf903aaf3d2e5bb1cafe5c2df7b37a8","2b300954ce01a8343866f737656e13243e86e5baef51bd0631b21dcef1f6e954","a2d409a9ffd872d6b9d78ead00baa116bbc73cfa959fce9a2f29d3227876b2a1","b288936f560cd71f4a6002953290de9ff8dfbfbf37f5a9391be5c83322324898","61178a781ef82e0ff54f9430397e71e8f365fc1e3725e0e5346f2de7b0d50dfa","6a6ccb37feb3aad32d9be026a3337db195979cd5727a616fc0f557e974101a54","c649ea79205c029a02272ef55b7ab14ada0903db26144d2205021f24727ac7a3","38e2b02897c6357bbcff729ef84c736727b45cc152abe95a7567caccdfad2a1d","d6610ea7e0b1a7686dba062a1e5544dd7d34140f4545305b7c6afaebfb348341","3dee35db743bdba2c8d19aece7ac049bde6fa587e195d86547c882784e6ba34c","b15e55c5fa977c2f25ca0b1db52cfa2d1fd4bf0baf90a8b90d4a7678ca462ff1","f41d30972724714763a2698ae949fbc463afb203b5fa7c4ad7e4de0871129a17","843dd7b6a7c6269fd43827303f5cbe65c1fecabc30b4670a50d5a15d57daeeb9","f06d8b8567ee9fd799bf7f806efe93b67683ef24f4dea5b23ef12edff4434d9d","6017384f697ff38bc3ef6a546df5b230c3c31329db84cbfe686c83bec011e2b2","e1a5b30d9248549ca0c0bb1d653bafae20c64c4aa5928cc4cd3017b55c2177b0","a593632d5878f17295bd53e1c77f27bf4c15212822f764a2bfc1702f4b413fa0","a868a534ba1c2ca9060b8a13b0ffbbbf78b4be7b0ff80d8c75b02773f7192c29","da7545aba8f54a50fde23e2ede00158dc8112560d934cee58098dfb03aae9b9d","34baf65cfee92f110d6653322e2120c2d368ee64b3c7981dff08ed105c4f19b0","a1a261624efb3a00ff346b13580f70f3463b8cdcc58b60f5793ff11785d52cab","f83b320cceccfc48457a818d18fc9a006ab18d0bdd727aa2c2e73dc1b4a45e98","9d92b037978bb9525bc4b673ebddd443277542e010c0aef019c03a170ccdaa73","b0d10e46cfe3f6c476b69af02eaa38e4ccc7430221ce3109ae84bb9fb8282298","fab58e600970e66547644a44bc9918e3223aa2cbd9e8763cec004b2cfb48827e","70e9a18da08294f75bf23e46c7d69e67634c0765d355887b9b41f0d959e1426e","ed44ba6b95f08b758748be7902e0cc54178b1337c56d0e2469c77b03f63ac73b"],"options":{"composite":true,"declaration":true,"declarationMap":true,"emitDeclarationOnly":true,"esModuleInterop":true,"inlineSources":true,"module":1,"outDir":"./types","rootDir":"../src","sourceMap":true,"strict":true,"target":7},"fileIdsList":[[120,251],[120],[91,120,127,128,129,144],[120,128,129,145,146],[120,127,128],[120,127,144,147,150],[120,127,147,150,151],[120,148,149,150,152,153],[120,127,150],[120,127,144,147,148,149,152],[120,127,135],[120,127],[91,120,127],[80,120,127],[120,131,132,133,134,135,136,137,138,139,140,141,142,143],[120,127,133,134],[120,127,133,135],[120,166,224],[120,224,225],[120,224,225,226,227],[120,166],[120,198],[120,198,199,200],[64,120],[67,120],[64,67,120],[65,66,67,68,69,70,71,72,73,74,75,120,155,158,159,160,161,162,163,164,165],[58,64,65,120],[67,73,75,120,154],[120,157],[67,68,120],[64,120,161],[120,193,194],[120,251,252,253,254,255],[120,251,253],[120,156],[120,258,259,260],[92,120,127],[120,263],[120,264],[120,275],[120,269,274],[120,278,280,281,282,283,284,285,286,287,288,289,290],[120,278,279,281,282,283,284,285,286,287,288,289,290],[120,279,280,281,282,283,284,285,286,287,288,289,290],[120,278,279,280,282,283,284,285,286,287,288,289,290],[120,278,279,280,281,283,284,285,286,287,288,289,290],[120,278,279,280,281,282,284,285,286,287,288,289,290],[120,278,279,280,281,282,283,285,286,287,288,289,290],[120,278,279,280,281,282,283,284,286,287,288,289,290],[120,278,279,280,281,282,283,284,285,287,288,289,290],[120,278,279,280,281,282,283,284,285,286,288,289,290],[120,278,279,280,281,282,283,284,285,286,287,289,290],[120,278,279,280,281,282,283,284,285,286,287,288,290],[120,278,279,280,281,282,283,284,285,286,287,288,289],[76,120],[79,120],[80,85,111,120],[81,91,92,99,108,119,120],[81,82,91,99,120],[83,120],[84,85,92,100,120],[85,108,116,120],[86,88,91,99,120],[87,120],[88,89,120],[90,91,120],[91,120],[91,92,93,108,119,120],[91,92,93,108,120],[91,94,99,108,119,120],[91,92,94,95,99,108,116,119,120],[94,96,108,116,119,120],[76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126],[91,97,120],[98,119,120,124],[88,91,99,108,120],[100,120],[101,120],[79,102,120],[103,118,120,124],[104,120],[105,120],[91,106,120],[106,107,120,122],[80,91,108,109,110,120],[80,108,110,120],[108,109,120],[111,120],[112,120],[91,114,115,120],[114,115,120],[85,99,116,120],[117,120],[99,118,120],[80,94,105,119,120],[85,120],[108,120,121],[120,122],[120,123],[80,85,91,93,102,108,119,120,122,124],[108,120,125],[120,127,296],[120,299,338],[120,299,323,338],[120,338],[120,299],[120,299,324,338],[120,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337],[120,324,338],[120,339],[120,343],[120,203],[120,215,216,217],[120,203,214,215],[120,178],[120,178,179,180,181,182],[120,167,168,169,170,171,172,173,174,175,176,177],[120,267,270],[120,267,270,271,272],[120,269],[120,266,273],[120,268],[57,59,60,61,62,63,120],[57,58,120],[59,120],[58,59,120],[57,59,120],[120,166,187,228],[120,229,230],[120,166,183,184,185],[120,184],[56,120,184,185,186],[120,185],[120,188],[120,188,189,192,196],[120,195],[120,166,190,191],[120,211,212,213],[120,210,211],[120,166,210,211],[120,166,203,210],[120,166,204],[120,204,205,206,207,208,209],[120,166,203],[120,219],[120,202,219,221,222],[120,166,187,190,197,201,202,219,220],[120,166,197,214,218],[120,166,235],[120,166,228,235],[120,233,234,235,236,237,238,242],[120,166,210,243],[120,166,187,197,233,234,236],[120,166,187,197,231,232,233,235,236],[120,234,235,238],[120,239,240,241,243],[120,235,238],[120,166,235,238],[120,166,187,234],[120,166,210,235,236],[120,247,248,249],[120,166,187,223,246,247],[120,166,210,228,247,248],[120,166,223],[120,244,245],[120,183,187,223,243],[120,166,210,223,244],[247,248,249],[187,223,246,247],[166,210,247,248],[166,223]],"referencedMap":[[253,1],[251,2],[145,3],[128,2],[147,4],[129,5],[146,2],[151,6],[152,7],[148,7],[154,8],[149,7],[153,9],[150,10],[136,11],[133,12],[140,13],[134,11],[131,14],[139,2],[144,15],[141,2],[142,2],[143,2],[138,12],[135,16],[132,2],[137,17],[190,2],[225,18],[227,2],[226,19],[228,20],[224,21],[203,13],[199,22],[200,22],[201,23],[198,2],[65,24],[66,24],[68,25],[69,24],[70,24],[71,26],[72,2],[73,2],[74,2],[67,24],[166,27],[75,28],[155,29],[158,30],[159,2],[160,2],[161,2],[162,2],[163,2],[164,31],[165,32],[193,2],[195,33],[194,2],[256,34],[252,1],[254,35],[255,1],[191,12],[157,36],[257,2],[258,2],[261,37],[259,2],[262,38],[263,2],[264,39],[265,40],[276,41],[275,42],[260,2],[277,2],[279,43],[280,44],[278,45],[281,46],[282,47],[283,48],[284,49],[285,50],[286,51],[287,52],[288,53],[289,54],[290,55],[291,2],[156,2],[76,56],[77,56],[79,57],[80,58],[81,59],[82,60],[83,61],[84,62],[85,63],[86,64],[87,65],[88,66],[89,66],[90,67],[91,68],[92,69],[93,70],[78,2],[126,2],[94,71],[95,72],[96,73],[127,74],[97,75],[98,76],[99,77],[100,78],[101,79],[102,80],[103,81],[104,82],[105,83],[106,84],[107,85],[108,86],[110,87],[109,88],[111,89],[112,90],[113,2],[114,91],[115,92],[116,93],[117,94],[118,95],[119,96],[120,97],[121,98],[122,99],[123,100],[124,101],[125,102],[292,2],[293,12],[294,2],[295,2],[297,103],[296,2],[298,12],[323,104],[324,105],[299,106],[302,106],[321,104],[322,104],[312,104],[311,107],[309,104],[304,104],[317,104],[315,104],[319,104],[303,104],[316,104],[320,104],[305,104],[306,104],[318,104],[300,104],[307,104],[308,104],[310,104],[314,104],[325,108],[313,104],[301,104],[338,109],[337,2],[332,108],[334,110],[333,108],[326,108],[327,108],[329,108],[331,108],[335,110],[336,110],[328,110],[330,110],[340,111],[339,2],[341,2],[342,2],[343,2],[344,112],[130,2],[266,2],[215,113],[218,114],[216,115],[217,115],[177,2],[174,116],[176,116],[175,116],[173,116],[183,117],[178,118],[182,2],[179,2],[181,2],[180,2],[169,116],[170,116],[171,116],[167,2],[168,2],[172,116],[267,2],[271,119],[273,120],[272,119],[270,121],[274,122],[269,123],[268,2],[57,2],[64,124],[59,125],[60,126],[61,126],[62,127],[63,127],[58,128],[8,2],[10,2],[9,2],[2,2],[11,2],[12,2],[13,2],[14,2],[15,2],[16,2],[17,2],[18,2],[3,2],[4,2],[22,2],[19,2],[20,2],[21,2],[23,2],[24,2],[25,2],[5,2],[26,2],[27,2],[28,2],[29,2],[6,2],[33,2],[30,2],[31,2],[32,2],[34,2],[7,2],[35,2],[40,2],[41,2],[36,2],[37,2],[38,2],[39,2],[1,2],[42,2],[229,129],[230,2],[231,130],[56,2],[186,131],[185,132],[187,133],[184,134],[189,135],[197,136],[196,137],[188,2],[192,138],[214,139],[212,140],[213,141],[211,142],[205,143],[206,143],[207,2],[208,143],[210,144],[204,145],[209,143],[202,2],[220,146],[222,146],[223,147],[221,148],[219,149],[236,150],[237,151],[243,152],[232,153],[235,154],[234,155],[239,156],[242,157],[240,158],[241,159],[233,160],[238,161],[250,162],[248,163],[249,164],[247,165],[246,166],[244,167],[245,168],[47,2],[48,2],[49,2],[50,2],[51,2],[52,2],[43,2],[53,2],[54,2],[55,2],[44,2],[45,2],[46,2]],"exportedModulesMap":[[253,1],[251,2],[145,3],[128,2],[147,4],[129,5],[146,2],[151,6],[152,7],[148,7],[154,8],[149,7],[153,9],[150,10],[136,11],[133,12],[140,13],[134,11],[131,14],[139,2],[144,15],[141,2],[142,2],[143,2],[138,12],[135,16],[132,2],[137,17],[190,2],[225,18],[227,2],[226,19],[228,20],[224,21],[203,13],[199,22],[200,22],[201,23],[198,2],[65,24],[66,24],[68,25],[69,24],[70,24],[71,26],[72,2],[73,2],[74,2],[67,24],[166,27],[75,28],[155,29],[158,30],[159,2],[160,2],[161,2],[162,2],[163,2],[164,31],[165,32],[193,2],[195,33],[194,2],[256,34],[252,1],[254,35],[255,1],[191,12],[157,36],[257,2],[258,2],[261,37],[259,2],[262,38],[263,2],[264,39],[265,40],[276,41],[275,42],[260,2],[277,2],[279,43],[280,44],[278,45],[281,46],[282,47],[283,48],[284,49],[285,50],[286,51],[287,52],[288,53],[289,54],[290,55],[291,2],[156,2],[76,56],[77,56],[79,57],[80,58],[81,59],[82,60],[83,61],[84,62],[85,63],[86,64],[87,65],[88,66],[89,66],[90,67],[91,68],[92,69],[93,70],[78,2],[126,2],[94,71],[95,72],[96,73],[127,74],[97,75],[98,76],[99,77],[100,78],[101,79],[102,80],[103,81],[104,82],[105,83],[106,84],[107,85],[108,86],[110,87],[109,88],[111,89],[112,90],[113,2],[114,91],[115,92],[116,93],[117,94],[118,95],[119,96],[120,97],[121,98],[122,99],[123,100],[124,101],[125,102],[292,2],[293,12],[294,2],[295,2],[297,103],[296,2],[298,12],[323,104],[324,105],[299,106],[302,106],[321,104],[322,104],[312,104],[311,107],[309,104],[304,104],[317,104],[315,104],[319,104],[303,104],[316,104],[320,104],[305,104],[306,104],[318,104],[300,104],[307,104],[308,104],[310,104],[314,104],[325,108],[313,104],[301,104],[338,109],[337,2],[332,108],[334,110],[333,108],[326,108],[327,108],[329,108],[331,108],[335,110],[336,110],[328,110],[330,110],[340,111],[339,2],[341,2],[342,2],[343,2],[344,112],[130,2],[266,2],[215,113],[218,114],[216,115],[217,115],[177,2],[174,116],[176,116],[175,116],[173,116],[183,117],[178,118],[182,2],[179,2],[181,2],[180,2],[169,116],[170,116],[171,116],[167,2],[168,2],[172,116],[267,2],[271,119],[273,120],[272,119],[270,121],[274,122],[269,123],[268,2],[57,2],[64,124],[59,125],[60,126],[61,126],[62,127],[63,127],[58,128],[8,2],[10,2],[9,2],[2,2],[11,2],[12,2],[13,2],[14,2],[15,2],[16,2],[17,2],[18,2],[3,2],[4,2],[22,2],[19,2],[20,2],[21,2],[23,2],[24,2],[25,2],[5,2],[26,2],[27,2],[28,2],[29,2],[6,2],[33,2],[30,2],[31,2],[32,2],[34,2],[7,2],[35,2],[40,2],[41,2],[36,2],[37,2],[38,2],[39,2],[1,2],[42,2],[229,129],[230,2],[231,130],[56,2],[186,131],[185,132],[187,133],[184,134],[189,135],[197,136],[196,137],[188,2],[192,138],[214,139],[212,140],[213,141],[211,142],[205,143],[206,143],[207,2],[208,143],[210,144],[204,145],[209,143],[202,2],[220,146],[222,146],[223,147],[221,148],[219,149],[236,150],[237,151],[243,152],[232,153],[235,154],[234,155],[239,156],[242,157],[240,158],[241,159],[233,160],[238,161],[250,169],[248,170],[249,171],[247,172],[246,166],[244,167],[245,168],[47,2],[48,2],[49,2],[50,2],[51,2],[52,2],[43,2],[53,2],[54,2],[55,2],[44,2],[45,2],[46,2]],"semanticDiagnosticsPerFile":[253,251,145,128,147,129,146,151,152,148,154,149,153,150,136,133,140,134,131,139,144,141,142,143,138,135,132,137,190,225,227,226,228,224,203,199,200,201,198,65,66,68,69,70,71,72,73,74,67,166,75,155,158,159,160,161,162,163,164,165,193,195,194,256,252,254,255,191,157,257,258,261,259,262,263,264,265,276,275,260,277,279,280,278,281,282,283,284,285,286,287,288,289,290,291,156,76,77,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,78,126,94,95,96,127,97,98,99,100,101,102,103,104,105,106,107,108,110,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,292,293,294,295,297,296,298,323,324,299,302,321,322,312,311,309,304,317,315,319,303,316,320,305,306,318,300,307,308,310,314,325,313,301,338,337,332,334,333,326,327,329,331,335,336,328,330,340,339,341,342,343,344,130,266,215,218,216,217,177,174,176,175,173,183,178,182,179,181,180,169,170,171,167,168,172,267,271,273,272,270,274,269,268,57,64,59,60,61,62,63,58,8,10,9,2,11,12,13,14,15,16,17,18,3,4,22,19,20,21,23,24,25,5,26,27,28,29,6,33,30,31,32,34,7,35,40,41,36,37,38,39,1,42,229,230,231,56,186,185,187,184,189,197,196,188,192,214,212,213,211,205,206,207,208,210,204,209,202,220,222,223,221,219,236,237,243,232,235,234,239,242,240,241,233,238,250,248,249,247,246,244,245,47,48,49,50,51,52,43,53,54,55,44,45,46],"latestChangedDtsFile":"./types/index.d.ts"},"version":"4.9.5"}
\ No newline at end of file
diff --git a/dist/types/QueuedRequestController.d.ts b/dist/types/QueuedRequestController.d.ts
index 0065a5af502bc9bfa64b520a15f3f8e6df447215..f0609616170c41b754f58f399498171462f86abf 100644
--- a/dist/types/QueuedRequestController.d.ts
+++ b/dist/types/QueuedRequestController.d.ts
@@ -32,7 +32,7 @@ export type AllowedEvents = SelectedNetworkControllerStateChangeEvent;
 export type QueuedRequestControllerMessenger = RestrictedControllerMessenger<typeof controllerName, QueuedRequestControllerActions | AllowedActions, QueuedRequestControllerEvents | AllowedEvents, AllowedActions['type'], AllowedEvents['type']>;
 export type QueuedRequestControllerOptions = {
     messenger: QueuedRequestControllerMessenger;
-    methodsRequiringNetworkSwitch: string[];
+    shouldRequestSwitchNetwork: (request: QueuedRequestMiddlewareJsonRpcRequest) => boolean;
     clearPendingConfirmations: () => void;
 };
 /**
@@ -56,10 +56,10 @@ export declare class QueuedRequestController extends BaseController<typeof contr
      *
      * @param options - Controller options.
      * @param options.messenger - The restricted controller messenger that facilitates communication with other controllers.
-     * @param options.methodsRequiringNetworkSwitch - A list of methods that require the globally selected network to match the dapp selected network.
+     * @param options.shouldRequestSwitchNetwork - A function that returns if a request requires the globally selected network to match the dapp selected network.
      * @param options.clearPendingConfirmations - A function that will clear all the pending confirmations.
      */
-    constructor({ messenger, methodsRequiringNetworkSwitch, clearPendingConfirmations, }: QueuedRequestControllerOptions);
+    constructor({ messenger, shouldRequestSwitchNetwork, clearPendingConfirmations, }: QueuedRequestControllerOptions);
     /**
      * Enqueue a request to be processed in a batch with other requests from the same origin.
      *
diff --git a/dist/types/QueuedRequestController.d.ts.map b/dist/types/QueuedRequestController.d.ts.map
index b00e6356cf53bf288d146eb8a1eab4a3f2858033..d6b4cc2d6b4a148fc5989adc072d7772779edfc9 100644
--- a/dist/types/QueuedRequestController.d.ts.map
+++ b/dist/types/QueuedRequestController.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"QueuedRequestController.d.ts","sourceRoot":"","sources":["../../src/QueuedRequestController.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EACV,wBAAwB,EACxB,0BAA0B,EAC1B,6BAA6B,EAC9B,MAAM,2BAA2B,CAAC;AACnC,OAAO,EAAE,cAAc,EAAE,MAAM,2BAA2B,CAAC;AAC3D,OAAO,KAAK,EACV,+BAA+B,EAC/B,uCAAuC,EACxC,MAAM,8BAA8B,CAAC;AACtC,OAAO,KAAK,EACV,0DAA0D,EAC1D,yCAAyC,EAC1C,MAAM,uCAAuC,CAAC;AAI/C,OAAO,KAAK,EAAE,qCAAqC,EAAE,MAAM,SAAS,CAAC;AAErE,eAAO,MAAM,cAAc,4BAA4B,CAAC;AAExD,MAAM,MAAM,4BAA4B,GAAG;IACzC,kBAAkB,EAAE,MAAM,CAAC;CAC5B,CAAC;AAEF,eAAO,MAAM,kCAAkC;;;CAG9C,CAAC;AAEF,MAAM,MAAM,qCAAqC,GAAG,wBAAwB,CAC1E,OAAO,cAAc,EACrB,4BAA4B,CAC7B,CAAC;AAEF,MAAM,MAAM,2CAA2C,GAAG;IACxD,IAAI,EAAE,OAAO,kCAAkC,CAAC,cAAc,CAAC;IAC/D,OAAO,EAAE,uBAAuB,CAAC,gBAAgB,CAAC,CAAC;CACpD,CAAC;AAEF,eAAO,MAAM,iCAAiC;;;CAG7C,CAAC;AAEF,MAAM,MAAM,uCAAuC,GACjD,0BAA0B,CACxB,OAAO,cAAc,EACrB,4BAA4B,CAC7B,CAAC;AAEJ,MAAM,MAAM,sCAAsC,GAAG;IACnD,IAAI,EAAE,OAAO,iCAAiC,CAAC,eAAe,CAAC;IAC/D,OAAO,EAAE,CAAC,MAAM,CAAC,CAAC;CACnB,CAAC;AAEF,MAAM,MAAM,6BAA6B,GACrC,uCAAuC,GACvC,sCAAsC,CAAC;AAE3C,MAAM,MAAM,8BAA8B,GACtC,qCAAqC,GACrC,2CAA2C,CAAC;AAEhD,MAAM,MAAM,cAAc,GACtB,+BAA+B,GAC/B,uCAAuC,GACvC,0DAA0D,CAAC;AAE/D,MAAM,MAAM,aAAa,GAAG,yCAAyC,CAAC;AAEtE,MAAM,MAAM,gCAAgC,GAAG,6BAA6B,CAC1E,OAAO,cAAc,EACrB,8BAA8B,GAAG,cAAc,EAC/C,6BAA6B,GAAG,aAAa,EAC7C,cAAc,CAAC,MAAM,CAAC,EACtB,aAAa,CAAC,MAAM,CAAC,CACtB,CAAC;AAEF,MAAM,MAAM,8BAA8B,GAAG;IAC3C,SAAS,EAAE,gCAAgC,CAAC;IAC5C,6BAA6B,EAAE,MAAM,EAAE,CAAC;IACxC,yBAAyB,EAAE,MAAM,IAAI,CAAC;CACvC,CAAC;AAgBF;;;;;;;;;;;;;GAaG;AACH,qBAAa,uBAAwB,SAAQ,cAAc,CACzD,OAAO,cAAc,EACrB,4BAA4B,EAC5B,gCAAgC,CACjC;;IAgCC;;;;;;;OAOG;gBACS,EACV,SAAS,EACT,6BAA6B,EAC7B,yBAAyB,GAC1B,EAAE,8BAA8B;IA0IjC;;;;;;;;;;;;;OAaG;IACG,cAAc,CAClB,OAAO,EAAE,qCAAqC,EAC9C,WAAW,EAAE,MAAM,OAAO,CAAC,IAAI,CAAC,GAC/B,OAAO,CAAC,IAAI,CAAC;CAwDjB"}
\ No newline at end of file
+{"version":3,"file":"QueuedRequestController.d.ts","sourceRoot":"","sources":["../../src/QueuedRequestController.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EACV,wBAAwB,EACxB,0BAA0B,EAC1B,6BAA6B,EAC9B,MAAM,2BAA2B,CAAC;AACnC,OAAO,EAAE,cAAc,EAAE,MAAM,2BAA2B,CAAC;AAC3D,OAAO,KAAK,EACV,+BAA+B,EAC/B,uCAAuC,EACxC,MAAM,8BAA8B,CAAC;AACtC,OAAO,KAAK,EACV,0DAA0D,EAC1D,yCAAyC,EAC1C,MAAM,uCAAuC,CAAC;AAI/C,OAAO,KAAK,EAAE,qCAAqC,EAAE,MAAM,SAAS,CAAC;AAErE,eAAO,MAAM,cAAc,4BAA4B,CAAC;AAExD,MAAM,MAAM,4BAA4B,GAAG;IACzC,kBAAkB,EAAE,MAAM,CAAC;CAC5B,CAAC;AAEF,eAAO,MAAM,kCAAkC;;;CAG9C,CAAC;AAEF,MAAM,MAAM,qCAAqC,GAAG,wBAAwB,CAC1E,OAAO,cAAc,EACrB,4BAA4B,CAC7B,CAAC;AAEF,MAAM,MAAM,2CAA2C,GAAG;IACxD,IAAI,EAAE,OAAO,kCAAkC,CAAC,cAAc,CAAC;IAC/D,OAAO,EAAE,uBAAuB,CAAC,gBAAgB,CAAC,CAAC;CACpD,CAAC;AAEF,eAAO,MAAM,iCAAiC;;;CAG7C,CAAC;AAEF,MAAM,MAAM,uCAAuC,GACjD,0BAA0B,CACxB,OAAO,cAAc,EACrB,4BAA4B,CAC7B,CAAC;AAEJ,MAAM,MAAM,sCAAsC,GAAG;IACnD,IAAI,EAAE,OAAO,iCAAiC,CAAC,eAAe,CAAC;IAC/D,OAAO,EAAE,CAAC,MAAM,CAAC,CAAC;CACnB,CAAC;AAEF,MAAM,MAAM,6BAA6B,GACrC,uCAAuC,GACvC,sCAAsC,CAAC;AAE3C,MAAM,MAAM,8BAA8B,GACtC,qCAAqC,GACrC,2CAA2C,CAAC;AAEhD,MAAM,MAAM,cAAc,GACtB,+BAA+B,GAC/B,uCAAuC,GACvC,0DAA0D,CAAC;AAE/D,MAAM,MAAM,aAAa,GAAG,yCAAyC,CAAC;AAEtE,MAAM,MAAM,gCAAgC,GAAG,6BAA6B,CAC1E,OAAO,cAAc,EACrB,8BAA8B,GAAG,cAAc,EAC/C,6BAA6B,GAAG,aAAa,EAC7C,cAAc,CAAC,MAAM,CAAC,EACtB,aAAa,CAAC,MAAM,CAAC,CACtB,CAAC;AAEF,MAAM,MAAM,8BAA8B,GAAG;IAC3C,SAAS,EAAE,gCAAgC,CAAC;IAC5C,0BAA0B,EAAE,CAC1B,OAAO,EAAE,qCAAqC,KAC3C,OAAO,CAAC;IACb,yBAAyB,EAAE,MAAM,IAAI,CAAC;CACvC,CAAC;AAgBF;;;;;;;;;;;;;GAaG;AACH,qBAAa,uBAAwB,SAAQ,cAAc,CACzD,OAAO,cAAc,EACrB,4BAA4B,EAC5B,gCAAgC,CACjC;;IAoCC;;;;;;;OAOG;gBACS,EACV,SAAS,EAGT,0BAA0B,EAC1B,yBAAyB,GAC1B,EAAE,8BAA8B;IA4IjC;;;;;;;;;;;;;OAaG;IACG,cAAc,CAClB,OAAO,EAAE,qCAAqC,EAC9C,WAAW,EAAE,MAAM,OAAO,CAAC,IAAI,CAAC,GAC/B,OAAO,CAAC,IAAI,CAAC;CA0DjB"}
\ No newline at end of file
diff --git a/dist/types/QueuedRequestMiddleware.d.ts b/dist/types/QueuedRequestMiddleware.d.ts
index 43c282e7179ded217be33b4193a9e886ebf337c7..b26c37cea37f403a060dfed1d0bb69a921934245 100644
--- a/dist/types/QueuedRequestMiddleware.d.ts
+++ b/dist/types/QueuedRequestMiddleware.d.ts
@@ -1,6 +1,7 @@
 import type { JsonRpcMiddleware } from '@metamask/json-rpc-engine';
 import type { Json, JsonRpcParams } from '@metamask/utils';
 import type { QueuedRequestController } from './QueuedRequestController';
+import type { QueuedRequestMiddlewareJsonRpcRequest } from './types';
 /**
  * Creates a JSON-RPC middleware for handling queued requests. This middleware
  * intercepts JSON-RPC requests, checks if they require queueing, and manages
@@ -9,12 +10,12 @@ import type { QueuedRequestController } from './QueuedRequestController';
  * @param options - Configuration options.
  * @param options.enqueueRequest - A method for enqueueing a request.
  * @param options.useRequestQueue - A function that determines if the request queue feature is enabled.
- * @param options.methodsWithConfirmation - A list of methods that can cause a confirmation to be presented to the user.
+ * @param options.shouldEnqueueRequest - A function that returns if a request should be handled by the QueuedRequestController.
  * @returns The JSON-RPC middleware that manages queued requests.
  */
-export declare const createQueuedRequestMiddleware: ({ enqueueRequest, useRequestQueue, methodsWithConfirmation, }: {
+export declare const createQueuedRequestMiddleware: ({ enqueueRequest, useRequestQueue, shouldEnqueueRequest, }: {
     enqueueRequest: QueuedRequestController['enqueueRequest'];
     useRequestQueue: () => boolean;
-    methodsWithConfirmation: string[];
+    shouldEnqueueRequest: (request: QueuedRequestMiddlewareJsonRpcRequest) => boolean;
 }) => JsonRpcMiddleware<JsonRpcParams, Json>;
 //# sourceMappingURL=QueuedRequestMiddleware.d.ts.map
\ No newline at end of file
diff --git a/dist/types/QueuedRequestMiddleware.d.ts.map b/dist/types/QueuedRequestMiddleware.d.ts.map
index 8b194ae9488f80d3377b3ae02c0caddecd21211d..414f606de21866fe48eb784281dd827cf51cffc1 100644
--- a/dist/types/QueuedRequestMiddleware.d.ts.map
+++ b/dist/types/QueuedRequestMiddleware.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"QueuedRequestMiddleware.d.ts","sourceRoot":"","sources":["../../src/QueuedRequestMiddleware.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,iBAAiB,EAAE,MAAM,2BAA2B,CAAC;AAGnE,OAAO,KAAK,EAAE,IAAI,EAAE,aAAa,EAAkB,MAAM,iBAAiB,CAAC;AAE3E,OAAO,KAAK,EAAE,uBAAuB,EAAE,MAAM,2BAA2B,CAAC;AA4BzE;;;;;;;;;;GAUG;AACH,eAAO,MAAM,6BAA6B;oBAKxB,uBAAuB,CAAC,gBAAgB,CAAC;qBACxC,MAAM,OAAO;6BACL,MAAM,EAAE;MAC/B,kBAAkB,aAAa,EAAE,IAAI,CAiBxC,CAAC"}
\ No newline at end of file
+{"version":3,"file":"QueuedRequestMiddleware.d.ts","sourceRoot":"","sources":["../../src/QueuedRequestMiddleware.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,iBAAiB,EAAE,MAAM,2BAA2B,CAAC;AAGnE,OAAO,KAAK,EAAE,IAAI,EAAE,aAAa,EAAkB,MAAM,iBAAiB,CAAC;AAE3E,OAAO,KAAK,EAAE,uBAAuB,EAAE,MAAM,2BAA2B,CAAC;AACzE,OAAO,KAAK,EAAE,qCAAqC,EAAE,MAAM,SAAS,CAAC;AA2BrE;;;;;;;;;;GAUG;AACH,eAAO,MAAM,6BAA6B;oBAOxB,uBAAuB,CAAC,gBAAgB,CAAC;qBACxC,MAAM,OAAO;oCAEnB,qCAAqC,KAC3C,OAAO;MACV,kBAAkB,aAAa,EAAE,IAAI,CAmBxC,CAAC"}
\ No newline at end of file
