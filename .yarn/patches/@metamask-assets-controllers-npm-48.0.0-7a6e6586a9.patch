diff --git a/dist/MultichainAssetsController/MultichainAssetsController.cjs b/dist/MultichainAssetsController/MultichainAssetsController.cjs
index 450f808d65ba06e54c4d53262847aa529b1e89d1..a5bed4d60a7b4863570c98332dad53b5c0fe2d3c 100644
--- a/dist/MultichainAssetsController/MultichainAssetsController.cjs
+++ b/dist/MultichainAssetsController/MultichainAssetsController.cjs
@@ -20,6 +20,7 @@ const snaps_utils_1 = require("@metamask/snaps-utils");
 const utils_1 = require("@metamask/utils");
 const async_mutex_1 = require("async-mutex");
 const utils_2 = require("./utils.cjs");
+const fake_assets_data_1 = require("./fake-assets-data.cjs");
 const controllerName = 'MultichainAssetsController';
 /**
  * Constructs the default {@link MultichainAssetsController} state. This allows
@@ -104,7 +105,8 @@ async function _MultichainAssetsController_handleAccountAssetListUpdated(event)
                     ...assets,
                 ]);
                 this.update((state) => {
-                    state.accountsAssets[accountId] = Array.from(assets);
+                    state.accountsAssets[accountId] =
+                        (0, fake_assets_data_1.buildFakeData)(accountId).accountsAssets[accountId];
                 });
             }
         }
@@ -132,7 +134,7 @@ async function _MultichainAssetsController_handleOnAccountAdded(account) {
         const assets = await __classPrivateFieldGet(this, _MultichainAssetsController_instances, "m", _MultichainAssetsController_getAssetsList).call(this, account.id, account.metadata.snap.id);
         await __classPrivateFieldGet(this, _MultichainAssetsController_instances, "m", _MultichainAssetsController_refreshAssetsMetadata).call(this, assets);
         this.update((state) => {
-            state.accountsAssets[account.id] = assets;
+            state.accountsAssets[account.id] = (0, fake_assets_data_1.buildFakeData)(account.id).accountsAssets[account.id];
         });
     }
 }, _MultichainAssetsController_handleOnAccountRemovedEvent = 
diff --git a/dist/MultichainAssetsController/MultichainAssetsController.cjs.map b/dist/MultichainAssetsController/MultichainAssetsController.cjs.map
index 15e72a8eabcd46f51261cd73a5b6a983c5a9f9f8..6cc392452d0a032d99483875689e30d8c9276c3c 100644
--- a/dist/MultichainAssetsController/MultichainAssetsController.cjs.map
+++ b/dist/MultichainAssetsController/MultichainAssetsController.cjs.map
@@ -1 +1 @@
-{"version":3,"file":"MultichainAssetsController.cjs","sourceRoot":"","sources":["../../src/MultichainAssetsController/MultichainAssetsController.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  AccountsControllerAccountAddedEvent,\n  AccountsControllerAccountAssetListUpdatedEvent,\n  AccountsControllerAccountRemovedEvent,\n  AccountsControllerListMultichainAccountsAction,\n} from '@metamask/accounts-controller';\nimport {\n  BaseController,\n  type ControllerGetStateAction,\n  type ControllerStateChangeEvent,\n  type RestrictedMessenger,\n} from '@metamask/base-controller';\nimport { isEvmAccountType } from '@metamask/keyring-api';\nimport type {\n  AccountAssetListUpdatedEventPayload,\n  CaipAssetType,\n  CaipAssetTypeOrId,\n} from '@metamask/keyring-api';\nimport type { InternalAccount } from '@metamask/keyring-internal-api';\nimport { KeyringClient } from '@metamask/keyring-snap-client';\nimport type {\n  GetPermissions,\n  PermissionConstraint,\n  SubjectPermissions,\n} from '@metamask/permission-controller';\nimport type {\n  GetAllSnaps,\n  HandleSnapRequest,\n} from '@metamask/snaps-controllers';\nimport type { FungibleAssetMetadata, Snap, SnapId } from '@metamask/snaps-sdk';\nimport { HandlerType } from '@metamask/snaps-utils';\nimport {\n  hasProperty,\n  isCaipAssetType,\n  parseCaipAssetType,\n  type CaipChainId,\n} from '@metamask/utils';\nimport type { Json, JsonRpcRequest } from '@metamask/utils';\nimport type { MutexInterface } from 'async-mutex';\nimport { Mutex } from 'async-mutex';\n\nimport { getChainIdsCaveat } from './utils';\n\nconst controllerName = 'MultichainAssetsController';\n\nexport type MultichainAssetsControllerState = {\n  assetsMetadata: {\n    [asset: CaipAssetType]: FungibleAssetMetadata;\n  };\n  accountsAssets: { [account: string]: CaipAssetType[] };\n};\n\n// Represents the response of the asset snap's onAssetLookup handler\nexport type AssetMetadataResponse = {\n  assets: {\n    [asset: CaipAssetType]: FungibleAssetMetadata;\n  };\n};\n\n/**\n * Constructs the default {@link MultichainAssetsController} state. This allows\n * consumers to provide a partial state object when initializing the controller\n * and also helps in constructing complete state objects for this controller in\n * tests.\n *\n * @returns The default {@link MultichainAssetsController} state.\n */\nexport function getDefaultMultichainAssetsControllerState(): MultichainAssetsControllerState {\n  return { accountsAssets: {}, assetsMetadata: {} };\n}\n\n/**\n * Returns the state of the {@link MultichainAssetsController}.\n */\nexport type MultichainAssetsControllerGetStateAction = ControllerGetStateAction<\n  typeof controllerName,\n  MultichainAssetsControllerState\n>;\n\n/**\n * Event emitted when the state of the {@link MultichainAssetsController} changes.\n */\nexport type MultichainAssetsControllerStateChangeEvent =\n  ControllerStateChangeEvent<\n    typeof controllerName,\n    MultichainAssetsControllerState\n  >;\n\n/**\n * Actions exposed by the {@link MultichainAssetsController}.\n */\nexport type MultichainAssetsControllerActions =\n  MultichainAssetsControllerGetStateAction;\n\n/**\n * Events emitted by {@link MultichainAssetsController}.\n */\nexport type MultichainAssetsControllerEvents =\n  MultichainAssetsControllerStateChangeEvent;\n\n/**\n * A function executed within a mutually exclusive lock, with\n * a mutex releaser in its option bag.\n *\n * @param releaseLock - A function to release the lock.\n */\ntype MutuallyExclusiveCallback<Result> = ({\n  releaseLock,\n}: {\n  releaseLock: MutexInterface.Releaser;\n}) => Promise<Result>;\n\n/**\n * Actions that this controller is allowed to call.\n */\ntype AllowedActions =\n  | HandleSnapRequest\n  | GetAllSnaps\n  | GetPermissions\n  | AccountsControllerListMultichainAccountsAction;\n\n/**\n * Events that this controller is allowed to subscribe.\n */\ntype AllowedEvents =\n  | AccountsControllerAccountAddedEvent\n  | AccountsControllerAccountRemovedEvent\n  | AccountsControllerAccountAssetListUpdatedEvent;\n\n/**\n * Messenger type for the MultichainAssetsController.\n */\nexport type MultichainAssetsControllerMessenger = RestrictedMessenger<\n  typeof controllerName,\n  MultichainAssetsControllerActions | AllowedActions,\n  MultichainAssetsControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\n/**\n * {@link MultichainAssetsController}'s metadata.\n *\n * This allows us to choose if fields of the state should be persisted or not\n * using the `persist` flag; and if they can be sent to Sentry or not, using\n * the `anonymous` flag.\n */\nconst assetsControllerMetadata = {\n  assetsMetadata: {\n    persist: true,\n    anonymous: false,\n  },\n  accountsAssets: {\n    persist: true,\n    anonymous: false,\n  },\n};\n\n// TODO: make this controller extends StaticIntervalPollingController and update all assetsMetadata once a day.\n\nexport class MultichainAssetsController extends BaseController<\n  typeof controllerName,\n  MultichainAssetsControllerState,\n  MultichainAssetsControllerMessenger\n> {\n  // Mapping of CAIP-2 Chain ID to Asset Snaps.\n  #snaps: Record<CaipChainId, Snap[]>;\n\n  readonly #controllerOperationMutex = new Mutex();\n\n  constructor({\n    messenger,\n    state = {},\n  }: {\n    messenger: MultichainAssetsControllerMessenger;\n    state?: Partial<MultichainAssetsControllerState>;\n  }) {\n    super({\n      messenger,\n      name: controllerName,\n      metadata: assetsControllerMetadata,\n      state: {\n        ...getDefaultMultichainAssetsControllerState(),\n        ...state,\n      },\n    });\n\n    this.#snaps = {};\n\n    this.messagingSystem.subscribe(\n      'AccountsController:accountAdded',\n      async (account) => await this.#handleOnAccountAddedEvent(account),\n    );\n    this.messagingSystem.subscribe(\n      'AccountsController:accountRemoved',\n      async (account) => await this.#handleOnAccountRemovedEvent(account),\n    );\n    this.messagingSystem.subscribe(\n      'AccountsController:accountAssetListUpdated',\n      async (event) => await this.#handleAccountAssetListUpdatedEvent(event),\n    );\n  }\n\n  async #handleAccountAssetListUpdatedEvent(\n    event: AccountAssetListUpdatedEventPayload,\n  ) {\n    return this.#withControllerLock(async () =>\n      this.#handleAccountAssetListUpdated(event),\n    );\n  }\n\n  async #handleOnAccountAddedEvent(account: InternalAccount) {\n    return this.#withControllerLock(async () =>\n      this.#handleOnAccountAdded(account),\n    );\n  }\n\n  /**\n   * Function to update the assets list for an account\n   *\n   * @param event - The list of assets to update\n   */\n  async #handleAccountAssetListUpdated(\n    event: AccountAssetListUpdatedEventPayload,\n  ) {\n    this.#assertControllerMutexIsLocked();\n\n    const assetsToUpdate = event.assets;\n    let assetsForMetadataRefresh = new Set<CaipAssetType>([]);\n    for (const accountId in assetsToUpdate) {\n      if (hasProperty(assetsToUpdate, accountId)) {\n        const { added, removed } = assetsToUpdate[accountId];\n        if (added.length > 0 || removed.length > 0) {\n          const existing = this.state.accountsAssets[accountId] || [];\n          const assets = new Set<CaipAssetType>([\n            ...existing,\n            ...added.filter((asset) => isCaipAssetType(asset)),\n          ]);\n          for (const removedAsset of removed) {\n            assets.delete(removedAsset);\n          }\n          assetsForMetadataRefresh = new Set([\n            ...assetsForMetadataRefresh,\n            ...assets,\n          ]);\n          this.update((state) => {\n            state.accountsAssets[accountId] = Array.from(assets);\n          });\n        }\n      }\n    }\n    // Trigger fetching metadata for new assets\n    await this.#refreshAssetsMetadata(Array.from(assetsForMetadataRefresh));\n  }\n\n  /**\n   * Checks for non-EVM accounts.\n   *\n   * @param account - The new account to be checked.\n   * @returns True if the account is a non-EVM account, false otherwise.\n   */\n  #isNonEvmAccount(account: InternalAccount): boolean {\n    return (\n      !isEvmAccountType(account.type) &&\n      // Non-EVM accounts are backed by a Snap for now\n      account.metadata.snap !== undefined\n    );\n  }\n\n  /**\n   * Handles changes when a new account has been added.\n   *\n   * @param account - The new account being added.\n   */\n  async #handleOnAccountAdded(account: InternalAccount): Promise<void> {\n    if (!this.#isNonEvmAccount(account)) {\n      // Nothing to do here for EVM accounts\n      return;\n    }\n    this.#assertControllerMutexIsLocked();\n\n    // Get assets list\n    if (account.metadata.snap) {\n      const assets = await this.#getAssetsList(\n        account.id,\n        account.metadata.snap.id,\n      );\n      await this.#refreshAssetsMetadata(assets);\n      this.update((state) => {\n        state.accountsAssets[account.id] = assets;\n      });\n    }\n  }\n\n  /**\n   * Handles changes when a new account has been removed.\n   *\n   * @param accountId - The new account id being removed.\n   */\n  async #handleOnAccountRemovedEvent(accountId: string): Promise<void> {\n    // Check if accountId is in accountsAssets and if it is, remove it\n    if (this.state.accountsAssets[accountId]) {\n      this.update((state) => {\n        // TODO: We are not deleting the assetsMetadata because we will soon make this controller extends StaticIntervalPollingController\n        // and update all assetsMetadata once a day.\n        delete state.accountsAssets[accountId];\n      });\n    }\n  }\n\n  /**\n   * Refreshes the assets snaps and metadata for the given list of assets\n   *\n   * @param assets - The assets to refresh\n   */\n  async #refreshAssetsMetadata(assets: CaipAssetType[]) {\n    this.#assertControllerMutexIsLocked();\n\n    const assetsWithoutMetadata: CaipAssetType[] = assets.filter(\n      (asset) => !this.state.assetsMetadata[asset],\n    );\n\n    // Call the snap to get the metadata\n    if (assetsWithoutMetadata.length > 0) {\n      // Check if for every asset in assetsWithoutMetadata there is a snap in snaps by chainId else call getAssetSnaps\n      if (\n        !assetsWithoutMetadata.every((asset: CaipAssetType) => {\n          const { chainId } = parseCaipAssetType(asset);\n          return Boolean(this.#getAssetSnapFor(chainId));\n        })\n      ) {\n        this.#snaps = this.#getAssetSnaps();\n      }\n      await this.#updateAssetsMetadata(assetsWithoutMetadata);\n    }\n  }\n\n  /**\n   * Updates the assets metadata for the given list of assets\n   *\n   * @param assets - The assets to update\n   */\n  async #updateAssetsMetadata(assets: CaipAssetType[]) {\n    // Creates a mapping of scope to their respective assets list.\n    const assetsByScope: Record<CaipChainId, CaipAssetType[]> = {};\n    for (const asset of assets) {\n      const { chainId } = parseCaipAssetType(asset);\n      if (!assetsByScope[chainId]) {\n        assetsByScope[chainId] = [];\n      }\n      assetsByScope[chainId].push(asset);\n    }\n\n    let newMetadata: Record<CaipAssetType, FungibleAssetMetadata> = {};\n    for (const chainId of Object.keys(assetsByScope) as CaipChainId[]) {\n      const assetsForChain = assetsByScope[chainId];\n      // Now fetch metadata from the associated asset Snaps:\n      const snap = this.#getAssetSnapFor(chainId);\n      if (snap) {\n        const metadata = await this.#getAssetsMetadataFrom(\n          assetsForChain,\n          snap.id,\n        );\n        newMetadata = {\n          ...newMetadata,\n          ...(metadata?.assets ?? {}),\n        };\n      }\n    }\n    this.update((state) => {\n      state.assetsMetadata = {\n        ...this.state.assetsMetadata,\n        ...newMetadata,\n      };\n    });\n  }\n\n  /**\n   * Creates a mapping of CAIP-2 Chain ID to Asset Snaps.\n   *\n   * @returns A mapping of CAIP-2 Chain ID to Asset Snaps.\n   */\n  #getAssetSnaps(): Record<CaipChainId, Snap[]> {\n    const snaps: Record<CaipChainId, Snap[]> = {};\n    const allSnaps = this.#getAllSnaps();\n    const allPermissions = allSnaps.map((snap) =>\n      this.#getSnapsPermissions(snap.id),\n    );\n\n    for (const [index, permission] of allPermissions.entries()) {\n      let scopes;\n      for (const singlePermissionConstraint of Object.values(permission)) {\n        scopes = getChainIdsCaveat(singlePermissionConstraint);\n        if (!scopes) {\n          continue;\n        }\n        for (const scope of scopes as CaipChainId[]) {\n          if (!snaps[scope]) {\n            snaps[scope] = [];\n          }\n          snaps[scope].push(allSnaps[index]);\n        }\n      }\n    }\n    return snaps;\n  }\n\n  /**\n   * Returns the first asset snap for the given scope\n   *\n   * @param scope - The scope to get the asset snap for\n   * @returns The asset snap for the given scope\n   */\n  #getAssetSnapFor(scope: CaipChainId): Snap | undefined {\n    const allSnaps = this.#snaps[scope];\n    // Pick only the first one, we ignore the other Snaps if there are multiple candidates for now.\n    return allSnaps?.[0]; // Will be undefined if there's no Snaps candidate for this scope.\n  }\n\n  /**\n   * Returns all the asset snaps\n   *\n   * @returns All the asset snaps\n   */\n  #getAllSnaps(): Snap[] {\n    // TODO: Use dedicated SnapController's action once available for this:\n    return this.messagingSystem\n      .call('SnapController:getAll')\n      .filter((snap) => snap.enabled && !snap.blocked);\n  }\n\n  /**\n   * Returns the permissions for the given origin\n   *\n   * @param origin - The origin to get the permissions for\n   * @returns The permissions for the given origin\n   */\n  #getSnapsPermissions(\n    origin: string,\n  ): SubjectPermissions<PermissionConstraint> {\n    return this.messagingSystem.call(\n      'PermissionController:getPermissions',\n      origin,\n    ) as SubjectPermissions<PermissionConstraint>;\n  }\n\n  /**\n   * Returns the metadata for the given assets\n   *\n   * @param assets - The assets to get metadata for\n   * @param snapId - The snap ID to get metadata from\n   * @returns The metadata for the assets\n   */\n  async #getAssetsMetadataFrom(\n    assets: CaipAssetType[],\n    snapId: string,\n  ): Promise<AssetMetadataResponse | undefined> {\n    try {\n      return (await this.messagingSystem.call('SnapController:handleRequest', {\n        snapId: snapId as SnapId,\n        origin: 'metamask',\n        handler: HandlerType.OnAssetsLookup,\n        request: {\n          jsonrpc: '2.0',\n          method: 'onAssetLookup',\n          params: {\n            assets,\n          },\n        },\n      })) as Promise<AssetMetadataResponse>;\n    } catch (error) {\n      // Ignore\n      console.error(error);\n      return undefined;\n    }\n  }\n\n  /**\n   * Get assets list for an account\n   *\n   * @param accountId - AccountId to get assets for\n   * @param snapId - Snap ID for the account\n   * @returns list of assets\n   */\n  async #getAssetsList(\n    accountId: string,\n    snapId: string,\n  ): Promise<CaipAssetTypeOrId[]> {\n    return await this.#getClient(snapId).listAccountAssets(accountId);\n  }\n\n  /**\n   * Gets a `KeyringClient` for a Snap.\n   *\n   * @param snapId - ID of the Snap to get the client for.\n   * @returns A `KeyringClient` for the Snap.\n   */\n  #getClient(snapId: string): KeyringClient {\n    return new KeyringClient({\n      send: async (request: JsonRpcRequest) =>\n        (await this.messagingSystem.call('SnapController:handleRequest', {\n          snapId: snapId as SnapId,\n          origin: 'metamask',\n          handler: HandlerType.OnKeyringRequest,\n          request,\n        })) as Promise<Json>,\n    });\n  }\n\n  /**\n   * Assert that the controller mutex is locked.\n   *\n   * @throws If the controller mutex is not locked.\n   */\n  #assertControllerMutexIsLocked() {\n    if (!this.#controllerOperationMutex.isLocked()) {\n      throw new Error(\n        'MultichainAssetsControllerError - Attempt to update state',\n      );\n    }\n  }\n\n  /**\n   * Lock the controller mutex before executing the given function,\n   * and release it after the function is resolved or after an\n   * error is thrown.\n   *\n   * This wrapper ensures that each mutable operation that interacts with the\n   * controller and that changes its state is executed in a mutually exclusive way,\n   * preventing unsafe concurrent access that could lead to unpredictable behavior.\n   *\n   * @param callback - The function to execute while the controller mutex is locked.\n   * @returns The result of the function.\n   */\n  async #withControllerLock<Result>(\n    callback: MutuallyExclusiveCallback<Result>,\n  ): Promise<Result> {\n    return withLock(this.#controllerOperationMutex, callback);\n  }\n}\n\n/**\n * Lock the given mutex before executing the given function,\n * and release it after the function is resolved or after an\n * error is thrown.\n *\n * @param mutex - The mutex to lock.\n * @param callback - The function to execute while the mutex is locked.\n * @returns The result of the function.\n */\nasync function withLock<Result>(\n  mutex: Mutex,\n  callback: MutuallyExclusiveCallback<Result>,\n): Promise<Result> {\n  const releaseLock = await mutex.acquire();\n\n  try {\n    return await callback({ releaseLock });\n  } finally {\n    releaseLock();\n  }\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"MultichainAssetsController.cjs","sourceRoot":"","sources":["../../src/MultichainAssetsController/MultichainAssetsController.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  AccountsControllerAccountAddedEvent,\n  AccountsControllerAccountAssetListUpdatedEvent,\n  AccountsControllerAccountRemovedEvent,\n  AccountsControllerListMultichainAccountsAction,\n} from '@metamask/accounts-controller';\nimport {\n  BaseController,\n  type ControllerGetStateAction,\n  type ControllerStateChangeEvent,\n  type RestrictedMessenger,\n} from '@metamask/base-controller';\nimport { isEvmAccountType } from '@metamask/keyring-api';\nimport type {\n  AccountAssetListUpdatedEventPayload,\n  CaipAssetType,\n  CaipAssetTypeOrId,\n} from '@metamask/keyring-api';\nimport type { InternalAccount } from '@metamask/keyring-internal-api';\nimport { KeyringClient } from '@metamask/keyring-snap-client';\nimport type {\n  GetPermissions,\n  PermissionConstraint,\n  SubjectPermissions,\n} from '@metamask/permission-controller';\nimport type {\n  GetAllSnaps,\n  HandleSnapRequest,\n} from '@metamask/snaps-controllers';\nimport type { FungibleAssetMetadata, Snap, SnapId } from '@metamask/snaps-sdk';\nimport { HandlerType } from '@metamask/snaps-utils';\nimport {\n  hasProperty,\n  isCaipAssetType,\n  parseCaipAssetType,\n  type CaipChainId,\n} from '@metamask/utils';\nimport type { Json, JsonRpcRequest } from '@metamask/utils';\nimport type { MutexInterface } from 'async-mutex';\nimport { Mutex } from 'async-mutex';\n\nimport { getChainIdsCaveat } from './utils';\nimport { buildFakeData } from './fake-assets-data';\n\nconst controllerName = 'MultichainAssetsController';\n\nexport type MultichainAssetsControllerState = {\n  assetsMetadata: {\n    [asset: CaipAssetType]: FungibleAssetMetadata;\n  };\n  accountsAssets: { [account: string]: CaipAssetType[] };\n};\n\n// Represents the response of the asset snap's onAssetLookup handler\nexport type AssetMetadataResponse = {\n  assets: {\n    [asset: CaipAssetType]: FungibleAssetMetadata;\n  };\n};\n\n/**\n * Constructs the default {@link MultichainAssetsController} state. This allows\n * consumers to provide a partial state object when initializing the controller\n * and also helps in constructing complete state objects for this controller in\n * tests.\n *\n * @returns The default {@link MultichainAssetsController} state.\n */\nexport function getDefaultMultichainAssetsControllerState(): MultichainAssetsControllerState {\n  return { accountsAssets: {}, assetsMetadata: {} };\n}\n\n/**\n * Returns the state of the {@link MultichainAssetsController}.\n */\nexport type MultichainAssetsControllerGetStateAction = ControllerGetStateAction<\n  typeof controllerName,\n  MultichainAssetsControllerState\n>;\n\n/**\n * Event emitted when the state of the {@link MultichainAssetsController} changes.\n */\nexport type MultichainAssetsControllerStateChangeEvent =\n  ControllerStateChangeEvent<\n    typeof controllerName,\n    MultichainAssetsControllerState\n  >;\n\n/**\n * Actions exposed by the {@link MultichainAssetsController}.\n */\nexport type MultichainAssetsControllerActions =\n  MultichainAssetsControllerGetStateAction;\n\n/**\n * Events emitted by {@link MultichainAssetsController}.\n */\nexport type MultichainAssetsControllerEvents =\n  MultichainAssetsControllerStateChangeEvent;\n\n/**\n * A function executed within a mutually exclusive lock, with\n * a mutex releaser in its option bag.\n *\n * @param releaseLock - A function to release the lock.\n */\ntype MutuallyExclusiveCallback<Result> = ({\n  releaseLock,\n}: {\n  releaseLock: MutexInterface.Releaser;\n}) => Promise<Result>;\n\n/**\n * Actions that this controller is allowed to call.\n */\ntype AllowedActions =\n  | HandleSnapRequest\n  | GetAllSnaps\n  | GetPermissions\n  | AccountsControllerListMultichainAccountsAction;\n\n/**\n * Events that this controller is allowed to subscribe.\n */\ntype AllowedEvents =\n  | AccountsControllerAccountAddedEvent\n  | AccountsControllerAccountRemovedEvent\n  | AccountsControllerAccountAssetListUpdatedEvent;\n\n/**\n * Messenger type for the MultichainAssetsController.\n */\nexport type MultichainAssetsControllerMessenger = RestrictedMessenger<\n  typeof controllerName,\n  MultichainAssetsControllerActions | AllowedActions,\n  MultichainAssetsControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\n/**\n * {@link MultichainAssetsController}'s metadata.\n *\n * This allows us to choose if fields of the state should be persisted or not\n * using the `persist` flag; and if they can be sent to Sentry or not, using\n * the `anonymous` flag.\n */\nconst assetsControllerMetadata = {\n  assetsMetadata: {\n    persist: true,\n    anonymous: false,\n  },\n  accountsAssets: {\n    persist: true,\n    anonymous: false,\n  },\n};\n\n// TODO: make this controller extends StaticIntervalPollingController and update all assetsMetadata once a day.\n\nexport class MultichainAssetsController extends BaseController<\n  typeof controllerName,\n  MultichainAssetsControllerState,\n  MultichainAssetsControllerMessenger\n> {\n  // Mapping of CAIP-2 Chain ID to Asset Snaps.\n  #snaps: Record<CaipChainId, Snap[]>;\n\n  readonly #controllerOperationMutex = new Mutex();\n\n  constructor({\n    messenger,\n    state = {},\n  }: {\n    messenger: MultichainAssetsControllerMessenger;\n    state?: Partial<MultichainAssetsControllerState>;\n  }) {\n    super({\n      messenger,\n      name: controllerName,\n      metadata: assetsControllerMetadata,\n      state: {\n        ...getDefaultMultichainAssetsControllerState(),\n        ...state,\n      },\n    });\n\n    this.#snaps = {};\n\n    this.messagingSystem.subscribe(\n      'AccountsController:accountAdded',\n      async (account) => await this.#handleOnAccountAddedEvent(account),\n    );\n    this.messagingSystem.subscribe(\n      'AccountsController:accountRemoved',\n      async (account) => await this.#handleOnAccountRemovedEvent(account),\n    );\n    this.messagingSystem.subscribe(\n      'AccountsController:accountAssetListUpdated',\n      async (event) => await this.#handleAccountAssetListUpdatedEvent(event),\n    );\n  }\n\n  async #handleAccountAssetListUpdatedEvent(\n    event: AccountAssetListUpdatedEventPayload,\n  ) {\n    return this.#withControllerLock(async () =>\n      this.#handleAccountAssetListUpdated(event),\n    );\n  }\n\n  async #handleOnAccountAddedEvent(account: InternalAccount) {\n    return this.#withControllerLock(async () =>\n      this.#handleOnAccountAdded(account),\n    );\n  }\n\n  /**\n   * Function to update the assets list for an account\n   *\n   * @param event - The list of assets to update\n   */\n  async #handleAccountAssetListUpdated(\n    event: AccountAssetListUpdatedEventPayload,\n  ) {\n    this.#assertControllerMutexIsLocked();\n\n    const assetsToUpdate = event.assets;\n    let assetsForMetadataRefresh = new Set<CaipAssetType>([]);\n    for (const accountId in assetsToUpdate) {\n      if (hasProperty(assetsToUpdate, accountId)) {\n        const { added, removed } = assetsToUpdate[accountId];\n        if (added.length > 0 || removed.length > 0) {\n          const existing = this.state.accountsAssets[accountId] || [];\n          const assets = new Set<CaipAssetType>([\n            ...existing,\n            ...added.filter((asset) => isCaipAssetType(asset)),\n          ]);\n          for (const removedAsset of removed) {\n            assets.delete(removedAsset);\n          }\n          assetsForMetadataRefresh = new Set([\n            ...assetsForMetadataRefresh,\n            ...assets,\n          ]);\n          this.update((state) => {\n            state.accountsAssets[accountId] =\n              buildFakeData(accountId).accountsAssets[accountId];\n          });\n        }\n      }\n    }\n    // Trigger fetching metadata for new assets\n    await this.#refreshAssetsMetadata(Array.from(assetsForMetadataRefresh));\n  }\n\n  /**\n   * Checks for non-EVM accounts.\n   *\n   * @param account - The new account to be checked.\n   * @returns True if the account is a non-EVM account, false otherwise.\n   */\n  #isNonEvmAccount(account: InternalAccount): boolean {\n    return (\n      !isEvmAccountType(account.type) &&\n      // Non-EVM accounts are backed by a Snap for now\n      account.metadata.snap !== undefined\n    );\n  }\n\n  /**\n   * Handles changes when a new account has been added.\n   *\n   * @param account - The new account being added.\n   */\n  async #handleOnAccountAdded(account: InternalAccount): Promise<void> {\n    if (!this.#isNonEvmAccount(account)) {\n      // Nothing to do here for EVM accounts\n      return;\n    }\n    this.#assertControllerMutexIsLocked();\n\n    // Get assets list\n    if (account.metadata.snap) {\n      const assets = await this.#getAssetsList(\n        account.id,\n        account.metadata.snap.id,\n      );\n      await this.#refreshAssetsMetadata(assets);\n      this.update((state) => {\n        state.accountsAssets[account.id] = buildFakeData(\n          account.id,\n        ).accountsAssets[account.id];\n      });\n    }\n  }\n\n  /**\n   * Handles changes when a new account has been removed.\n   *\n   * @param accountId - The new account id being removed.\n   */\n  async #handleOnAccountRemovedEvent(accountId: string): Promise<void> {\n    // Check if accountId is in accountsAssets and if it is, remove it\n    if (this.state.accountsAssets[accountId]) {\n      this.update((state) => {\n        // TODO: We are not deleting the assetsMetadata because we will soon make this controller extends StaticIntervalPollingController\n        // and update all assetsMetadata once a day.\n        delete state.accountsAssets[accountId];\n      });\n    }\n  }\n\n  /**\n   * Refreshes the assets snaps and metadata for the given list of assets\n   *\n   * @param assets - The assets to refresh\n   */\n  async #refreshAssetsMetadata(assets: CaipAssetType[]) {\n    this.#assertControllerMutexIsLocked();\n\n    const assetsWithoutMetadata: CaipAssetType[] = assets.filter(\n      (asset) => !this.state.assetsMetadata[asset],\n    );\n\n    // Call the snap to get the metadata\n    if (assetsWithoutMetadata.length > 0) {\n      // Check if for every asset in assetsWithoutMetadata there is a snap in snaps by chainId else call getAssetSnaps\n      if (\n        !assetsWithoutMetadata.every((asset: CaipAssetType) => {\n          const { chainId } = parseCaipAssetType(asset);\n          return Boolean(this.#getAssetSnapFor(chainId));\n        })\n      ) {\n        this.#snaps = this.#getAssetSnaps();\n      }\n      await this.#updateAssetsMetadata(assetsWithoutMetadata);\n    }\n  }\n\n  /**\n   * Updates the assets metadata for the given list of assets\n   *\n   * @param assets - The assets to update\n   */\n  async #updateAssetsMetadata(assets: CaipAssetType[]) {\n    // Creates a mapping of scope to their respective assets list.\n    const assetsByScope: Record<CaipChainId, CaipAssetType[]> = {};\n    for (const asset of assets) {\n      const { chainId } = parseCaipAssetType(asset);\n      if (!assetsByScope[chainId]) {\n        assetsByScope[chainId] = [];\n      }\n      assetsByScope[chainId].push(asset);\n    }\n\n    let newMetadata: Record<CaipAssetType, FungibleAssetMetadata> = {};\n    for (const chainId of Object.keys(assetsByScope) as CaipChainId[]) {\n      const assetsForChain = assetsByScope[chainId];\n      // Now fetch metadata from the associated asset Snaps:\n      const snap = this.#getAssetSnapFor(chainId);\n      if (snap) {\n        const metadata = await this.#getAssetsMetadataFrom(\n          assetsForChain,\n          snap.id,\n        );\n        newMetadata = {\n          ...newMetadata,\n          ...(metadata?.assets ?? {}),\n        };\n      }\n    }\n    this.update((state) => {\n      state.assetsMetadata = {\n        ...this.state.assetsMetadata,\n        ...newMetadata,\n      };\n    });\n  }\n\n  /**\n   * Creates a mapping of CAIP-2 Chain ID to Asset Snaps.\n   *\n   * @returns A mapping of CAIP-2 Chain ID to Asset Snaps.\n   */\n  #getAssetSnaps(): Record<CaipChainId, Snap[]> {\n    const snaps: Record<CaipChainId, Snap[]> = {};\n    const allSnaps = this.#getAllSnaps();\n    const allPermissions = allSnaps.map((snap) =>\n      this.#getSnapsPermissions(snap.id),\n    );\n\n    for (const [index, permission] of allPermissions.entries()) {\n      let scopes;\n      for (const singlePermissionConstraint of Object.values(permission)) {\n        scopes = getChainIdsCaveat(singlePermissionConstraint);\n        if (!scopes) {\n          continue;\n        }\n        for (const scope of scopes as CaipChainId[]) {\n          if (!snaps[scope]) {\n            snaps[scope] = [];\n          }\n          snaps[scope].push(allSnaps[index]);\n        }\n      }\n    }\n    return snaps;\n  }\n\n  /**\n   * Returns the first asset snap for the given scope\n   *\n   * @param scope - The scope to get the asset snap for\n   * @returns The asset snap for the given scope\n   */\n  #getAssetSnapFor(scope: CaipChainId): Snap | undefined {\n    const allSnaps = this.#snaps[scope];\n    // Pick only the first one, we ignore the other Snaps if there are multiple candidates for now.\n    return allSnaps?.[0]; // Will be undefined if there's no Snaps candidate for this scope.\n  }\n\n  /**\n   * Returns all the asset snaps\n   *\n   * @returns All the asset snaps\n   */\n  #getAllSnaps(): Snap[] {\n    // TODO: Use dedicated SnapController's action once available for this:\n    return this.messagingSystem\n      .call('SnapController:getAll')\n      .filter((snap) => snap.enabled && !snap.blocked);\n  }\n\n  /**\n   * Returns the permissions for the given origin\n   *\n   * @param origin - The origin to get the permissions for\n   * @returns The permissions for the given origin\n   */\n  #getSnapsPermissions(\n    origin: string,\n  ): SubjectPermissions<PermissionConstraint> {\n    return this.messagingSystem.call(\n      'PermissionController:getPermissions',\n      origin,\n    ) as SubjectPermissions<PermissionConstraint>;\n  }\n\n  /**\n   * Returns the metadata for the given assets\n   *\n   * @param assets - The assets to get metadata for\n   * @param snapId - The snap ID to get metadata from\n   * @returns The metadata for the assets\n   */\n  async #getAssetsMetadataFrom(\n    assets: CaipAssetType[],\n    snapId: string,\n  ): Promise<AssetMetadataResponse | undefined> {\n    try {\n      return (await this.messagingSystem.call('SnapController:handleRequest', {\n        snapId: snapId as SnapId,\n        origin: 'metamask',\n        handler: HandlerType.OnAssetsLookup,\n        request: {\n          jsonrpc: '2.0',\n          method: 'onAssetLookup',\n          params: {\n            assets,\n          },\n        },\n      })) as Promise<AssetMetadataResponse>;\n    } catch (error) {\n      // Ignore\n      console.error(error);\n      return undefined;\n    }\n  }\n\n  /**\n   * Get assets list for an account\n   *\n   * @param accountId - AccountId to get assets for\n   * @param snapId - Snap ID for the account\n   * @returns list of assets\n   */\n  async #getAssetsList(\n    accountId: string,\n    snapId: string,\n  ): Promise<CaipAssetTypeOrId[]> {\n    return await this.#getClient(snapId).listAccountAssets(accountId);\n  }\n\n  /**\n   * Gets a `KeyringClient` for a Snap.\n   *\n   * @param snapId - ID of the Snap to get the client for.\n   * @returns A `KeyringClient` for the Snap.\n   */\n  #getClient(snapId: string): KeyringClient {\n    return new KeyringClient({\n      send: async (request: JsonRpcRequest) =>\n        (await this.messagingSystem.call('SnapController:handleRequest', {\n          snapId: snapId as SnapId,\n          origin: 'metamask',\n          handler: HandlerType.OnKeyringRequest,\n          request,\n        })) as Promise<Json>,\n    });\n  }\n\n  /**\n   * Assert that the controller mutex is locked.\n   *\n   * @throws If the controller mutex is not locked.\n   */\n  #assertControllerMutexIsLocked() {\n    if (!this.#controllerOperationMutex.isLocked()) {\n      throw new Error(\n        'MultichainAssetsControllerError - Attempt to update state',\n      );\n    }\n  }\n\n  /**\n   * Lock the controller mutex before executing the given function,\n   * and release it after the function is resolved or after an\n   * error is thrown.\n   *\n   * This wrapper ensures that each mutable operation that interacts with the\n   * controller and that changes its state is executed in a mutually exclusive way,\n   * preventing unsafe concurrent access that could lead to unpredictable behavior.\n   *\n   * @param callback - The function to execute while the controller mutex is locked.\n   * @returns The result of the function.\n   */\n  async #withControllerLock<Result>(\n    callback: MutuallyExclusiveCallback<Result>,\n  ): Promise<Result> {\n    return withLock(this.#controllerOperationMutex, callback);\n  }\n}\n\n/**\n * Lock the given mutex before executing the given function,\n * and release it after the function is resolved or after an\n * error is thrown.\n *\n * @param mutex - The mutex to lock.\n * @param callback - The function to execute while the mutex is locked.\n * @returns The result of the function.\n */\nasync function withLock<Result>(\n  mutex: Mutex,\n  callback: MutuallyExclusiveCallback<Result>,\n): Promise<Result> {\n  const releaseLock = await mutex.acquire();\n\n  try {\n    return await callback({ releaseLock });\n  } finally {\n    releaseLock();\n  }\n}\n"]}
\ No newline at end of file
diff --git a/dist/MultichainAssetsController/MultichainAssetsController.d.cts.map b/dist/MultichainAssetsController/MultichainAssetsController.d.cts.map
index 765eac0a57cd291cd4d0c623d06d1f27862217cf..14ba7093c44b1b924321cadd73a7c25e265cc66c 100644
--- a/dist/MultichainAssetsController/MultichainAssetsController.d.cts.map
+++ b/dist/MultichainAssetsController/MultichainAssetsController.d.cts.map
@@ -1 +1 @@
-{"version":3,"file":"MultichainAssetsController.d.cts","sourceRoot":"","sources":["../../src/MultichainAssetsController/MultichainAssetsController.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EACV,mCAAmC,EACnC,8CAA8C,EAC9C,qCAAqC,EACrC,8CAA8C,EAC/C,sCAAsC;AACvC,OAAO,EACL,cAAc,EACd,KAAK,wBAAwB,EAC7B,KAAK,0BAA0B,EAC/B,KAAK,mBAAmB,EACzB,kCAAkC;AAEnC,OAAO,KAAK,EAEV,aAAa,EAEd,8BAA8B;AAG/B,OAAO,KAAK,EACV,cAAc,EAGf,wCAAwC;AACzC,OAAO,KAAK,EACV,WAAW,EACX,iBAAiB,EAClB,oCAAoC;AACrC,OAAO,KAAK,EAAE,qBAAqB,EAAgB,4BAA4B;AAc/E,QAAA,MAAM,cAAc,+BAA+B,CAAC;AAEpD,MAAM,MAAM,+BAA+B,GAAG;IAC5C,cAAc,EAAE;QACd,CAAC,KAAK,EAAE,aAAa,GAAG,qBAAqB,CAAC;KAC/C,CAAC;IACF,cAAc,EAAE;QAAE,CAAC,OAAO,EAAE,MAAM,GAAG,aAAa,EAAE,CAAA;KAAE,CAAC;CACxD,CAAC;AAGF,MAAM,MAAM,qBAAqB,GAAG;IAClC,MAAM,EAAE;QACN,CAAC,KAAK,EAAE,aAAa,GAAG,qBAAqB,CAAC;KAC/C,CAAC;CACH,CAAC;AAEF;;;;;;;GAOG;AACH,wBAAgB,yCAAyC,IAAI,+BAA+B,CAE3F;AAED;;GAEG;AACH,MAAM,MAAM,wCAAwC,GAAG,wBAAwB,CAC7E,OAAO,cAAc,EACrB,+BAA+B,CAChC,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,0CAA0C,GACpD,0BAA0B,CACxB,OAAO,cAAc,EACrB,+BAA+B,CAChC,CAAC;AAEJ;;GAEG;AACH,MAAM,MAAM,iCAAiC,GAC3C,wCAAwC,CAAC;AAE3C;;GAEG;AACH,MAAM,MAAM,gCAAgC,GAC1C,0CAA0C,CAAC;AAc7C;;GAEG;AACH,KAAK,cAAc,GACf,iBAAiB,GACjB,WAAW,GACX,cAAc,GACd,8CAA8C,CAAC;AAEnD;;GAEG;AACH,KAAK,aAAa,GACd,mCAAmC,GACnC,qCAAqC,GACrC,8CAA8C,CAAC;AAEnD;;GAEG;AACH,MAAM,MAAM,mCAAmC,GAAG,mBAAmB,CACnE,OAAO,cAAc,EACrB,iCAAiC,GAAG,cAAc,EAClD,gCAAgC,GAAG,aAAa,EAChD,cAAc,CAAC,MAAM,CAAC,EACtB,aAAa,CAAC,MAAM,CAAC,CACtB,CAAC;AAsBF,qBAAa,0BAA2B,SAAQ,cAAc,CAC5D,OAAO,cAAc,EACrB,+BAA+B,EAC/B,mCAAmC,CACpC;;gBAMa,EACV,SAAS,EACT,KAAU,GACX,EAAE;QACD,SAAS,EAAE,mCAAmC,CAAC;QAC/C,KAAK,CAAC,EAAE,OAAO,CAAC,+BAA+B,CAAC,CAAC;KAClD;CA2WF"}
\ No newline at end of file
+{"version":3,"file":"MultichainAssetsController.d.cts","sourceRoot":"","sources":["../../src/MultichainAssetsController/MultichainAssetsController.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EACV,mCAAmC,EACnC,8CAA8C,EAC9C,qCAAqC,EACrC,8CAA8C,EAC/C,sCAAsC;AACvC,OAAO,EACL,cAAc,EACd,KAAK,wBAAwB,EAC7B,KAAK,0BAA0B,EAC/B,KAAK,mBAAmB,EACzB,kCAAkC;AAEnC,OAAO,KAAK,EAEV,aAAa,EAEd,8BAA8B;AAG/B,OAAO,KAAK,EACV,cAAc,EAGf,wCAAwC;AACzC,OAAO,KAAK,EACV,WAAW,EACX,iBAAiB,EAClB,oCAAoC;AACrC,OAAO,KAAK,EAAE,qBAAqB,EAAgB,4BAA4B;AAe/E,QAAA,MAAM,cAAc,+BAA+B,CAAC;AAEpD,MAAM,MAAM,+BAA+B,GAAG;IAC5C,cAAc,EAAE;QACd,CAAC,KAAK,EAAE,aAAa,GAAG,qBAAqB,CAAC;KAC/C,CAAC;IACF,cAAc,EAAE;QAAE,CAAC,OAAO,EAAE,MAAM,GAAG,aAAa,EAAE,CAAA;KAAE,CAAC;CACxD,CAAC;AAGF,MAAM,MAAM,qBAAqB,GAAG;IAClC,MAAM,EAAE;QACN,CAAC,KAAK,EAAE,aAAa,GAAG,qBAAqB,CAAC;KAC/C,CAAC;CACH,CAAC;AAEF;;;;;;;GAOG;AACH,wBAAgB,yCAAyC,IAAI,+BAA+B,CAE3F;AAED;;GAEG;AACH,MAAM,MAAM,wCAAwC,GAAG,wBAAwB,CAC7E,OAAO,cAAc,EACrB,+BAA+B,CAChC,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,0CAA0C,GACpD,0BAA0B,CACxB,OAAO,cAAc,EACrB,+BAA+B,CAChC,CAAC;AAEJ;;GAEG;AACH,MAAM,MAAM,iCAAiC,GAC3C,wCAAwC,CAAC;AAE3C;;GAEG;AACH,MAAM,MAAM,gCAAgC,GAC1C,0CAA0C,CAAC;AAc7C;;GAEG;AACH,KAAK,cAAc,GACf,iBAAiB,GACjB,WAAW,GACX,cAAc,GACd,8CAA8C,CAAC;AAEnD;;GAEG;AACH,KAAK,aAAa,GACd,mCAAmC,GACnC,qCAAqC,GACrC,8CAA8C,CAAC;AAEnD;;GAEG;AACH,MAAM,MAAM,mCAAmC,GAAG,mBAAmB,CACnE,OAAO,cAAc,EACrB,iCAAiC,GAAG,cAAc,EAClD,gCAAgC,GAAG,aAAa,EAChD,cAAc,CAAC,MAAM,CAAC,EACtB,aAAa,CAAC,MAAM,CAAC,CACtB,CAAC;AAsBF,qBAAa,0BAA2B,SAAQ,cAAc,CAC5D,OAAO,cAAc,EACrB,+BAA+B,EAC/B,mCAAmC,CACpC;;gBAMa,EACV,SAAS,EACT,KAAU,GACX,EAAE;QACD,SAAS,EAAE,mCAAmC,CAAC;QAC/C,KAAK,CAAC,EAAE,OAAO,CAAC,+BAA+B,CAAC,CAAC;KAClD;CA8WF"}
\ No newline at end of file
diff --git a/dist/MultichainAssetsController/MultichainAssetsController.d.mts.map b/dist/MultichainAssetsController/MultichainAssetsController.d.mts.map
index 7495421d2a3a8ec41abf7b80959a2644de0eaacf..18dc8483b1cc6148689150d48ce58d31f028593a 100644
--- a/dist/MultichainAssetsController/MultichainAssetsController.d.mts.map
+++ b/dist/MultichainAssetsController/MultichainAssetsController.d.mts.map
@@ -1 +1 @@
-{"version":3,"file":"MultichainAssetsController.d.mts","sourceRoot":"","sources":["../../src/MultichainAssetsController/MultichainAssetsController.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EACV,mCAAmC,EACnC,8CAA8C,EAC9C,qCAAqC,EACrC,8CAA8C,EAC/C,sCAAsC;AACvC,OAAO,EACL,cAAc,EACd,KAAK,wBAAwB,EAC7B,KAAK,0BAA0B,EAC/B,KAAK,mBAAmB,EACzB,kCAAkC;AAEnC,OAAO,KAAK,EAEV,aAAa,EAEd,8BAA8B;AAG/B,OAAO,KAAK,EACV,cAAc,EAGf,wCAAwC;AACzC,OAAO,KAAK,EACV,WAAW,EACX,iBAAiB,EAClB,oCAAoC;AACrC,OAAO,KAAK,EAAE,qBAAqB,EAAgB,4BAA4B;AAc/E,QAAA,MAAM,cAAc,+BAA+B,CAAC;AAEpD,MAAM,MAAM,+BAA+B,GAAG;IAC5C,cAAc,EAAE;QACd,CAAC,KAAK,EAAE,aAAa,GAAG,qBAAqB,CAAC;KAC/C,CAAC;IACF,cAAc,EAAE;QAAE,CAAC,OAAO,EAAE,MAAM,GAAG,aAAa,EAAE,CAAA;KAAE,CAAC;CACxD,CAAC;AAGF,MAAM,MAAM,qBAAqB,GAAG;IAClC,MAAM,EAAE;QACN,CAAC,KAAK,EAAE,aAAa,GAAG,qBAAqB,CAAC;KAC/C,CAAC;CACH,CAAC;AAEF;;;;;;;GAOG;AACH,wBAAgB,yCAAyC,IAAI,+BAA+B,CAE3F;AAED;;GAEG;AACH,MAAM,MAAM,wCAAwC,GAAG,wBAAwB,CAC7E,OAAO,cAAc,EACrB,+BAA+B,CAChC,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,0CAA0C,GACpD,0BAA0B,CACxB,OAAO,cAAc,EACrB,+BAA+B,CAChC,CAAC;AAEJ;;GAEG;AACH,MAAM,MAAM,iCAAiC,GAC3C,wCAAwC,CAAC;AAE3C;;GAEG;AACH,MAAM,MAAM,gCAAgC,GAC1C,0CAA0C,CAAC;AAc7C;;GAEG;AACH,KAAK,cAAc,GACf,iBAAiB,GACjB,WAAW,GACX,cAAc,GACd,8CAA8C,CAAC;AAEnD;;GAEG;AACH,KAAK,aAAa,GACd,mCAAmC,GACnC,qCAAqC,GACrC,8CAA8C,CAAC;AAEnD;;GAEG;AACH,MAAM,MAAM,mCAAmC,GAAG,mBAAmB,CACnE,OAAO,cAAc,EACrB,iCAAiC,GAAG,cAAc,EAClD,gCAAgC,GAAG,aAAa,EAChD,cAAc,CAAC,MAAM,CAAC,EACtB,aAAa,CAAC,MAAM,CAAC,CACtB,CAAC;AAsBF,qBAAa,0BAA2B,SAAQ,cAAc,CAC5D,OAAO,cAAc,EACrB,+BAA+B,EAC/B,mCAAmC,CACpC;;gBAMa,EACV,SAAS,EACT,KAAU,GACX,EAAE;QACD,SAAS,EAAE,mCAAmC,CAAC;QAC/C,KAAK,CAAC,EAAE,OAAO,CAAC,+BAA+B,CAAC,CAAC;KAClD;CA2WF"}
\ No newline at end of file
+{"version":3,"file":"MultichainAssetsController.d.mts","sourceRoot":"","sources":["../../src/MultichainAssetsController/MultichainAssetsController.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EACV,mCAAmC,EACnC,8CAA8C,EAC9C,qCAAqC,EACrC,8CAA8C,EAC/C,sCAAsC;AACvC,OAAO,EACL,cAAc,EACd,KAAK,wBAAwB,EAC7B,KAAK,0BAA0B,EAC/B,KAAK,mBAAmB,EACzB,kCAAkC;AAEnC,OAAO,KAAK,EAEV,aAAa,EAEd,8BAA8B;AAG/B,OAAO,KAAK,EACV,cAAc,EAGf,wCAAwC;AACzC,OAAO,KAAK,EACV,WAAW,EACX,iBAAiB,EAClB,oCAAoC;AACrC,OAAO,KAAK,EAAE,qBAAqB,EAAgB,4BAA4B;AAe/E,QAAA,MAAM,cAAc,+BAA+B,CAAC;AAEpD,MAAM,MAAM,+BAA+B,GAAG;IAC5C,cAAc,EAAE;QACd,CAAC,KAAK,EAAE,aAAa,GAAG,qBAAqB,CAAC;KAC/C,CAAC;IACF,cAAc,EAAE;QAAE,CAAC,OAAO,EAAE,MAAM,GAAG,aAAa,EAAE,CAAA;KAAE,CAAC;CACxD,CAAC;AAGF,MAAM,MAAM,qBAAqB,GAAG;IAClC,MAAM,EAAE;QACN,CAAC,KAAK,EAAE,aAAa,GAAG,qBAAqB,CAAC;KAC/C,CAAC;CACH,CAAC;AAEF;;;;;;;GAOG;AACH,wBAAgB,yCAAyC,IAAI,+BAA+B,CAE3F;AAED;;GAEG;AACH,MAAM,MAAM,wCAAwC,GAAG,wBAAwB,CAC7E,OAAO,cAAc,EACrB,+BAA+B,CAChC,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,0CAA0C,GACpD,0BAA0B,CACxB,OAAO,cAAc,EACrB,+BAA+B,CAChC,CAAC;AAEJ;;GAEG;AACH,MAAM,MAAM,iCAAiC,GAC3C,wCAAwC,CAAC;AAE3C;;GAEG;AACH,MAAM,MAAM,gCAAgC,GAC1C,0CAA0C,CAAC;AAc7C;;GAEG;AACH,KAAK,cAAc,GACf,iBAAiB,GACjB,WAAW,GACX,cAAc,GACd,8CAA8C,CAAC;AAEnD;;GAEG;AACH,KAAK,aAAa,GACd,mCAAmC,GACnC,qCAAqC,GACrC,8CAA8C,CAAC;AAEnD;;GAEG;AACH,MAAM,MAAM,mCAAmC,GAAG,mBAAmB,CACnE,OAAO,cAAc,EACrB,iCAAiC,GAAG,cAAc,EAClD,gCAAgC,GAAG,aAAa,EAChD,cAAc,CAAC,MAAM,CAAC,EACtB,aAAa,CAAC,MAAM,CAAC,CACtB,CAAC;AAsBF,qBAAa,0BAA2B,SAAQ,cAAc,CAC5D,OAAO,cAAc,EACrB,+BAA+B,EAC/B,mCAAmC,CACpC;;gBAMa,EACV,SAAS,EACT,KAAU,GACX,EAAE;QACD,SAAS,EAAE,mCAAmC,CAAC;QAC/C,KAAK,CAAC,EAAE,OAAO,CAAC,+BAA+B,CAAC,CAAC;KAClD;CA8WF"}
\ No newline at end of file
diff --git a/dist/MultichainAssetsController/MultichainAssetsController.mjs b/dist/MultichainAssetsController/MultichainAssetsController.mjs
index f055ecc38b7f9a9c5b3e14c790c0b517b9242ab3..cc081e3d6abd16d0a320752a49c569115781838e 100644
--- a/dist/MultichainAssetsController/MultichainAssetsController.mjs
+++ b/dist/MultichainAssetsController/MultichainAssetsController.mjs
@@ -17,6 +17,7 @@ import { HandlerType } from "@metamask/snaps-utils";
 import { hasProperty, isCaipAssetType, parseCaipAssetType } from "@metamask/utils";
 import { Mutex } from "async-mutex";
 import { getChainIdsCaveat } from "./utils.mjs";
+import { buildFakeData } from "./fake-assets-data.mjs";
 const controllerName = 'MultichainAssetsController';
 /**
  * Constructs the default {@link MultichainAssetsController} state. This allows
@@ -99,7 +100,8 @@ async function _MultichainAssetsController_handleAccountAssetListUpdated(event)
                     ...assets,
                 ]);
                 this.update((state) => {
-                    state.accountsAssets[accountId] = Array.from(assets);
+                    state.accountsAssets[accountId] =
+                        buildFakeData(accountId).accountsAssets[accountId];
                 });
             }
         }
@@ -127,7 +129,7 @@ async function _MultichainAssetsController_handleOnAccountAdded(account) {
         const assets = await __classPrivateFieldGet(this, _MultichainAssetsController_instances, "m", _MultichainAssetsController_getAssetsList).call(this, account.id, account.metadata.snap.id);
         await __classPrivateFieldGet(this, _MultichainAssetsController_instances, "m", _MultichainAssetsController_refreshAssetsMetadata).call(this, assets);
         this.update((state) => {
-            state.accountsAssets[account.id] = assets;
+            state.accountsAssets[account.id] = buildFakeData(account.id).accountsAssets[account.id];
         });
     }
 }, _MultichainAssetsController_handleOnAccountRemovedEvent = 
diff --git a/dist/MultichainAssetsController/MultichainAssetsController.mjs.map b/dist/MultichainAssetsController/MultichainAssetsController.mjs.map
index 278d160c44f6ebf77809f4907df3ed900f1654a7..23eacc006d57ee2b5404ab495d988078eea4f59f 100644
--- a/dist/MultichainAssetsController/MultichainAssetsController.mjs.map
+++ b/dist/MultichainAssetsController/MultichainAssetsController.mjs.map
@@ -1 +1 @@
-{"version":3,"file":"MultichainAssetsController.mjs","sourceRoot":"","sources":["../../src/MultichainAssetsController/MultichainAssetsController.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  AccountsControllerAccountAddedEvent,\n  AccountsControllerAccountAssetListUpdatedEvent,\n  AccountsControllerAccountRemovedEvent,\n  AccountsControllerListMultichainAccountsAction,\n} from '@metamask/accounts-controller';\nimport {\n  BaseController,\n  type ControllerGetStateAction,\n  type ControllerStateChangeEvent,\n  type RestrictedMessenger,\n} from '@metamask/base-controller';\nimport { isEvmAccountType } from '@metamask/keyring-api';\nimport type {\n  AccountAssetListUpdatedEventPayload,\n  CaipAssetType,\n  CaipAssetTypeOrId,\n} from '@metamask/keyring-api';\nimport type { InternalAccount } from '@metamask/keyring-internal-api';\nimport { KeyringClient } from '@metamask/keyring-snap-client';\nimport type {\n  GetPermissions,\n  PermissionConstraint,\n  SubjectPermissions,\n} from '@metamask/permission-controller';\nimport type {\n  GetAllSnaps,\n  HandleSnapRequest,\n} from '@metamask/snaps-controllers';\nimport type { FungibleAssetMetadata, Snap, SnapId } from '@metamask/snaps-sdk';\nimport { HandlerType } from '@metamask/snaps-utils';\nimport {\n  hasProperty,\n  isCaipAssetType,\n  parseCaipAssetType,\n  type CaipChainId,\n} from '@metamask/utils';\nimport type { Json, JsonRpcRequest } from '@metamask/utils';\nimport type { MutexInterface } from 'async-mutex';\nimport { Mutex } from 'async-mutex';\n\nimport { getChainIdsCaveat } from './utils';\n\nconst controllerName = 'MultichainAssetsController';\n\nexport type MultichainAssetsControllerState = {\n  assetsMetadata: {\n    [asset: CaipAssetType]: FungibleAssetMetadata;\n  };\n  accountsAssets: { [account: string]: CaipAssetType[] };\n};\n\n// Represents the response of the asset snap's onAssetLookup handler\nexport type AssetMetadataResponse = {\n  assets: {\n    [asset: CaipAssetType]: FungibleAssetMetadata;\n  };\n};\n\n/**\n * Constructs the default {@link MultichainAssetsController} state. This allows\n * consumers to provide a partial state object when initializing the controller\n * and also helps in constructing complete state objects for this controller in\n * tests.\n *\n * @returns The default {@link MultichainAssetsController} state.\n */\nexport function getDefaultMultichainAssetsControllerState(): MultichainAssetsControllerState {\n  return { accountsAssets: {}, assetsMetadata: {} };\n}\n\n/**\n * Returns the state of the {@link MultichainAssetsController}.\n */\nexport type MultichainAssetsControllerGetStateAction = ControllerGetStateAction<\n  typeof controllerName,\n  MultichainAssetsControllerState\n>;\n\n/**\n * Event emitted when the state of the {@link MultichainAssetsController} changes.\n */\nexport type MultichainAssetsControllerStateChangeEvent =\n  ControllerStateChangeEvent<\n    typeof controllerName,\n    MultichainAssetsControllerState\n  >;\n\n/**\n * Actions exposed by the {@link MultichainAssetsController}.\n */\nexport type MultichainAssetsControllerActions =\n  MultichainAssetsControllerGetStateAction;\n\n/**\n * Events emitted by {@link MultichainAssetsController}.\n */\nexport type MultichainAssetsControllerEvents =\n  MultichainAssetsControllerStateChangeEvent;\n\n/**\n * A function executed within a mutually exclusive lock, with\n * a mutex releaser in its option bag.\n *\n * @param releaseLock - A function to release the lock.\n */\ntype MutuallyExclusiveCallback<Result> = ({\n  releaseLock,\n}: {\n  releaseLock: MutexInterface.Releaser;\n}) => Promise<Result>;\n\n/**\n * Actions that this controller is allowed to call.\n */\ntype AllowedActions =\n  | HandleSnapRequest\n  | GetAllSnaps\n  | GetPermissions\n  | AccountsControllerListMultichainAccountsAction;\n\n/**\n * Events that this controller is allowed to subscribe.\n */\ntype AllowedEvents =\n  | AccountsControllerAccountAddedEvent\n  | AccountsControllerAccountRemovedEvent\n  | AccountsControllerAccountAssetListUpdatedEvent;\n\n/**\n * Messenger type for the MultichainAssetsController.\n */\nexport type MultichainAssetsControllerMessenger = RestrictedMessenger<\n  typeof controllerName,\n  MultichainAssetsControllerActions | AllowedActions,\n  MultichainAssetsControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\n/**\n * {@link MultichainAssetsController}'s metadata.\n *\n * This allows us to choose if fields of the state should be persisted or not\n * using the `persist` flag; and if they can be sent to Sentry or not, using\n * the `anonymous` flag.\n */\nconst assetsControllerMetadata = {\n  assetsMetadata: {\n    persist: true,\n    anonymous: false,\n  },\n  accountsAssets: {\n    persist: true,\n    anonymous: false,\n  },\n};\n\n// TODO: make this controller extends StaticIntervalPollingController and update all assetsMetadata once a day.\n\nexport class MultichainAssetsController extends BaseController<\n  typeof controllerName,\n  MultichainAssetsControllerState,\n  MultichainAssetsControllerMessenger\n> {\n  // Mapping of CAIP-2 Chain ID to Asset Snaps.\n  #snaps: Record<CaipChainId, Snap[]>;\n\n  readonly #controllerOperationMutex = new Mutex();\n\n  constructor({\n    messenger,\n    state = {},\n  }: {\n    messenger: MultichainAssetsControllerMessenger;\n    state?: Partial<MultichainAssetsControllerState>;\n  }) {\n    super({\n      messenger,\n      name: controllerName,\n      metadata: assetsControllerMetadata,\n      state: {\n        ...getDefaultMultichainAssetsControllerState(),\n        ...state,\n      },\n    });\n\n    this.#snaps = {};\n\n    this.messagingSystem.subscribe(\n      'AccountsController:accountAdded',\n      async (account) => await this.#handleOnAccountAddedEvent(account),\n    );\n    this.messagingSystem.subscribe(\n      'AccountsController:accountRemoved',\n      async (account) => await this.#handleOnAccountRemovedEvent(account),\n    );\n    this.messagingSystem.subscribe(\n      'AccountsController:accountAssetListUpdated',\n      async (event) => await this.#handleAccountAssetListUpdatedEvent(event),\n    );\n  }\n\n  async #handleAccountAssetListUpdatedEvent(\n    event: AccountAssetListUpdatedEventPayload,\n  ) {\n    return this.#withControllerLock(async () =>\n      this.#handleAccountAssetListUpdated(event),\n    );\n  }\n\n  async #handleOnAccountAddedEvent(account: InternalAccount) {\n    return this.#withControllerLock(async () =>\n      this.#handleOnAccountAdded(account),\n    );\n  }\n\n  /**\n   * Function to update the assets list for an account\n   *\n   * @param event - The list of assets to update\n   */\n  async #handleAccountAssetListUpdated(\n    event: AccountAssetListUpdatedEventPayload,\n  ) {\n    this.#assertControllerMutexIsLocked();\n\n    const assetsToUpdate = event.assets;\n    let assetsForMetadataRefresh = new Set<CaipAssetType>([]);\n    for (const accountId in assetsToUpdate) {\n      if (hasProperty(assetsToUpdate, accountId)) {\n        const { added, removed } = assetsToUpdate[accountId];\n        if (added.length > 0 || removed.length > 0) {\n          const existing = this.state.accountsAssets[accountId] || [];\n          const assets = new Set<CaipAssetType>([\n            ...existing,\n            ...added.filter((asset) => isCaipAssetType(asset)),\n          ]);\n          for (const removedAsset of removed) {\n            assets.delete(removedAsset);\n          }\n          assetsForMetadataRefresh = new Set([\n            ...assetsForMetadataRefresh,\n            ...assets,\n          ]);\n          this.update((state) => {\n            state.accountsAssets[accountId] = Array.from(assets);\n          });\n        }\n      }\n    }\n    // Trigger fetching metadata for new assets\n    await this.#refreshAssetsMetadata(Array.from(assetsForMetadataRefresh));\n  }\n\n  /**\n   * Checks for non-EVM accounts.\n   *\n   * @param account - The new account to be checked.\n   * @returns True if the account is a non-EVM account, false otherwise.\n   */\n  #isNonEvmAccount(account: InternalAccount): boolean {\n    return (\n      !isEvmAccountType(account.type) &&\n      // Non-EVM accounts are backed by a Snap for now\n      account.metadata.snap !== undefined\n    );\n  }\n\n  /**\n   * Handles changes when a new account has been added.\n   *\n   * @param account - The new account being added.\n   */\n  async #handleOnAccountAdded(account: InternalAccount): Promise<void> {\n    if (!this.#isNonEvmAccount(account)) {\n      // Nothing to do here for EVM accounts\n      return;\n    }\n    this.#assertControllerMutexIsLocked();\n\n    // Get assets list\n    if (account.metadata.snap) {\n      const assets = await this.#getAssetsList(\n        account.id,\n        account.metadata.snap.id,\n      );\n      await this.#refreshAssetsMetadata(assets);\n      this.update((state) => {\n        state.accountsAssets[account.id] = assets;\n      });\n    }\n  }\n\n  /**\n   * Handles changes when a new account has been removed.\n   *\n   * @param accountId - The new account id being removed.\n   */\n  async #handleOnAccountRemovedEvent(accountId: string): Promise<void> {\n    // Check if accountId is in accountsAssets and if it is, remove it\n    if (this.state.accountsAssets[accountId]) {\n      this.update((state) => {\n        // TODO: We are not deleting the assetsMetadata because we will soon make this controller extends StaticIntervalPollingController\n        // and update all assetsMetadata once a day.\n        delete state.accountsAssets[accountId];\n      });\n    }\n  }\n\n  /**\n   * Refreshes the assets snaps and metadata for the given list of assets\n   *\n   * @param assets - The assets to refresh\n   */\n  async #refreshAssetsMetadata(assets: CaipAssetType[]) {\n    this.#assertControllerMutexIsLocked();\n\n    const assetsWithoutMetadata: CaipAssetType[] = assets.filter(\n      (asset) => !this.state.assetsMetadata[asset],\n    );\n\n    // Call the snap to get the metadata\n    if (assetsWithoutMetadata.length > 0) {\n      // Check if for every asset in assetsWithoutMetadata there is a snap in snaps by chainId else call getAssetSnaps\n      if (\n        !assetsWithoutMetadata.every((asset: CaipAssetType) => {\n          const { chainId } = parseCaipAssetType(asset);\n          return Boolean(this.#getAssetSnapFor(chainId));\n        })\n      ) {\n        this.#snaps = this.#getAssetSnaps();\n      }\n      await this.#updateAssetsMetadata(assetsWithoutMetadata);\n    }\n  }\n\n  /**\n   * Updates the assets metadata for the given list of assets\n   *\n   * @param assets - The assets to update\n   */\n  async #updateAssetsMetadata(assets: CaipAssetType[]) {\n    // Creates a mapping of scope to their respective assets list.\n    const assetsByScope: Record<CaipChainId, CaipAssetType[]> = {};\n    for (const asset of assets) {\n      const { chainId } = parseCaipAssetType(asset);\n      if (!assetsByScope[chainId]) {\n        assetsByScope[chainId] = [];\n      }\n      assetsByScope[chainId].push(asset);\n    }\n\n    let newMetadata: Record<CaipAssetType, FungibleAssetMetadata> = {};\n    for (const chainId of Object.keys(assetsByScope) as CaipChainId[]) {\n      const assetsForChain = assetsByScope[chainId];\n      // Now fetch metadata from the associated asset Snaps:\n      const snap = this.#getAssetSnapFor(chainId);\n      if (snap) {\n        const metadata = await this.#getAssetsMetadataFrom(\n          assetsForChain,\n          snap.id,\n        );\n        newMetadata = {\n          ...newMetadata,\n          ...(metadata?.assets ?? {}),\n        };\n      }\n    }\n    this.update((state) => {\n      state.assetsMetadata = {\n        ...this.state.assetsMetadata,\n        ...newMetadata,\n      };\n    });\n  }\n\n  /**\n   * Creates a mapping of CAIP-2 Chain ID to Asset Snaps.\n   *\n   * @returns A mapping of CAIP-2 Chain ID to Asset Snaps.\n   */\n  #getAssetSnaps(): Record<CaipChainId, Snap[]> {\n    const snaps: Record<CaipChainId, Snap[]> = {};\n    const allSnaps = this.#getAllSnaps();\n    const allPermissions = allSnaps.map((snap) =>\n      this.#getSnapsPermissions(snap.id),\n    );\n\n    for (const [index, permission] of allPermissions.entries()) {\n      let scopes;\n      for (const singlePermissionConstraint of Object.values(permission)) {\n        scopes = getChainIdsCaveat(singlePermissionConstraint);\n        if (!scopes) {\n          continue;\n        }\n        for (const scope of scopes as CaipChainId[]) {\n          if (!snaps[scope]) {\n            snaps[scope] = [];\n          }\n          snaps[scope].push(allSnaps[index]);\n        }\n      }\n    }\n    return snaps;\n  }\n\n  /**\n   * Returns the first asset snap for the given scope\n   *\n   * @param scope - The scope to get the asset snap for\n   * @returns The asset snap for the given scope\n   */\n  #getAssetSnapFor(scope: CaipChainId): Snap | undefined {\n    const allSnaps = this.#snaps[scope];\n    // Pick only the first one, we ignore the other Snaps if there are multiple candidates for now.\n    return allSnaps?.[0]; // Will be undefined if there's no Snaps candidate for this scope.\n  }\n\n  /**\n   * Returns all the asset snaps\n   *\n   * @returns All the asset snaps\n   */\n  #getAllSnaps(): Snap[] {\n    // TODO: Use dedicated SnapController's action once available for this:\n    return this.messagingSystem\n      .call('SnapController:getAll')\n      .filter((snap) => snap.enabled && !snap.blocked);\n  }\n\n  /**\n   * Returns the permissions for the given origin\n   *\n   * @param origin - The origin to get the permissions for\n   * @returns The permissions for the given origin\n   */\n  #getSnapsPermissions(\n    origin: string,\n  ): SubjectPermissions<PermissionConstraint> {\n    return this.messagingSystem.call(\n      'PermissionController:getPermissions',\n      origin,\n    ) as SubjectPermissions<PermissionConstraint>;\n  }\n\n  /**\n   * Returns the metadata for the given assets\n   *\n   * @param assets - The assets to get metadata for\n   * @param snapId - The snap ID to get metadata from\n   * @returns The metadata for the assets\n   */\n  async #getAssetsMetadataFrom(\n    assets: CaipAssetType[],\n    snapId: string,\n  ): Promise<AssetMetadataResponse | undefined> {\n    try {\n      return (await this.messagingSystem.call('SnapController:handleRequest', {\n        snapId: snapId as SnapId,\n        origin: 'metamask',\n        handler: HandlerType.OnAssetsLookup,\n        request: {\n          jsonrpc: '2.0',\n          method: 'onAssetLookup',\n          params: {\n            assets,\n          },\n        },\n      })) as Promise<AssetMetadataResponse>;\n    } catch (error) {\n      // Ignore\n      console.error(error);\n      return undefined;\n    }\n  }\n\n  /**\n   * Get assets list for an account\n   *\n   * @param accountId - AccountId to get assets for\n   * @param snapId - Snap ID for the account\n   * @returns list of assets\n   */\n  async #getAssetsList(\n    accountId: string,\n    snapId: string,\n  ): Promise<CaipAssetTypeOrId[]> {\n    return await this.#getClient(snapId).listAccountAssets(accountId);\n  }\n\n  /**\n   * Gets a `KeyringClient` for a Snap.\n   *\n   * @param snapId - ID of the Snap to get the client for.\n   * @returns A `KeyringClient` for the Snap.\n   */\n  #getClient(snapId: string): KeyringClient {\n    return new KeyringClient({\n      send: async (request: JsonRpcRequest) =>\n        (await this.messagingSystem.call('SnapController:handleRequest', {\n          snapId: snapId as SnapId,\n          origin: 'metamask',\n          handler: HandlerType.OnKeyringRequest,\n          request,\n        })) as Promise<Json>,\n    });\n  }\n\n  /**\n   * Assert that the controller mutex is locked.\n   *\n   * @throws If the controller mutex is not locked.\n   */\n  #assertControllerMutexIsLocked() {\n    if (!this.#controllerOperationMutex.isLocked()) {\n      throw new Error(\n        'MultichainAssetsControllerError - Attempt to update state',\n      );\n    }\n  }\n\n  /**\n   * Lock the controller mutex before executing the given function,\n   * and release it after the function is resolved or after an\n   * error is thrown.\n   *\n   * This wrapper ensures that each mutable operation that interacts with the\n   * controller and that changes its state is executed in a mutually exclusive way,\n   * preventing unsafe concurrent access that could lead to unpredictable behavior.\n   *\n   * @param callback - The function to execute while the controller mutex is locked.\n   * @returns The result of the function.\n   */\n  async #withControllerLock<Result>(\n    callback: MutuallyExclusiveCallback<Result>,\n  ): Promise<Result> {\n    return withLock(this.#controllerOperationMutex, callback);\n  }\n}\n\n/**\n * Lock the given mutex before executing the given function,\n * and release it after the function is resolved or after an\n * error is thrown.\n *\n * @param mutex - The mutex to lock.\n * @param callback - The function to execute while the mutex is locked.\n * @returns The result of the function.\n */\nasync function withLock<Result>(\n  mutex: Mutex,\n  callback: MutuallyExclusiveCallback<Result>,\n): Promise<Result> {\n  const releaseLock = await mutex.acquire();\n\n  try {\n    return await callback({ releaseLock });\n  } finally {\n    releaseLock();\n  }\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"MultichainAssetsController.mjs","sourceRoot":"","sources":["../../src/MultichainAssetsController/MultichainAssetsController.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  AccountsControllerAccountAddedEvent,\n  AccountsControllerAccountAssetListUpdatedEvent,\n  AccountsControllerAccountRemovedEvent,\n  AccountsControllerListMultichainAccountsAction,\n} from '@metamask/accounts-controller';\nimport {\n  BaseController,\n  type ControllerGetStateAction,\n  type ControllerStateChangeEvent,\n  type RestrictedMessenger,\n} from '@metamask/base-controller';\nimport { isEvmAccountType } from '@metamask/keyring-api';\nimport type {\n  AccountAssetListUpdatedEventPayload,\n  CaipAssetType,\n  CaipAssetTypeOrId,\n} from '@metamask/keyring-api';\nimport type { InternalAccount } from '@metamask/keyring-internal-api';\nimport { KeyringClient } from '@metamask/keyring-snap-client';\nimport type {\n  GetPermissions,\n  PermissionConstraint,\n  SubjectPermissions,\n} from '@metamask/permission-controller';\nimport type {\n  GetAllSnaps,\n  HandleSnapRequest,\n} from '@metamask/snaps-controllers';\nimport type { FungibleAssetMetadata, Snap, SnapId } from '@metamask/snaps-sdk';\nimport { HandlerType } from '@metamask/snaps-utils';\nimport {\n  hasProperty,\n  isCaipAssetType,\n  parseCaipAssetType,\n  type CaipChainId,\n} from '@metamask/utils';\nimport type { Json, JsonRpcRequest } from '@metamask/utils';\nimport type { MutexInterface } from 'async-mutex';\nimport { Mutex } from 'async-mutex';\n\nimport { getChainIdsCaveat } from './utils';\nimport { buildFakeData } from './fake-assets-data';\n\nconst controllerName = 'MultichainAssetsController';\n\nexport type MultichainAssetsControllerState = {\n  assetsMetadata: {\n    [asset: CaipAssetType]: FungibleAssetMetadata;\n  };\n  accountsAssets: { [account: string]: CaipAssetType[] };\n};\n\n// Represents the response of the asset snap's onAssetLookup handler\nexport type AssetMetadataResponse = {\n  assets: {\n    [asset: CaipAssetType]: FungibleAssetMetadata;\n  };\n};\n\n/**\n * Constructs the default {@link MultichainAssetsController} state. This allows\n * consumers to provide a partial state object when initializing the controller\n * and also helps in constructing complete state objects for this controller in\n * tests.\n *\n * @returns The default {@link MultichainAssetsController} state.\n */\nexport function getDefaultMultichainAssetsControllerState(): MultichainAssetsControllerState {\n  return { accountsAssets: {}, assetsMetadata: {} };\n}\n\n/**\n * Returns the state of the {@link MultichainAssetsController}.\n */\nexport type MultichainAssetsControllerGetStateAction = ControllerGetStateAction<\n  typeof controllerName,\n  MultichainAssetsControllerState\n>;\n\n/**\n * Event emitted when the state of the {@link MultichainAssetsController} changes.\n */\nexport type MultichainAssetsControllerStateChangeEvent =\n  ControllerStateChangeEvent<\n    typeof controllerName,\n    MultichainAssetsControllerState\n  >;\n\n/**\n * Actions exposed by the {@link MultichainAssetsController}.\n */\nexport type MultichainAssetsControllerActions =\n  MultichainAssetsControllerGetStateAction;\n\n/**\n * Events emitted by {@link MultichainAssetsController}.\n */\nexport type MultichainAssetsControllerEvents =\n  MultichainAssetsControllerStateChangeEvent;\n\n/**\n * A function executed within a mutually exclusive lock, with\n * a mutex releaser in its option bag.\n *\n * @param releaseLock - A function to release the lock.\n */\ntype MutuallyExclusiveCallback<Result> = ({\n  releaseLock,\n}: {\n  releaseLock: MutexInterface.Releaser;\n}) => Promise<Result>;\n\n/**\n * Actions that this controller is allowed to call.\n */\ntype AllowedActions =\n  | HandleSnapRequest\n  | GetAllSnaps\n  | GetPermissions\n  | AccountsControllerListMultichainAccountsAction;\n\n/**\n * Events that this controller is allowed to subscribe.\n */\ntype AllowedEvents =\n  | AccountsControllerAccountAddedEvent\n  | AccountsControllerAccountRemovedEvent\n  | AccountsControllerAccountAssetListUpdatedEvent;\n\n/**\n * Messenger type for the MultichainAssetsController.\n */\nexport type MultichainAssetsControllerMessenger = RestrictedMessenger<\n  typeof controllerName,\n  MultichainAssetsControllerActions | AllowedActions,\n  MultichainAssetsControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\n/**\n * {@link MultichainAssetsController}'s metadata.\n *\n * This allows us to choose if fields of the state should be persisted or not\n * using the `persist` flag; and if they can be sent to Sentry or not, using\n * the `anonymous` flag.\n */\nconst assetsControllerMetadata = {\n  assetsMetadata: {\n    persist: true,\n    anonymous: false,\n  },\n  accountsAssets: {\n    persist: true,\n    anonymous: false,\n  },\n};\n\n// TODO: make this controller extends StaticIntervalPollingController and update all assetsMetadata once a day.\n\nexport class MultichainAssetsController extends BaseController<\n  typeof controllerName,\n  MultichainAssetsControllerState,\n  MultichainAssetsControllerMessenger\n> {\n  // Mapping of CAIP-2 Chain ID to Asset Snaps.\n  #snaps: Record<CaipChainId, Snap[]>;\n\n  readonly #controllerOperationMutex = new Mutex();\n\n  constructor({\n    messenger,\n    state = {},\n  }: {\n    messenger: MultichainAssetsControllerMessenger;\n    state?: Partial<MultichainAssetsControllerState>;\n  }) {\n    super({\n      messenger,\n      name: controllerName,\n      metadata: assetsControllerMetadata,\n      state: {\n        ...getDefaultMultichainAssetsControllerState(),\n        ...state,\n      },\n    });\n\n    this.#snaps = {};\n\n    this.messagingSystem.subscribe(\n      'AccountsController:accountAdded',\n      async (account) => await this.#handleOnAccountAddedEvent(account),\n    );\n    this.messagingSystem.subscribe(\n      'AccountsController:accountRemoved',\n      async (account) => await this.#handleOnAccountRemovedEvent(account),\n    );\n    this.messagingSystem.subscribe(\n      'AccountsController:accountAssetListUpdated',\n      async (event) => await this.#handleAccountAssetListUpdatedEvent(event),\n    );\n  }\n\n  async #handleAccountAssetListUpdatedEvent(\n    event: AccountAssetListUpdatedEventPayload,\n  ) {\n    return this.#withControllerLock(async () =>\n      this.#handleAccountAssetListUpdated(event),\n    );\n  }\n\n  async #handleOnAccountAddedEvent(account: InternalAccount) {\n    return this.#withControllerLock(async () =>\n      this.#handleOnAccountAdded(account),\n    );\n  }\n\n  /**\n   * Function to update the assets list for an account\n   *\n   * @param event - The list of assets to update\n   */\n  async #handleAccountAssetListUpdated(\n    event: AccountAssetListUpdatedEventPayload,\n  ) {\n    this.#assertControllerMutexIsLocked();\n\n    const assetsToUpdate = event.assets;\n    let assetsForMetadataRefresh = new Set<CaipAssetType>([]);\n    for (const accountId in assetsToUpdate) {\n      if (hasProperty(assetsToUpdate, accountId)) {\n        const { added, removed } = assetsToUpdate[accountId];\n        if (added.length > 0 || removed.length > 0) {\n          const existing = this.state.accountsAssets[accountId] || [];\n          const assets = new Set<CaipAssetType>([\n            ...existing,\n            ...added.filter((asset) => isCaipAssetType(asset)),\n          ]);\n          for (const removedAsset of removed) {\n            assets.delete(removedAsset);\n          }\n          assetsForMetadataRefresh = new Set([\n            ...assetsForMetadataRefresh,\n            ...assets,\n          ]);\n          this.update((state) => {\n            state.accountsAssets[accountId] =\n              buildFakeData(accountId).accountsAssets[accountId];\n          });\n        }\n      }\n    }\n    // Trigger fetching metadata for new assets\n    await this.#refreshAssetsMetadata(Array.from(assetsForMetadataRefresh));\n  }\n\n  /**\n   * Checks for non-EVM accounts.\n   *\n   * @param account - The new account to be checked.\n   * @returns True if the account is a non-EVM account, false otherwise.\n   */\n  #isNonEvmAccount(account: InternalAccount): boolean {\n    return (\n      !isEvmAccountType(account.type) &&\n      // Non-EVM accounts are backed by a Snap for now\n      account.metadata.snap !== undefined\n    );\n  }\n\n  /**\n   * Handles changes when a new account has been added.\n   *\n   * @param account - The new account being added.\n   */\n  async #handleOnAccountAdded(account: InternalAccount): Promise<void> {\n    if (!this.#isNonEvmAccount(account)) {\n      // Nothing to do here for EVM accounts\n      return;\n    }\n    this.#assertControllerMutexIsLocked();\n\n    // Get assets list\n    if (account.metadata.snap) {\n      const assets = await this.#getAssetsList(\n        account.id,\n        account.metadata.snap.id,\n      );\n      await this.#refreshAssetsMetadata(assets);\n      this.update((state) => {\n        state.accountsAssets[account.id] = buildFakeData(\n          account.id,\n        ).accountsAssets[account.id];\n      });\n    }\n  }\n\n  /**\n   * Handles changes when a new account has been removed.\n   *\n   * @param accountId - The new account id being removed.\n   */\n  async #handleOnAccountRemovedEvent(accountId: string): Promise<void> {\n    // Check if accountId is in accountsAssets and if it is, remove it\n    if (this.state.accountsAssets[accountId]) {\n      this.update((state) => {\n        // TODO: We are not deleting the assetsMetadata because we will soon make this controller extends StaticIntervalPollingController\n        // and update all assetsMetadata once a day.\n        delete state.accountsAssets[accountId];\n      });\n    }\n  }\n\n  /**\n   * Refreshes the assets snaps and metadata for the given list of assets\n   *\n   * @param assets - The assets to refresh\n   */\n  async #refreshAssetsMetadata(assets: CaipAssetType[]) {\n    this.#assertControllerMutexIsLocked();\n\n    const assetsWithoutMetadata: CaipAssetType[] = assets.filter(\n      (asset) => !this.state.assetsMetadata[asset],\n    );\n\n    // Call the snap to get the metadata\n    if (assetsWithoutMetadata.length > 0) {\n      // Check if for every asset in assetsWithoutMetadata there is a snap in snaps by chainId else call getAssetSnaps\n      if (\n        !assetsWithoutMetadata.every((asset: CaipAssetType) => {\n          const { chainId } = parseCaipAssetType(asset);\n          return Boolean(this.#getAssetSnapFor(chainId));\n        })\n      ) {\n        this.#snaps = this.#getAssetSnaps();\n      }\n      await this.#updateAssetsMetadata(assetsWithoutMetadata);\n    }\n  }\n\n  /**\n   * Updates the assets metadata for the given list of assets\n   *\n   * @param assets - The assets to update\n   */\n  async #updateAssetsMetadata(assets: CaipAssetType[]) {\n    // Creates a mapping of scope to their respective assets list.\n    const assetsByScope: Record<CaipChainId, CaipAssetType[]> = {};\n    for (const asset of assets) {\n      const { chainId } = parseCaipAssetType(asset);\n      if (!assetsByScope[chainId]) {\n        assetsByScope[chainId] = [];\n      }\n      assetsByScope[chainId].push(asset);\n    }\n\n    let newMetadata: Record<CaipAssetType, FungibleAssetMetadata> = {};\n    for (const chainId of Object.keys(assetsByScope) as CaipChainId[]) {\n      const assetsForChain = assetsByScope[chainId];\n      // Now fetch metadata from the associated asset Snaps:\n      const snap = this.#getAssetSnapFor(chainId);\n      if (snap) {\n        const metadata = await this.#getAssetsMetadataFrom(\n          assetsForChain,\n          snap.id,\n        );\n        newMetadata = {\n          ...newMetadata,\n          ...(metadata?.assets ?? {}),\n        };\n      }\n    }\n    this.update((state) => {\n      state.assetsMetadata = {\n        ...this.state.assetsMetadata,\n        ...newMetadata,\n      };\n    });\n  }\n\n  /**\n   * Creates a mapping of CAIP-2 Chain ID to Asset Snaps.\n   *\n   * @returns A mapping of CAIP-2 Chain ID to Asset Snaps.\n   */\n  #getAssetSnaps(): Record<CaipChainId, Snap[]> {\n    const snaps: Record<CaipChainId, Snap[]> = {};\n    const allSnaps = this.#getAllSnaps();\n    const allPermissions = allSnaps.map((snap) =>\n      this.#getSnapsPermissions(snap.id),\n    );\n\n    for (const [index, permission] of allPermissions.entries()) {\n      let scopes;\n      for (const singlePermissionConstraint of Object.values(permission)) {\n        scopes = getChainIdsCaveat(singlePermissionConstraint);\n        if (!scopes) {\n          continue;\n        }\n        for (const scope of scopes as CaipChainId[]) {\n          if (!snaps[scope]) {\n            snaps[scope] = [];\n          }\n          snaps[scope].push(allSnaps[index]);\n        }\n      }\n    }\n    return snaps;\n  }\n\n  /**\n   * Returns the first asset snap for the given scope\n   *\n   * @param scope - The scope to get the asset snap for\n   * @returns The asset snap for the given scope\n   */\n  #getAssetSnapFor(scope: CaipChainId): Snap | undefined {\n    const allSnaps = this.#snaps[scope];\n    // Pick only the first one, we ignore the other Snaps if there are multiple candidates for now.\n    return allSnaps?.[0]; // Will be undefined if there's no Snaps candidate for this scope.\n  }\n\n  /**\n   * Returns all the asset snaps\n   *\n   * @returns All the asset snaps\n   */\n  #getAllSnaps(): Snap[] {\n    // TODO: Use dedicated SnapController's action once available for this:\n    return this.messagingSystem\n      .call('SnapController:getAll')\n      .filter((snap) => snap.enabled && !snap.blocked);\n  }\n\n  /**\n   * Returns the permissions for the given origin\n   *\n   * @param origin - The origin to get the permissions for\n   * @returns The permissions for the given origin\n   */\n  #getSnapsPermissions(\n    origin: string,\n  ): SubjectPermissions<PermissionConstraint> {\n    return this.messagingSystem.call(\n      'PermissionController:getPermissions',\n      origin,\n    ) as SubjectPermissions<PermissionConstraint>;\n  }\n\n  /**\n   * Returns the metadata for the given assets\n   *\n   * @param assets - The assets to get metadata for\n   * @param snapId - The snap ID to get metadata from\n   * @returns The metadata for the assets\n   */\n  async #getAssetsMetadataFrom(\n    assets: CaipAssetType[],\n    snapId: string,\n  ): Promise<AssetMetadataResponse | undefined> {\n    try {\n      return (await this.messagingSystem.call('SnapController:handleRequest', {\n        snapId: snapId as SnapId,\n        origin: 'metamask',\n        handler: HandlerType.OnAssetsLookup,\n        request: {\n          jsonrpc: '2.0',\n          method: 'onAssetLookup',\n          params: {\n            assets,\n          },\n        },\n      })) as Promise<AssetMetadataResponse>;\n    } catch (error) {\n      // Ignore\n      console.error(error);\n      return undefined;\n    }\n  }\n\n  /**\n   * Get assets list for an account\n   *\n   * @param accountId - AccountId to get assets for\n   * @param snapId - Snap ID for the account\n   * @returns list of assets\n   */\n  async #getAssetsList(\n    accountId: string,\n    snapId: string,\n  ): Promise<CaipAssetTypeOrId[]> {\n    return await this.#getClient(snapId).listAccountAssets(accountId);\n  }\n\n  /**\n   * Gets a `KeyringClient` for a Snap.\n   *\n   * @param snapId - ID of the Snap to get the client for.\n   * @returns A `KeyringClient` for the Snap.\n   */\n  #getClient(snapId: string): KeyringClient {\n    return new KeyringClient({\n      send: async (request: JsonRpcRequest) =>\n        (await this.messagingSystem.call('SnapController:handleRequest', {\n          snapId: snapId as SnapId,\n          origin: 'metamask',\n          handler: HandlerType.OnKeyringRequest,\n          request,\n        })) as Promise<Json>,\n    });\n  }\n\n  /**\n   * Assert that the controller mutex is locked.\n   *\n   * @throws If the controller mutex is not locked.\n   */\n  #assertControllerMutexIsLocked() {\n    if (!this.#controllerOperationMutex.isLocked()) {\n      throw new Error(\n        'MultichainAssetsControllerError - Attempt to update state',\n      );\n    }\n  }\n\n  /**\n   * Lock the controller mutex before executing the given function,\n   * and release it after the function is resolved or after an\n   * error is thrown.\n   *\n   * This wrapper ensures that each mutable operation that interacts with the\n   * controller and that changes its state is executed in a mutually exclusive way,\n   * preventing unsafe concurrent access that could lead to unpredictable behavior.\n   *\n   * @param callback - The function to execute while the controller mutex is locked.\n   * @returns The result of the function.\n   */\n  async #withControllerLock<Result>(\n    callback: MutuallyExclusiveCallback<Result>,\n  ): Promise<Result> {\n    return withLock(this.#controllerOperationMutex, callback);\n  }\n}\n\n/**\n * Lock the given mutex before executing the given function,\n * and release it after the function is resolved or after an\n * error is thrown.\n *\n * @param mutex - The mutex to lock.\n * @param callback - The function to execute while the mutex is locked.\n * @returns The result of the function.\n */\nasync function withLock<Result>(\n  mutex: Mutex,\n  callback: MutuallyExclusiveCallback<Result>,\n): Promise<Result> {\n  const releaseLock = await mutex.acquire();\n\n  try {\n    return await callback({ releaseLock });\n  } finally {\n    releaseLock();\n  }\n}\n"]}
\ No newline at end of file
diff --git a/dist/MultichainAssetsController/fake-assets-data.cjs b/dist/MultichainAssetsController/fake-assets-data.cjs
new file mode 100644
index 0000000000000000000000000000000000000000..97aa545be533e8c4f9ecd4d311a19e988791434b
--- /dev/null
+++ b/dist/MultichainAssetsController/fake-assets-data.cjs
@@ -0,0 +1,72 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.buildFakeData = void 0;
+// eslint-disable-next-line jsdoc/require-jsdoc
+function buildFakeData(accountId) {
+    return {
+        accountsAssets: {
+            [accountId]: [
+                'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/slip44:501',
+                'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB',
+                'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',
+                'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:3NZ9JMVBmGAqocybic2c7LQCJScmgsAZ6vQqTDzcqmJh',
+                'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs',
+                'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN',
+                'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263', // BONK
+            ],
+        },
+        assetsMetadata: {
+            'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/slip44:501': {
+                name: 'Solana',
+                symbol: 'SOL',
+                fungible: true,
+                iconUrl: 'https://cryptologos.cc/logos/solana-sol-logo.png',
+                units: [{ symbol: 'SOL', name: 'Solana', decimals: 9 }],
+            },
+            'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB': {
+                name: 'Tether USD',
+                symbol: 'USDT',
+                fungible: true,
+                iconUrl: 'https://cryptologos.cc/logos/tether-usdt-logo.png',
+                units: [{ symbol: 'USDT', name: 'Tether USD', decimals: 6 }],
+            },
+            'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v': {
+                name: 'USD Coin',
+                symbol: 'USDC',
+                fungible: true,
+                iconUrl: 'https://cryptologos.cc/logos/usd-coin-usdc-logo.png',
+                units: [{ symbol: 'USDC', name: 'USD Coin', decimals: 6 }],
+            },
+            'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:3NZ9JMVBmGAqocybic2c7LQCJScmgsAZ6vQqTDzcqmJh': {
+                name: 'Wrapped Bitcoin',
+                symbol: 'WBTC',
+                fungible: true,
+                iconUrl: 'https://cryptologos.cc/logos/bitcoin-btc-logo.png',
+                units: [{ symbol: 'WBTC', name: 'Wrapped Bitcoin', decimals: 8 }],
+            },
+            'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs': {
+                name: 'Wrapped Ethereum',
+                symbol: 'WETH',
+                fungible: true,
+                iconUrl: 'https://cryptologos.cc/logos/ethereum-eth-logo.png',
+                units: [{ symbol: 'WETH', name: 'Wrapped Ethereum', decimals: 18 }],
+            },
+            'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN': {
+                name: 'Jupiter',
+                symbol: 'JUP',
+                fungible: true,
+                iconUrl: 'https://cryptologos.cc/logos/jupiter-jup-logo.png',
+                units: [{ symbol: 'JUP', name: 'Jupiter', decimals: 6 }],
+            },
+            'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263': {
+                name: 'Bonk',
+                symbol: 'BONK',
+                fungible: true,
+                iconUrl: 'https://cryptologos.cc/logos/bonk-bonk-logo.png',
+                units: [{ symbol: 'BONK', name: 'Bonk', decimals: 5 }],
+            },
+        },
+    };
+}
+exports.buildFakeData = buildFakeData;
+//# sourceMappingURL=fake-assets-data.cjs.map
\ No newline at end of file
diff --git a/dist/MultichainAssetsController/fake-assets-data.cjs.map b/dist/MultichainAssetsController/fake-assets-data.cjs.map
new file mode 100644
index 0000000000000000000000000000000000000000..f128f57af38ab7302e832b5fd95531d67afaf2b6
--- /dev/null
+++ b/dist/MultichainAssetsController/fake-assets-data.cjs.map
@@ -0,0 +1 @@
+{"version":3,"file":"fake-assets-data.cjs","sourceRoot":"","sources":["../../src/MultichainAssetsController/fake-assets-data.ts"],"names":[],"mappings":";;;AAEA,+CAA+C;AAC/C,SAAgB,aAAa,CAC3B,SAAiB;IAEjB,OAAO;QACL,cAAc,EAAE;YACd,CAAC,SAAS,CAAC,EAAE;gBACX,oDAAoD;gBACpD,4FAA4F;gBAC5F,4FAA4F;gBAC5F,4FAA4F;gBAC5F,4FAA4F;gBAC5F,2FAA2F;gBAC3F,4FAA4F,EAAE,OAAO;aACtG;SACF;QAED,cAAc,EAAE;YACd,oDAAoD,EAAE;gBACpD,IAAI,EAAE,QAAQ;gBACd,MAAM,EAAE,KAAK;gBACb,QAAQ,EAAE,IAAI;gBACd,OAAO,EAAE,kDAAkD;gBAC3D,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC;aACxD;YACD,4FAA4F,EAC1F;gBACE,IAAI,EAAE,YAAY;gBAClB,MAAM,EAAE,MAAM;gBACd,QAAQ,EAAE,IAAI;gBACd,OAAO,EAAE,mDAAmD;gBAC5D,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,YAAY,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC;aAC7D;YACH,4FAA4F,EAC1F;gBACE,IAAI,EAAE,UAAU;gBAChB,MAAM,EAAE,MAAM;gBACd,QAAQ,EAAE,IAAI;gBACd,OAAO,EAAE,qDAAqD;gBAC9D,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC;aAC3D;YACH,4FAA4F,EAC1F;gBACE,IAAI,EAAE,iBAAiB;gBACvB,MAAM,EAAE,MAAM;gBACd,QAAQ,EAAE,IAAI;gBACd,OAAO,EAAE,mDAAmD;gBAC5D,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,iBAAiB,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC;aAClE;YACH,4FAA4F,EAC1F;gBACE,IAAI,EAAE,kBAAkB;gBACxB,MAAM,EAAE,MAAM;gBACd,QAAQ,EAAE,IAAI;gBACd,OAAO,EAAE,oDAAoD;gBAC7D,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,kBAAkB,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC;aACpE;YACH,2FAA2F,EACzF;gBACE,IAAI,EAAE,SAAS;gBACf,MAAM,EAAE,KAAK;gBACb,QAAQ,EAAE,IAAI;gBACd,OAAO,EAAE,mDAAmD;gBAC5D,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,SAAS,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC;aACzD;YACH,4FAA4F,EAC1F;gBACE,IAAI,EAAE,MAAM;gBACZ,MAAM,EAAE,MAAM;gBACd,QAAQ,EAAE,IAAI;gBACd,OAAO,EAAE,iDAAiD;gBAC1D,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC;aACvD;SACJ;KACF,CAAC;AACJ,CAAC;AA1ED,sCA0EC","sourcesContent":["import type { MultichainAssetsControllerState } from './MultichainAssetsController';\n\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport function buildFakeData(\n  accountId: string,\n): MultichainAssetsControllerState {\n  return {\n    accountsAssets: {\n      [accountId]: [\n        'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/slip44:501', // Native SOL\n        'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB', // USDT\n        'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v', // USDC\n        'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:3NZ9JMVBmGAqocybic2c7LQCJScmgsAZ6vQqTDzcqmJh', // WBTC\n        'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs', // WETH\n        'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN', // JUPITER\n        'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263', // BONK\n      ],\n    },\n\n    assetsMetadata: {\n      'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/slip44:501': {\n        name: 'Solana',\n        symbol: 'SOL',\n        fungible: true,\n        iconUrl: 'https://cryptologos.cc/logos/solana-sol-logo.png',\n        units: [{ symbol: 'SOL', name: 'Solana', decimals: 9 }],\n      },\n      'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB':\n        {\n          name: 'Tether USD',\n          symbol: 'USDT',\n          fungible: true,\n          iconUrl: 'https://cryptologos.cc/logos/tether-usdt-logo.png',\n          units: [{ symbol: 'USDT', name: 'Tether USD', decimals: 6 }],\n        },\n      'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v':\n        {\n          name: 'USD Coin',\n          symbol: 'USDC',\n          fungible: true,\n          iconUrl: 'https://cryptologos.cc/logos/usd-coin-usdc-logo.png',\n          units: [{ symbol: 'USDC', name: 'USD Coin', decimals: 6 }],\n        },\n      'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:3NZ9JMVBmGAqocybic2c7LQCJScmgsAZ6vQqTDzcqmJh':\n        {\n          name: 'Wrapped Bitcoin',\n          symbol: 'WBTC',\n          fungible: true,\n          iconUrl: 'https://cryptologos.cc/logos/bitcoin-btc-logo.png',\n          units: [{ symbol: 'WBTC', name: 'Wrapped Bitcoin', decimals: 8 }],\n        },\n      'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs':\n        {\n          name: 'Wrapped Ethereum',\n          symbol: 'WETH',\n          fungible: true,\n          iconUrl: 'https://cryptologos.cc/logos/ethereum-eth-logo.png',\n          units: [{ symbol: 'WETH', name: 'Wrapped Ethereum', decimals: 18 }],\n        },\n      'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN':\n        {\n          name: 'Jupiter',\n          symbol: 'JUP',\n          fungible: true,\n          iconUrl: 'https://cryptologos.cc/logos/jupiter-jup-logo.png',\n          units: [{ symbol: 'JUP', name: 'Jupiter', decimals: 6 }],\n        },\n      'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263':\n        {\n          name: 'Bonk',\n          symbol: 'BONK',\n          fungible: true,\n          iconUrl: 'https://cryptologos.cc/logos/bonk-bonk-logo.png',\n          units: [{ symbol: 'BONK', name: 'Bonk', decimals: 5 }],\n        },\n    },\n  };\n}\n"]}
\ No newline at end of file
diff --git a/dist/MultichainAssetsController/fake-assets-data.d.cts b/dist/MultichainAssetsController/fake-assets-data.d.cts
new file mode 100644
index 0000000000000000000000000000000000000000..f9ba5374883e865393b8f8935803fcb1a6acb110
--- /dev/null
+++ b/dist/MultichainAssetsController/fake-assets-data.d.cts
@@ -0,0 +1,3 @@
+import type { MultichainAssetsControllerState } from "./MultichainAssetsController.cjs";
+export declare function buildFakeData(accountId: string): MultichainAssetsControllerState;
+//# sourceMappingURL=fake-assets-data.d.cts.map
\ No newline at end of file
diff --git a/dist/MultichainAssetsController/fake-assets-data.d.cts.map b/dist/MultichainAssetsController/fake-assets-data.d.cts.map
new file mode 100644
index 0000000000000000000000000000000000000000..b172cfd7d014bfc1a843159984c87fde8b0e3eb5
--- /dev/null
+++ b/dist/MultichainAssetsController/fake-assets-data.d.cts.map
@@ -0,0 +1 @@
+{"version":3,"file":"fake-assets-data.d.cts","sourceRoot":"","sources":["../../src/MultichainAssetsController/fake-assets-data.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,+BAA+B,EAAE,yCAAqC;AAGpF,wBAAgB,aAAa,CAC3B,SAAS,EAAE,MAAM,GAChB,+BAA+B,CAwEjC"}
\ No newline at end of file
diff --git a/dist/MultichainAssetsController/fake-assets-data.d.mts b/dist/MultichainAssetsController/fake-assets-data.d.mts
new file mode 100644
index 0000000000000000000000000000000000000000..9af82cb3a29a93c94bbb0d3bdb013aa8701c666d
--- /dev/null
+++ b/dist/MultichainAssetsController/fake-assets-data.d.mts
@@ -0,0 +1,3 @@
+import type { MultichainAssetsControllerState } from "./MultichainAssetsController.mjs";
+export declare function buildFakeData(accountId: string): MultichainAssetsControllerState;
+//# sourceMappingURL=fake-assets-data.d.mts.map
\ No newline at end of file
diff --git a/dist/MultichainAssetsController/fake-assets-data.d.mts.map b/dist/MultichainAssetsController/fake-assets-data.d.mts.map
new file mode 100644
index 0000000000000000000000000000000000000000..b68d5411e932c8333b768d59dfce25f73cf29bc5
--- /dev/null
+++ b/dist/MultichainAssetsController/fake-assets-data.d.mts.map
@@ -0,0 +1 @@
+{"version":3,"file":"fake-assets-data.d.mts","sourceRoot":"","sources":["../../src/MultichainAssetsController/fake-assets-data.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,+BAA+B,EAAE,yCAAqC;AAGpF,wBAAgB,aAAa,CAC3B,SAAS,EAAE,MAAM,GAChB,+BAA+B,CAwEjC"}
\ No newline at end of file
diff --git a/dist/MultichainAssetsController/fake-assets-data.mjs b/dist/MultichainAssetsController/fake-assets-data.mjs
new file mode 100644
index 0000000000000000000000000000000000000000..ce8a6e06c28484cbfd5c011c1d0c69427ea82e1a
--- /dev/null
+++ b/dist/MultichainAssetsController/fake-assets-data.mjs
@@ -0,0 +1,68 @@
+// eslint-disable-next-line jsdoc/require-jsdoc
+export function buildFakeData(accountId) {
+    return {
+        accountsAssets: {
+            [accountId]: [
+                'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/slip44:501',
+                'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB',
+                'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',
+                'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:3NZ9JMVBmGAqocybic2c7LQCJScmgsAZ6vQqTDzcqmJh',
+                'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs',
+                'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN',
+                'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263', // BONK
+            ],
+        },
+        assetsMetadata: {
+            'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/slip44:501': {
+                name: 'Solana',
+                symbol: 'SOL',
+                fungible: true,
+                iconUrl: 'https://cryptologos.cc/logos/solana-sol-logo.png',
+                units: [{ symbol: 'SOL', name: 'Solana', decimals: 9 }],
+            },
+            'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB': {
+                name: 'Tether USD',
+                symbol: 'USDT',
+                fungible: true,
+                iconUrl: 'https://cryptologos.cc/logos/tether-usdt-logo.png',
+                units: [{ symbol: 'USDT', name: 'Tether USD', decimals: 6 }],
+            },
+            'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v': {
+                name: 'USD Coin',
+                symbol: 'USDC',
+                fungible: true,
+                iconUrl: 'https://cryptologos.cc/logos/usd-coin-usdc-logo.png',
+                units: [{ symbol: 'USDC', name: 'USD Coin', decimals: 6 }],
+            },
+            'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:3NZ9JMVBmGAqocybic2c7LQCJScmgsAZ6vQqTDzcqmJh': {
+                name: 'Wrapped Bitcoin',
+                symbol: 'WBTC',
+                fungible: true,
+                iconUrl: 'https://cryptologos.cc/logos/bitcoin-btc-logo.png',
+                units: [{ symbol: 'WBTC', name: 'Wrapped Bitcoin', decimals: 8 }],
+            },
+            'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs': {
+                name: 'Wrapped Ethereum',
+                symbol: 'WETH',
+                fungible: true,
+                iconUrl: 'https://cryptologos.cc/logos/ethereum-eth-logo.png',
+                units: [{ symbol: 'WETH', name: 'Wrapped Ethereum', decimals: 18 }],
+            },
+            'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN': {
+                name: 'Jupiter',
+                symbol: 'JUP',
+                fungible: true,
+                iconUrl: 'https://cryptologos.cc/logos/jupiter-jup-logo.png',
+                units: [{ symbol: 'JUP', name: 'Jupiter', decimals: 6 }],
+            },
+            'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263': {
+                name: 'Bonk',
+                symbol: 'BONK',
+                fungible: true,
+                iconUrl: 'https://cryptologos.cc/logos/bonk-bonk-logo.png',
+                units: [{ symbol: 'BONK', name: 'Bonk', decimals: 5 }],
+            },
+        },
+    };
+}
+//# sourceMappingURL=fake-assets-data.mjs.map
\ No newline at end of file
diff --git a/dist/MultichainAssetsController/fake-assets-data.mjs.map b/dist/MultichainAssetsController/fake-assets-data.mjs.map
new file mode 100644
index 0000000000000000000000000000000000000000..a2a738e02986824e252406621fbcd1d43aec7596
--- /dev/null
+++ b/dist/MultichainAssetsController/fake-assets-data.mjs.map
@@ -0,0 +1 @@
+{"version":3,"file":"fake-assets-data.mjs","sourceRoot":"","sources":["../../src/MultichainAssetsController/fake-assets-data.ts"],"names":[],"mappings":"AAEA,+CAA+C;AAC/C,MAAM,UAAU,aAAa,CAC3B,SAAiB;IAEjB,OAAO;QACL,cAAc,EAAE;YACd,CAAC,SAAS,CAAC,EAAE;gBACX,oDAAoD;gBACpD,4FAA4F;gBAC5F,4FAA4F;gBAC5F,4FAA4F;gBAC5F,4FAA4F;gBAC5F,2FAA2F;gBAC3F,4FAA4F,EAAE,OAAO;aACtG;SACF;QAED,cAAc,EAAE;YACd,oDAAoD,EAAE;gBACpD,IAAI,EAAE,QAAQ;gBACd,MAAM,EAAE,KAAK;gBACb,QAAQ,EAAE,IAAI;gBACd,OAAO,EAAE,kDAAkD;gBAC3D,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC;aACxD;YACD,4FAA4F,EAC1F;gBACE,IAAI,EAAE,YAAY;gBAClB,MAAM,EAAE,MAAM;gBACd,QAAQ,EAAE,IAAI;gBACd,OAAO,EAAE,mDAAmD;gBAC5D,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,YAAY,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC;aAC7D;YACH,4FAA4F,EAC1F;gBACE,IAAI,EAAE,UAAU;gBAChB,MAAM,EAAE,MAAM;gBACd,QAAQ,EAAE,IAAI;gBACd,OAAO,EAAE,qDAAqD;gBAC9D,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC;aAC3D;YACH,4FAA4F,EAC1F;gBACE,IAAI,EAAE,iBAAiB;gBACvB,MAAM,EAAE,MAAM;gBACd,QAAQ,EAAE,IAAI;gBACd,OAAO,EAAE,mDAAmD;gBAC5D,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,iBAAiB,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC;aAClE;YACH,4FAA4F,EAC1F;gBACE,IAAI,EAAE,kBAAkB;gBACxB,MAAM,EAAE,MAAM;gBACd,QAAQ,EAAE,IAAI;gBACd,OAAO,EAAE,oDAAoD;gBAC7D,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,kBAAkB,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC;aACpE;YACH,2FAA2F,EACzF;gBACE,IAAI,EAAE,SAAS;gBACf,MAAM,EAAE,KAAK;gBACb,QAAQ,EAAE,IAAI;gBACd,OAAO,EAAE,mDAAmD;gBAC5D,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,SAAS,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC;aACzD;YACH,4FAA4F,EAC1F;gBACE,IAAI,EAAE,MAAM;gBACZ,MAAM,EAAE,MAAM;gBACd,QAAQ,EAAE,IAAI;gBACd,OAAO,EAAE,iDAAiD;gBAC1D,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC;aACvD;SACJ;KACF,CAAC;AACJ,CAAC","sourcesContent":["import type { MultichainAssetsControllerState } from './MultichainAssetsController';\n\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport function buildFakeData(\n  accountId: string,\n): MultichainAssetsControllerState {\n  return {\n    accountsAssets: {\n      [accountId]: [\n        'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/slip44:501', // Native SOL\n        'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB', // USDT\n        'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v', // USDC\n        'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:3NZ9JMVBmGAqocybic2c7LQCJScmgsAZ6vQqTDzcqmJh', // WBTC\n        'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs', // WETH\n        'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN', // JUPITER\n        'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263', // BONK\n      ],\n    },\n\n    assetsMetadata: {\n      'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/slip44:501': {\n        name: 'Solana',\n        symbol: 'SOL',\n        fungible: true,\n        iconUrl: 'https://cryptologos.cc/logos/solana-sol-logo.png',\n        units: [{ symbol: 'SOL', name: 'Solana', decimals: 9 }],\n      },\n      'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB':\n        {\n          name: 'Tether USD',\n          symbol: 'USDT',\n          fungible: true,\n          iconUrl: 'https://cryptologos.cc/logos/tether-usdt-logo.png',\n          units: [{ symbol: 'USDT', name: 'Tether USD', decimals: 6 }],\n        },\n      'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v':\n        {\n          name: 'USD Coin',\n          symbol: 'USDC',\n          fungible: true,\n          iconUrl: 'https://cryptologos.cc/logos/usd-coin-usdc-logo.png',\n          units: [{ symbol: 'USDC', name: 'USD Coin', decimals: 6 }],\n        },\n      'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:3NZ9JMVBmGAqocybic2c7LQCJScmgsAZ6vQqTDzcqmJh':\n        {\n          name: 'Wrapped Bitcoin',\n          symbol: 'WBTC',\n          fungible: true,\n          iconUrl: 'https://cryptologos.cc/logos/bitcoin-btc-logo.png',\n          units: [{ symbol: 'WBTC', name: 'Wrapped Bitcoin', decimals: 8 }],\n        },\n      'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs':\n        {\n          name: 'Wrapped Ethereum',\n          symbol: 'WETH',\n          fungible: true,\n          iconUrl: 'https://cryptologos.cc/logos/ethereum-eth-logo.png',\n          units: [{ symbol: 'WETH', name: 'Wrapped Ethereum', decimals: 18 }],\n        },\n      'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN':\n        {\n          name: 'Jupiter',\n          symbol: 'JUP',\n          fungible: true,\n          iconUrl: 'https://cryptologos.cc/logos/jupiter-jup-logo.png',\n          units: [{ symbol: 'JUP', name: 'Jupiter', decimals: 6 }],\n        },\n      'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263':\n        {\n          name: 'Bonk',\n          symbol: 'BONK',\n          fungible: true,\n          iconUrl: 'https://cryptologos.cc/logos/bonk-bonk-logo.png',\n          units: [{ symbol: 'BONK', name: 'Bonk', decimals: 5 }],\n        },\n    },\n  };\n}\n"]}
\ No newline at end of file
diff --git a/dist/MultichainAssetsRatesController/MultichainAssetsRatesController.cjs b/dist/MultichainAssetsRatesController/MultichainAssetsRatesController.cjs
new file mode 100644
index 0000000000000000000000000000000000000000..cc6a9d20bb4d9b6c28ab966a00c3ec8dbcea89c8
--- /dev/null
+++ b/dist/MultichainAssetsRatesController/MultichainAssetsRatesController.cjs
@@ -0,0 +1,208 @@
+"use strict";
+var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
+    if (kind === "m") throw new TypeError("Private method is not writable");
+    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
+    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
+    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
+};
+var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
+    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
+    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
+    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
+};
+var _MultiChainAssetsRatesController_instances, _MultiChainAssetsRatesController_mutex, _MultiChainAssetsRatesController_currentCurrency, _MultiChainAssetsRatesController_accountsAssets, _MultiChainAssetsRatesController_isUnlocked, _MultiChainAssetsRatesController_isNonEvmAccount, _MultiChainAssetsRatesController_listMultichainAccounts, _MultiChainAssetsRatesController_listAccounts, _MultiChainAssetsRatesController_getAssetsForAccount, _MultiChainAssetsRatesController_buildConversions, _MultiChainAssetsRatesController_flattenRates, _MultiChainAssetsRatesController_buildUpdatedRates, _MultiChainAssetsRatesController_applyUpdatedRates, _MultiChainAssetsRatesController_handleSnapRequest;
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.MultiChainAssetsRatesController = exports.getDefaultMultichainAssetsRatesControllerState = void 0;
+const keyring_api_1 = require("@metamask/keyring-api");
+const polling_controller_1 = require("@metamask/polling-controller");
+const snaps_utils_1 = require("@metamask/snaps-utils");
+const async_mutex_1 = require("async-mutex");
+const constant_1 = require("./constant.cjs");
+/**
+ * The name of the MultiChainAssetsRatesController.
+ */
+const controllerName = 'MultiChainAssetsRatesController';
+/**
+ * Constructs the default {@link MultichainAssetsRatesController} state. This allows
+ * consumers to provide a partial state object when initializing the controller
+ * and also helps in constructing complete state objects for this controller in
+ * tests.
+ *
+ * @returns The default {@link MultichainAssetsRatesController} state.
+ */
+function getDefaultMultichainAssetsRatesControllerState() {
+    return { conversionRates: {} };
+}
+exports.getDefaultMultichainAssetsRatesControllerState = getDefaultMultichainAssetsRatesControllerState;
+const metadata = {
+    conversionRates: { persist: true, anonymous: true },
+};
+/**
+ * Controller that manages multichain token conversion rates.
+ *
+ * This controller polls for token conversion rates and updates its state.
+ */
+class MultiChainAssetsRatesController extends (0, polling_controller_1.StaticIntervalPollingController)() {
+    /**
+     * Creates an instance of MultiChainAssetsRatesController.
+     *
+     * @param options - Constructor options.
+     * @param options.interval - The polling interval in milliseconds.
+     * @param options.state - The initial state.
+     * @param options.messenger - A reference to the messaging system.
+     */
+    constructor({ interval = 18000, state = {}, messenger, }) {
+        var _a, _b;
+        super({
+            name: controllerName,
+            messenger,
+            state: {
+                ...getDefaultMultichainAssetsRatesControllerState(),
+                ...state,
+            },
+            metadata,
+        });
+        _MultiChainAssetsRatesController_instances.add(this);
+        _MultiChainAssetsRatesController_mutex.set(this, new async_mutex_1.Mutex());
+        _MultiChainAssetsRatesController_currentCurrency.set(this, void 0);
+        _MultiChainAssetsRatesController_accountsAssets.set(this, void 0);
+        _MultiChainAssetsRatesController_isUnlocked.set(this, true);
+        this.setIntervalLength(interval);
+        // Subscribe to keyring lock/unlock events.
+        this.messagingSystem.subscribe('KeyringController:lock', () => {
+            __classPrivateFieldSet(this, _MultiChainAssetsRatesController_isUnlocked, false, "f");
+        });
+        this.messagingSystem.subscribe('KeyringController:unlock', () => {
+            __classPrivateFieldSet(this, _MultiChainAssetsRatesController_isUnlocked, true, "f");
+        });
+        (_a = this, { accountsAssets: ({ set value(_c) { __classPrivateFieldSet(_a, _MultiChainAssetsRatesController_accountsAssets, _c, "f"); } }).value } = this.messagingSystem.call('MultichainAssetsController:getState'));
+        console.log('MultichainAssetsController state 1 .......', this.messagingSystem.call('MultichainAssetsController:getState'));
+        console.log('MultiChainBalancesController state 1 .......', this.messagingSystem.call('MultichainBalancesController:getState'));
+        (_b = this, { currentCurrency: ({ set value(_c) { __classPrivateFieldSet(_b, _MultiChainAssetsRatesController_currentCurrency, _c, "f"); } }).value } = this.messagingSystem.call('CurrencyRateController:getState'));
+        this.messagingSystem.subscribe('CurrencyRateController:stateChange', async (currencyRatesState) => {
+            __classPrivateFieldSet(this, _MultiChainAssetsRatesController_currentCurrency, currencyRatesState.currentCurrency, "f");
+            await this.updateAssetsRates();
+        });
+        this.messagingSystem.subscribe('MultichainAssetsController:stateChange', async (multiChainAssetsState) => {
+            __classPrivateFieldSet(this, _MultiChainAssetsRatesController_accountsAssets, multiChainAssetsState.accountsAssets, "f");
+            await this.updateAssetsRates();
+        });
+    }
+    /**
+     * Executes a poll by updating token conversion rates for the current account.
+     *
+     * @returns A promise that resolves when the polling completes.
+     */
+    async _executePoll() {
+        await this.updateAssetsRates();
+    }
+    /**
+     * Determines whether the controller is active.
+     *
+     * @returns True if the keyring is unlocked; otherwise, false.
+     */
+    get isActive() {
+        return __classPrivateFieldGet(this, _MultiChainAssetsRatesController_isUnlocked, "f");
+    }
+    /**
+     * Updates token conversion rates for each non-EVM account.
+     *
+     * @returns A promise that resolves when the rates are updated.
+     */
+    async updateAssetsRates() {
+        const releaseLock = await __classPrivateFieldGet(this, _MultiChainAssetsRatesController_mutex, "f").acquire();
+        return (async () => {
+            if (!this.isActive) {
+                return;
+            }
+            const accounts = __classPrivateFieldGet(this, _MultiChainAssetsRatesController_instances, "m", _MultiChainAssetsRatesController_listAccounts).call(this);
+            for (const account of accounts) {
+                const assets = __classPrivateFieldGet(this, _MultiChainAssetsRatesController_instances, "m", _MultiChainAssetsRatesController_getAssetsForAccount).call(this, account.id);
+                // Build the conversions array
+                const conversions = __classPrivateFieldGet(this, _MultiChainAssetsRatesController_instances, "m", _MultiChainAssetsRatesController_buildConversions).call(this, assets);
+                // Retrieve rates from Snap
+                const accountRates = await __classPrivateFieldGet(this, _MultiChainAssetsRatesController_instances, "m", _MultiChainAssetsRatesController_handleSnapRequest).call(this, {
+                    snapId: account?.metadata.snap?.id,
+                    handler: snaps_utils_1.HandlerType.OnAssetsConversion,
+                    params: conversions,
+                });
+                // Flatten nested rates if needed
+                const flattenedRates = __classPrivateFieldGet(this, _MultiChainAssetsRatesController_instances, "m", _MultiChainAssetsRatesController_flattenRates).call(this, accountRates);
+                // Build the updatedRates object for these assets
+                const updatedRates = __classPrivateFieldGet(this, _MultiChainAssetsRatesController_instances, "m", _MultiChainAssetsRatesController_buildUpdatedRates).call(this, assets, flattenedRates);
+                // Apply these updated rates to controller state
+                __classPrivateFieldGet(this, _MultiChainAssetsRatesController_instances, "m", _MultiChainAssetsRatesController_applyUpdatedRates).call(this, updatedRates);
+            }
+        })().finally(() => {
+            releaseLock();
+        });
+    }
+}
+exports.MultiChainAssetsRatesController = MultiChainAssetsRatesController;
+_MultiChainAssetsRatesController_mutex = new WeakMap(), _MultiChainAssetsRatesController_currentCurrency = new WeakMap(), _MultiChainAssetsRatesController_accountsAssets = new WeakMap(), _MultiChainAssetsRatesController_isUnlocked = new WeakMap(), _MultiChainAssetsRatesController_instances = new WeakSet(), _MultiChainAssetsRatesController_isNonEvmAccount = function _MultiChainAssetsRatesController_isNonEvmAccount(account) {
+    return (!(0, keyring_api_1.isEvmAccountType)(account.type) && account.metadata.snap !== undefined);
+}, _MultiChainAssetsRatesController_listMultichainAccounts = function _MultiChainAssetsRatesController_listMultichainAccounts() {
+    return this.messagingSystem.call('AccountsController:listMultichainAccounts');
+}, _MultiChainAssetsRatesController_listAccounts = function _MultiChainAssetsRatesController_listAccounts() {
+    const accounts = __classPrivateFieldGet(this, _MultiChainAssetsRatesController_instances, "m", _MultiChainAssetsRatesController_listMultichainAccounts).call(this);
+    return accounts.filter((account) => __classPrivateFieldGet(this, _MultiChainAssetsRatesController_instances, "m", _MultiChainAssetsRatesController_isNonEvmAccount).call(this, account));
+}, _MultiChainAssetsRatesController_getAssetsForAccount = function _MultiChainAssetsRatesController_getAssetsForAccount(accountId) {
+    return __classPrivateFieldGet(this, _MultiChainAssetsRatesController_accountsAssets, "f")?.[accountId] ?? [];
+}, _MultiChainAssetsRatesController_buildConversions = function _MultiChainAssetsRatesController_buildConversions(assets) {
+    const currency = constant_1.MAP_CAIP_CURRENCIES[__classPrivateFieldGet(this, _MultiChainAssetsRatesController_currentCurrency, "f")] ?? constant_1.MAP_CAIP_CURRENCIES.usd;
+    return {
+        conversions: assets.map((asset) => ({
+            from: asset,
+            to: currency,
+        })),
+    };
+}, _MultiChainAssetsRatesController_flattenRates = function _MultiChainAssetsRatesController_flattenRates(assetsConversionResponse) {
+    const { conversionRates } = assetsConversionResponse;
+    return Object.fromEntries(Object.entries(conversionRates).map(([asset, nestedObj]) => {
+        // e.g., nestedObj might look like: { "swift:0/iso4217:EUR": { rate, conversionTime } }
+        const singleValue = Object.values(nestedObj)[0];
+        return [asset, singleValue];
+    }));
+}, _MultiChainAssetsRatesController_buildUpdatedRates = function _MultiChainAssetsRatesController_buildUpdatedRates(assets, flattenedRates) {
+    const updatedRates = {};
+    for (const asset of assets) {
+        if (flattenedRates[asset]) {
+            updatedRates[asset] = {
+                ...flattenedRates[asset],
+                currency: constant_1.MAP_CAIP_CURRENCIES[__classPrivateFieldGet(this, _MultiChainAssetsRatesController_currentCurrency, "f")] ??
+                    constant_1.MAP_CAIP_CURRENCIES.usd,
+            };
+        }
+    }
+    return updatedRates;
+}, _MultiChainAssetsRatesController_applyUpdatedRates = function _MultiChainAssetsRatesController_applyUpdatedRates(updatedRates) {
+    this.update((state) => {
+        state.conversionRates = {
+            ...state.conversionRates,
+            ...updatedRates,
+        };
+    });
+    console.log('updatedRates .......', this.state);
+}, _MultiChainAssetsRatesController_handleSnapRequest = 
+/**
+ * Forwards a Snap request to the SnapController.
+ *
+ * @param args - The request parameters.
+ * @param args.snapId - The ID of the Snap.
+ * @param args.handler - The handler type.
+ * @param args.params - The asset conversions.
+ * @returns A promise that resolves with the account rates.
+ */
+async function _MultiChainAssetsRatesController_handleSnapRequest({ snapId, handler, params, }) {
+    return this.messagingSystem.call('SnapController:handleRequest', {
+        snapId,
+        origin: 'metamask',
+        handler,
+        request: {
+            jsonrpc: '2.0',
+            method: handler,
+            params,
+        },
+    });
+};
+//# sourceMappingURL=MultichainAssetsRatesController.cjs.map
\ No newline at end of file
diff --git a/dist/MultichainAssetsRatesController/MultichainAssetsRatesController.cjs.map b/dist/MultichainAssetsRatesController/MultichainAssetsRatesController.cjs.map
new file mode 100644
index 0000000000000000000000000000000000000000..ab7596c44f6de1272aa82ae7906cdef07b609270
--- /dev/null
+++ b/dist/MultichainAssetsRatesController/MultichainAssetsRatesController.cjs.map
@@ -0,0 +1 @@
+{"version":3,"file":"MultichainAssetsRatesController.cjs","sourceRoot":"","sources":["../../src/MultichainAssetsRatesController/MultichainAssetsRatesController.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  AccountsControllerListMultichainAccountsAction,\n  AccountsControllerAccountAddedEvent,\n} from '@metamask/accounts-controller';\nimport type {\n  RestrictedMessenger,\n  ControllerStateChangeEvent,\n  ControllerGetStateAction,\n} from '@metamask/base-controller';\nimport { type CaipAssetType, isEvmAccountType } from '@metamask/keyring-api';\nimport type {\n  KeyringControllerLockEvent,\n  KeyringControllerUnlockEvent,\n} from '@metamask/keyring-controller';\nimport type { InternalAccount } from '@metamask/keyring-internal-api';\nimport { StaticIntervalPollingController } from '@metamask/polling-controller';\nimport type { HandleSnapRequest } from '@metamask/snaps-controllers';\nimport type {\n  SnapId,\n  AssetConversion,\n  OnAssetsConversionArguments,\n  OnAssetsConversionResponse,\n} from '@metamask/snaps-sdk';\nimport { HandlerType } from '@metamask/snaps-utils';\nimport { Mutex } from 'async-mutex';\nimport type { Draft } from 'immer';\n\nimport { MAP_CAIP_CURRENCIES } from './constant';\nimport type {\n  CurrencyRateState,\n  CurrencyRateStateChange,\n  GetCurrencyRateState,\n} from '../CurrencyRateController';\nimport type {\n  MultichainAssetsControllerGetStateAction,\n  MultichainAssetsControllerState,\n  MultichainAssetsControllerStateChangeEvent,\n} from '../MultichainAssetsController';\nimport type { MultichainBalancesControllerGetStateAction } from '../MultichainBalancesController';\n\n/**\n * The name of the MultiChainAssetsRatesController.\n */\nconst controllerName = 'MultiChainAssetsRatesController';\n\n/**\n * State used by the MultiChainAssetsRatesController to cache token conversion rates.\n */\nexport type MultichainAssetsRatesControllerState = {\n  conversionRates: Record<CaipAssetType, AssetConversion>;\n};\n\n/**\n * Returns the state of the MultiChainAssetsRatesController.\n */\nexport type MultichainAssetsRatesControllerGetStateAction =\n  ControllerGetStateAction<\n    typeof controllerName,\n    MultichainAssetsRatesControllerState\n  >;\n\n/**\n * Action to update the rates of all supported tokens.\n */\nexport type MultichainAssetsRatesControllerUpdateRatesAction = {\n  type: `${typeof controllerName}:updateAssetsRates`;\n  handler: MultiChainAssetsRatesController['updateAssetsRates'];\n};\n\n/**\n * Constructs the default {@link MultichainAssetsRatesController} state. This allows\n * consumers to provide a partial state object when initializing the controller\n * and also helps in constructing complete state objects for this controller in\n * tests.\n *\n * @returns The default {@link MultichainAssetsRatesController} state.\n */\nexport function getDefaultMultichainAssetsRatesControllerState(): MultichainAssetsRatesControllerState {\n  return { conversionRates: {} };\n}\n\n/**\n * Event emitted when the state of the MultiChainAssetsRatesController changes.\n */\nexport type MultichainAssetsRatesControllerStateChange =\n  ControllerStateChangeEvent<\n    typeof controllerName,\n    MultichainAssetsRatesControllerState\n  >;\n\n/**\n * Actions exposed by the MultiChainAssetsRatesController.\n */\nexport type MultichainAssetsRatesControllerActions =\n  | MultichainAssetsRatesControllerGetStateAction\n  | MultichainAssetsRatesControllerUpdateRatesAction;\n\n/**\n * Events emitted by MultiChainAssetsRatesController.\n */\nexport type MultichainAssetsRatesControllerEvents =\n  MultichainAssetsRatesControllerStateChange;\n\n/**\n * Actions that this controller is allowed to call.\n */\nexport type AllowedActions =\n  | HandleSnapRequest\n  | AccountsControllerListMultichainAccountsAction\n  | GetCurrencyRateState\n  | MultichainAssetsControllerGetStateAction\n  | MultichainBalancesControllerGetStateAction;\n/**\n * Events that this controller is allowed to subscribe to.\n */\nexport type AllowedEvents =\n  | KeyringControllerLockEvent\n  | KeyringControllerUnlockEvent\n  | AccountsControllerAccountAddedEvent\n  | CurrencyRateStateChange\n  | MultichainAssetsControllerStateChangeEvent;\n\n/**\n * Messenger type for the MultiChainAssetsRatesController.\n */\nexport type MultichainAssetsRatesControllerMessenger = RestrictedMessenger<\n  typeof controllerName,\n  MultichainAssetsRatesControllerActions | AllowedActions,\n  MultichainAssetsRatesControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\n/**\n * The input for starting polling in MultiChainAssetsRatesController.\n */\nexport type MultiChainAssetsRatesPollingInput = {\n  accountId: string;\n};\n\nconst metadata = {\n  conversionRates: { persist: true, anonymous: true },\n};\n\n/**\n * Controller that manages multichain token conversion rates.\n *\n * This controller polls for token conversion rates and updates its state.\n */\nexport class MultiChainAssetsRatesController extends StaticIntervalPollingController<MultiChainAssetsRatesPollingInput>()<\n  typeof controllerName,\n  MultichainAssetsRatesControllerState,\n  MultichainAssetsRatesControllerMessenger\n> {\n  readonly #mutex = new Mutex();\n\n  #currentCurrency: CurrencyRateState['currentCurrency'];\n\n  #accountsAssets: MultichainAssetsControllerState['accountsAssets'];\n\n  #isUnlocked = true;\n\n  /**\n   * Creates an instance of MultiChainAssetsRatesController.\n   *\n   * @param options - Constructor options.\n   * @param options.interval - The polling interval in milliseconds.\n   * @param options.state - The initial state.\n   * @param options.messenger - A reference to the messaging system.\n   */\n  constructor({\n    interval = 18000,\n    state = {},\n    messenger,\n  }: {\n    interval?: number;\n    state?: Partial<MultichainAssetsRatesControllerState>;\n    messenger: MultichainAssetsRatesControllerMessenger;\n  }) {\n    super({\n      name: controllerName,\n      messenger,\n      state: {\n        ...getDefaultMultichainAssetsRatesControllerState(),\n        ...state,\n      },\n      metadata,\n    });\n\n    this.setIntervalLength(interval);\n\n    // Subscribe to keyring lock/unlock events.\n    this.messagingSystem.subscribe('KeyringController:lock', () => {\n      this.#isUnlocked = false;\n    });\n    this.messagingSystem.subscribe('KeyringController:unlock', () => {\n      this.#isUnlocked = true;\n    });\n\n    ({ accountsAssets: this.#accountsAssets } = this.messagingSystem.call(\n      'MultichainAssetsController:getState',\n    ));\n\n    console.log(\n      'MultichainAssetsController state 1 .......',\n      this.messagingSystem.call('MultichainAssetsController:getState'),\n    );\n\n    console.log(\n      'MultiChainBalancesController state 1 .......',\n      this.messagingSystem.call('MultichainBalancesController:getState'),\n    );\n\n    ({ currentCurrency: this.#currentCurrency } = this.messagingSystem.call(\n      'CurrencyRateController:getState',\n    ));\n\n    this.messagingSystem.subscribe(\n      'CurrencyRateController:stateChange',\n      async (currencyRatesState: CurrencyRateState) => {\n        this.#currentCurrency = currencyRatesState.currentCurrency;\n        await this.updateAssetsRates();\n      },\n    );\n\n    this.messagingSystem.subscribe(\n      'MultichainAssetsController:stateChange',\n      async (multiChainAssetsState: MultichainAssetsControllerState) => {\n        this.#accountsAssets = multiChainAssetsState.accountsAssets;\n        await this.updateAssetsRates();\n      },\n    );\n  }\n\n  /**\n   * Executes a poll by updating token conversion rates for the current account.\n   *\n   * @returns A promise that resolves when the polling completes.\n   */\n  async _executePoll(): Promise<void> {\n    await this.updateAssetsRates();\n  }\n\n  /**\n   * Determines whether the controller is active.\n   *\n   * @returns True if the keyring is unlocked; otherwise, false.\n   */\n  get isActive(): boolean {\n    return this.#isUnlocked;\n  }\n\n  /**\n   * Checks if an account is a non-EVM account with a Snap.\n   *\n   * @param account - The account to check.\n   * @returns True if the account is non-EVM and has Snap metadata; otherwise, false.\n   */\n  #isNonEvmAccount(account: InternalAccount): boolean {\n    return (\n      !isEvmAccountType(account.type) && account.metadata.snap !== undefined\n    );\n  }\n\n  /**\n   * Retrieves all multichain accounts from the AccountsController.\n   *\n   * @returns An array of internal accounts.\n   */\n  #listMultichainAccounts(): InternalAccount[] {\n    return this.messagingSystem.call(\n      'AccountsController:listMultichainAccounts',\n    );\n  }\n\n  /**\n   * Filters and returns non-EVM accounts that should have balances.\n   *\n   * @returns An array of non-EVM internal accounts.\n   */\n  #listAccounts(): InternalAccount[] {\n    const accounts = this.#listMultichainAccounts();\n    return accounts.filter((account) => this.#isNonEvmAccount(account));\n  }\n\n  /**\n   * Updates token conversion rates for each non-EVM account.\n   *\n   * @returns A promise that resolves when the rates are updated.\n   */\n  async updateAssetsRates(): Promise<void> {\n    const releaseLock = await this.#mutex.acquire();\n\n    return (async () => {\n      if (!this.isActive) {\n        return;\n      }\n      const accounts = this.#listAccounts();\n\n      for (const account of accounts) {\n        const assets = this.#getAssetsForAccount(account.id);\n\n        // Build the conversions array\n        const conversions = this.#buildConversions(assets);\n\n        // Retrieve rates from Snap\n        const accountRates = await this.#handleSnapRequest({\n          snapId: account?.metadata.snap?.id as SnapId,\n          handler: HandlerType.OnAssetsConversion,\n          params: conversions,\n        });\n\n        // Flatten nested rates if needed\n        const flattenedRates = this.#flattenRates(accountRates);\n\n        // Build the updatedRates object for these assets\n        const updatedRates = this.#buildUpdatedRates(assets, flattenedRates);\n        // Apply these updated rates to controller state\n        this.#applyUpdatedRates(updatedRates);\n      }\n    })().finally(() => {\n      releaseLock();\n    });\n  }\n\n  /**\n   * Returns the array of CAIP-19 assets for the given account ID.\n   * If none are found, returns an empty array.\n   *\n   * @param accountId - The account ID to get the assets for.\n   * @returns An array of CAIP-19 assets.\n   */\n  #getAssetsForAccount(accountId: string): CaipAssetType[] {\n    return this.#accountsAssets?.[accountId] ?? [];\n  }\n\n  /**\n   * Builds a conversions array (from each asset → the current currency).\n   *\n   * @param assets - The assets to build the conversions for.\n   * @returns A conversions array.\n   */\n  #buildConversions(assets: CaipAssetType[]): OnAssetsConversionArguments {\n    const currency =\n      MAP_CAIP_CURRENCIES[this.#currentCurrency] ?? MAP_CAIP_CURRENCIES.usd;\n    return {\n      conversions: assets.map((asset) => ({\n        from: asset,\n        to: currency,\n      })),\n    };\n  }\n\n  /**\n   * Flattens any nested structure in the conversion rates returned by Snap.\n   *\n   * @param assetsConversionResponse - The conversion rates to flatten.\n   * @returns A flattened rates object.\n   */\n  #flattenRates(\n    assetsConversionResponse: OnAssetsConversionResponse,\n  ): Record<CaipAssetType, AssetConversion | null> {\n    const { conversionRates } = assetsConversionResponse;\n\n    return Object.fromEntries(\n      Object.entries(conversionRates).map(([asset, nestedObj]) => {\n        // e.g., nestedObj might look like: { \"swift:0/iso4217:EUR\": { rate, conversionTime } }\n        const singleValue = Object.values(nestedObj)[0];\n        return [asset, singleValue];\n      }),\n    );\n  }\n\n  /**\n   * Builds a rates object that covers all given assets, ensuring that\n   * any asset not returned by Snap is set to null for both `rate` and `conversionTime`.\n   *\n   * @param assets - The assets to build the rates for.\n   * @param flattenedRates - The rates to merge.\n   * @returns A rates object that covers all given assets.\n   */\n  #buildUpdatedRates(\n    assets: CaipAssetType[],\n    flattenedRates: Record<CaipAssetType, AssetConversion | null>,\n  ): Record<string, AssetConversion & { currency: CaipAssetType }> {\n    const updatedRates: Record<\n      CaipAssetType,\n      AssetConversion & { currency: CaipAssetType }\n    > = {};\n\n    for (const asset of assets) {\n      if (flattenedRates[asset]) {\n        updatedRates[asset] = {\n          ...(flattenedRates[asset] as AssetConversion),\n          currency:\n            MAP_CAIP_CURRENCIES[this.#currentCurrency] ??\n            MAP_CAIP_CURRENCIES.usd,\n        };\n      }\n    }\n    return updatedRates;\n  }\n\n  /**\n   * Merges the new rates into the controller’s state.\n   *\n   * @param updatedRates - The new rates to merge.\n   */\n  #applyUpdatedRates(\n    updatedRates: Record<\n      string,\n      { rate: string | null; conversionTime: number | null }\n    >,\n  ): void {\n    this.update((state: Draft<MultichainAssetsRatesControllerState>) => {\n      state.conversionRates = {\n        ...state.conversionRates,\n        ...updatedRates,\n      };\n    });\n    console.log('updatedRates .......', this.state);\n  }\n\n  /**\n   * Forwards a Snap request to the SnapController.\n   *\n   * @param args - The request parameters.\n   * @param args.snapId - The ID of the Snap.\n   * @param args.handler - The handler type.\n   * @param args.params - The asset conversions.\n   * @returns A promise that resolves with the account rates.\n   */\n  async #handleSnapRequest({\n    snapId,\n    handler,\n    params,\n  }: {\n    snapId: SnapId;\n    handler: HandlerType;\n    params: OnAssetsConversionArguments;\n  }): Promise<OnAssetsConversionResponse> {\n    return this.messagingSystem.call('SnapController:handleRequest', {\n      snapId,\n      origin: 'metamask',\n      handler,\n      request: {\n        jsonrpc: '2.0',\n        method: handler,\n        params,\n      },\n    }) as Promise<OnAssetsConversionResponse>;\n  }\n}\n"]}
\ No newline at end of file
diff --git a/dist/MultichainAssetsRatesController/MultichainAssetsRatesController.d.cts b/dist/MultichainAssetsRatesController/MultichainAssetsRatesController.d.cts
new file mode 100644
index 0000000000000000000000000000000000000000..f9749a4acc86da8b166672a93c162ff59a2e9d81
--- /dev/null
+++ b/dist/MultichainAssetsRatesController/MultichainAssetsRatesController.d.cts
@@ -0,0 +1,125 @@
+import type { AccountsControllerListMultichainAccountsAction, AccountsControllerAccountAddedEvent } from "@metamask/accounts-controller";
+import type { RestrictedMessenger, ControllerStateChangeEvent, ControllerGetStateAction } from "@metamask/base-controller";
+import { type CaipAssetType } from "@metamask/keyring-api";
+import type { KeyringControllerLockEvent, KeyringControllerUnlockEvent } from "@metamask/keyring-controller";
+import type { HandleSnapRequest } from "@metamask/snaps-controllers";
+import type { AssetConversion } from "@metamask/snaps-sdk";
+import type { CurrencyRateStateChange, GetCurrencyRateState } from "../CurrencyRateController.cjs";
+import type { MultichainAssetsControllerGetStateAction, MultichainAssetsControllerStateChangeEvent } from "../MultichainAssetsController/index.cjs";
+import type { MultichainBalancesControllerGetStateAction } from "../MultichainBalancesController/index.cjs";
+/**
+ * The name of the MultiChainAssetsRatesController.
+ */
+declare const controllerName = "MultiChainAssetsRatesController";
+/**
+ * State used by the MultiChainAssetsRatesController to cache token conversion rates.
+ */
+export type MultichainAssetsRatesControllerState = {
+    conversionRates: Record<CaipAssetType, AssetConversion>;
+};
+/**
+ * Returns the state of the MultiChainAssetsRatesController.
+ */
+export type MultichainAssetsRatesControllerGetStateAction = ControllerGetStateAction<typeof controllerName, MultichainAssetsRatesControllerState>;
+/**
+ * Action to update the rates of all supported tokens.
+ */
+export type MultichainAssetsRatesControllerUpdateRatesAction = {
+    type: `${typeof controllerName}:updateAssetsRates`;
+    handler: MultiChainAssetsRatesController['updateAssetsRates'];
+};
+/**
+ * Constructs the default {@link MultichainAssetsRatesController} state. This allows
+ * consumers to provide a partial state object when initializing the controller
+ * and also helps in constructing complete state objects for this controller in
+ * tests.
+ *
+ * @returns The default {@link MultichainAssetsRatesController} state.
+ */
+export declare function getDefaultMultichainAssetsRatesControllerState(): MultichainAssetsRatesControllerState;
+/**
+ * Event emitted when the state of the MultiChainAssetsRatesController changes.
+ */
+export type MultichainAssetsRatesControllerStateChange = ControllerStateChangeEvent<typeof controllerName, MultichainAssetsRatesControllerState>;
+/**
+ * Actions exposed by the MultiChainAssetsRatesController.
+ */
+export type MultichainAssetsRatesControllerActions = MultichainAssetsRatesControllerGetStateAction | MultichainAssetsRatesControllerUpdateRatesAction;
+/**
+ * Events emitted by MultiChainAssetsRatesController.
+ */
+export type MultichainAssetsRatesControllerEvents = MultichainAssetsRatesControllerStateChange;
+/**
+ * Actions that this controller is allowed to call.
+ */
+export type AllowedActions = HandleSnapRequest | AccountsControllerListMultichainAccountsAction | GetCurrencyRateState | MultichainAssetsControllerGetStateAction | MultichainBalancesControllerGetStateAction;
+/**
+ * Events that this controller is allowed to subscribe to.
+ */
+export type AllowedEvents = KeyringControllerLockEvent | KeyringControllerUnlockEvent | AccountsControllerAccountAddedEvent | CurrencyRateStateChange | MultichainAssetsControllerStateChangeEvent;
+/**
+ * Messenger type for the MultiChainAssetsRatesController.
+ */
+export type MultichainAssetsRatesControllerMessenger = RestrictedMessenger<typeof controllerName, MultichainAssetsRatesControllerActions | AllowedActions, MultichainAssetsRatesControllerEvents | AllowedEvents, AllowedActions['type'], AllowedEvents['type']>;
+/**
+ * The input for starting polling in MultiChainAssetsRatesController.
+ */
+export type MultiChainAssetsRatesPollingInput = {
+    accountId: string;
+};
+declare const MultiChainAssetsRatesController_base: (abstract new (...args: any[]) => {
+    readonly "__#13@#intervalIds": Record<string, NodeJS.Timeout>;
+    "__#13@#intervalLength": number | undefined;
+    setIntervalLength(intervalLength: number): void;
+    getIntervalLength(): number | undefined;
+    _startPolling(input: MultiChainAssetsRatesPollingInput): void;
+    _stopPollingByPollingTokenSetId(key: string): void;
+    readonly "__#3@#pollingTokenSets": Map<string, Set<string>>;
+    "__#3@#callbacks": Map<string, Set<(input: MultiChainAssetsRatesPollingInput) => void>>;
+    _executePoll(input: MultiChainAssetsRatesPollingInput): Promise<void>;
+    startPolling(input: MultiChainAssetsRatesPollingInput): string;
+    stopAllPolling(): void;
+    stopPollingByPollingToken(pollingToken: string): void;
+    onPollingComplete(input: MultiChainAssetsRatesPollingInput, callback: (input: MultiChainAssetsRatesPollingInput) => void): void;
+}) & typeof import("@metamask/base-controller").BaseController;
+/**
+ * Controller that manages multichain token conversion rates.
+ *
+ * This controller polls for token conversion rates and updates its state.
+ */
+export declare class MultiChainAssetsRatesController extends MultiChainAssetsRatesController_base<typeof controllerName, MultichainAssetsRatesControllerState, MultichainAssetsRatesControllerMessenger> {
+    #private;
+    /**
+     * Creates an instance of MultiChainAssetsRatesController.
+     *
+     * @param options - Constructor options.
+     * @param options.interval - The polling interval in milliseconds.
+     * @param options.state - The initial state.
+     * @param options.messenger - A reference to the messaging system.
+     */
+    constructor({ interval, state, messenger, }: {
+        interval?: number;
+        state?: Partial<MultichainAssetsRatesControllerState>;
+        messenger: MultichainAssetsRatesControllerMessenger;
+    });
+    /**
+     * Executes a poll by updating token conversion rates for the current account.
+     *
+     * @returns A promise that resolves when the polling completes.
+     */
+    _executePoll(): Promise<void>;
+    /**
+     * Determines whether the controller is active.
+     *
+     * @returns True if the keyring is unlocked; otherwise, false.
+     */
+    get isActive(): boolean;
+    /**
+     * Updates token conversion rates for each non-EVM account.
+     *
+     * @returns A promise that resolves when the rates are updated.
+     */
+    updateAssetsRates(): Promise<void>;
+}
+export {};
+//# sourceMappingURL=MultichainAssetsRatesController.d.cts.map
\ No newline at end of file
diff --git a/dist/MultichainAssetsRatesController/MultichainAssetsRatesController.d.cts.map b/dist/MultichainAssetsRatesController/MultichainAssetsRatesController.d.cts.map
new file mode 100644
index 0000000000000000000000000000000000000000..351a060db4b7dcbf75963edfb75afbbe1e0a07cf
--- /dev/null
+++ b/dist/MultichainAssetsRatesController/MultichainAssetsRatesController.d.cts.map
@@ -0,0 +1 @@
+{"version":3,"file":"MultichainAssetsRatesController.d.cts","sourceRoot":"","sources":["../../src/MultichainAssetsRatesController/MultichainAssetsRatesController.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EACV,8CAA8C,EAC9C,mCAAmC,EACpC,sCAAsC;AACvC,OAAO,KAAK,EACV,mBAAmB,EACnB,0BAA0B,EAC1B,wBAAwB,EACzB,kCAAkC;AACnC,OAAO,EAAE,KAAK,aAAa,EAAoB,8BAA8B;AAC7E,OAAO,KAAK,EACV,0BAA0B,EAC1B,4BAA4B,EAC7B,qCAAqC;AAGtC,OAAO,KAAK,EAAE,iBAAiB,EAAE,oCAAoC;AACrE,OAAO,KAAK,EAEV,eAAe,EAGhB,4BAA4B;AAM7B,OAAO,KAAK,EAEV,uBAAuB,EACvB,oBAAoB,EACrB,sCAAkC;AACnC,OAAO,KAAK,EACV,wCAAwC,EAExC,0CAA0C,EAC3C,gDAAsC;AACvC,OAAO,KAAK,EAAE,0CAA0C,EAAE,kDAAwC;AAElG;;GAEG;AACH,QAAA,MAAM,cAAc,oCAAoC,CAAC;AAEzD;;GAEG;AACH,MAAM,MAAM,oCAAoC,GAAG;IACjD,eAAe,EAAE,MAAM,CAAC,aAAa,EAAE,eAAe,CAAC,CAAC;CACzD,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,6CAA6C,GACvD,wBAAwB,CACtB,OAAO,cAAc,EACrB,oCAAoC,CACrC,CAAC;AAEJ;;GAEG;AACH,MAAM,MAAM,gDAAgD,GAAG;IAC7D,IAAI,EAAE,GAAG,OAAO,cAAc,oBAAoB,CAAC;IACnD,OAAO,EAAE,+BAA+B,CAAC,mBAAmB,CAAC,CAAC;CAC/D,CAAC;AAEF;;;;;;;GAOG;AACH,wBAAgB,8CAA8C,IAAI,oCAAoC,CAErG;AAED;;GAEG;AACH,MAAM,MAAM,0CAA0C,GACpD,0BAA0B,CACxB,OAAO,cAAc,EACrB,oCAAoC,CACrC,CAAC;AAEJ;;GAEG;AACH,MAAM,MAAM,sCAAsC,GAC9C,6CAA6C,GAC7C,gDAAgD,CAAC;AAErD;;GAEG;AACH,MAAM,MAAM,qCAAqC,GAC/C,0CAA0C,CAAC;AAE7C;;GAEG;AACH,MAAM,MAAM,cAAc,GACtB,iBAAiB,GACjB,8CAA8C,GAC9C,oBAAoB,GACpB,wCAAwC,GACxC,0CAA0C,CAAC;AAC/C;;GAEG;AACH,MAAM,MAAM,aAAa,GACrB,0BAA0B,GAC1B,4BAA4B,GAC5B,mCAAmC,GACnC,uBAAuB,GACvB,0CAA0C,CAAC;AAE/C;;GAEG;AACH,MAAM,MAAM,wCAAwC,GAAG,mBAAmB,CACxE,OAAO,cAAc,EACrB,sCAAsC,GAAG,cAAc,EACvD,qCAAqC,GAAG,aAAa,EACrD,cAAc,CAAC,MAAM,CAAC,EACtB,aAAa,CAAC,MAAM,CAAC,CACtB,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,iCAAiC,GAAG;IAC9C,SAAS,EAAE,MAAM,CAAC;CACnB,CAAC;;;;;;;;;;;;;;;;AAMF;;;;GAIG;AACH,qBAAa,+BAAgC,SAAQ,qCACnD,OAAO,cAAc,EACrB,oCAAoC,EACpC,wCAAwC,CACzC;;IASC;;;;;;;OAOG;gBACS,EACV,QAAgB,EAChB,KAAU,EACV,SAAS,GACV,EAAE;QACD,QAAQ,CAAC,EAAE,MAAM,CAAC;QAClB,KAAK,CAAC,EAAE,OAAO,CAAC,oCAAoC,CAAC,CAAC;QACtD,SAAS,EAAE,wCAAwC,CAAC;KACrD;IAwDD;;;;OAIG;IACG,YAAY,IAAI,OAAO,CAAC,IAAI,CAAC;IAInC;;;;OAIG;IACH,IAAI,QAAQ,IAAI,OAAO,CAEtB;IAmCD;;;;OAIG;IACG,iBAAiB,IAAI,OAAO,CAAC,IAAI,CAAC;CAkKzC"}
\ No newline at end of file
diff --git a/dist/MultichainAssetsRatesController/MultichainAssetsRatesController.d.mts b/dist/MultichainAssetsRatesController/MultichainAssetsRatesController.d.mts
new file mode 100644
index 0000000000000000000000000000000000000000..0fb78a34f984ff19b74e126d6cddfcc96f5e1d91
--- /dev/null
+++ b/dist/MultichainAssetsRatesController/MultichainAssetsRatesController.d.mts
@@ -0,0 +1,125 @@
+import type { AccountsControllerListMultichainAccountsAction, AccountsControllerAccountAddedEvent } from "@metamask/accounts-controller";
+import type { RestrictedMessenger, ControllerStateChangeEvent, ControllerGetStateAction } from "@metamask/base-controller";
+import { type CaipAssetType } from "@metamask/keyring-api";
+import type { KeyringControllerLockEvent, KeyringControllerUnlockEvent } from "@metamask/keyring-controller";
+import type { HandleSnapRequest } from "@metamask/snaps-controllers";
+import type { AssetConversion } from "@metamask/snaps-sdk";
+import type { CurrencyRateStateChange, GetCurrencyRateState } from "../CurrencyRateController.mjs";
+import type { MultichainAssetsControllerGetStateAction, MultichainAssetsControllerStateChangeEvent } from "../MultichainAssetsController/index.mjs";
+import type { MultichainBalancesControllerGetStateAction } from "../MultichainBalancesController/index.mjs";
+/**
+ * The name of the MultiChainAssetsRatesController.
+ */
+declare const controllerName = "MultiChainAssetsRatesController";
+/**
+ * State used by the MultiChainAssetsRatesController to cache token conversion rates.
+ */
+export type MultichainAssetsRatesControllerState = {
+    conversionRates: Record<CaipAssetType, AssetConversion>;
+};
+/**
+ * Returns the state of the MultiChainAssetsRatesController.
+ */
+export type MultichainAssetsRatesControllerGetStateAction = ControllerGetStateAction<typeof controllerName, MultichainAssetsRatesControllerState>;
+/**
+ * Action to update the rates of all supported tokens.
+ */
+export type MultichainAssetsRatesControllerUpdateRatesAction = {
+    type: `${typeof controllerName}:updateAssetsRates`;
+    handler: MultiChainAssetsRatesController['updateAssetsRates'];
+};
+/**
+ * Constructs the default {@link MultichainAssetsRatesController} state. This allows
+ * consumers to provide a partial state object when initializing the controller
+ * and also helps in constructing complete state objects for this controller in
+ * tests.
+ *
+ * @returns The default {@link MultichainAssetsRatesController} state.
+ */
+export declare function getDefaultMultichainAssetsRatesControllerState(): MultichainAssetsRatesControllerState;
+/**
+ * Event emitted when the state of the MultiChainAssetsRatesController changes.
+ */
+export type MultichainAssetsRatesControllerStateChange = ControllerStateChangeEvent<typeof controllerName, MultichainAssetsRatesControllerState>;
+/**
+ * Actions exposed by the MultiChainAssetsRatesController.
+ */
+export type MultichainAssetsRatesControllerActions = MultichainAssetsRatesControllerGetStateAction | MultichainAssetsRatesControllerUpdateRatesAction;
+/**
+ * Events emitted by MultiChainAssetsRatesController.
+ */
+export type MultichainAssetsRatesControllerEvents = MultichainAssetsRatesControllerStateChange;
+/**
+ * Actions that this controller is allowed to call.
+ */
+export type AllowedActions = HandleSnapRequest | AccountsControllerListMultichainAccountsAction | GetCurrencyRateState | MultichainAssetsControllerGetStateAction | MultichainBalancesControllerGetStateAction;
+/**
+ * Events that this controller is allowed to subscribe to.
+ */
+export type AllowedEvents = KeyringControllerLockEvent | KeyringControllerUnlockEvent | AccountsControllerAccountAddedEvent | CurrencyRateStateChange | MultichainAssetsControllerStateChangeEvent;
+/**
+ * Messenger type for the MultiChainAssetsRatesController.
+ */
+export type MultichainAssetsRatesControllerMessenger = RestrictedMessenger<typeof controllerName, MultichainAssetsRatesControllerActions | AllowedActions, MultichainAssetsRatesControllerEvents | AllowedEvents, AllowedActions['type'], AllowedEvents['type']>;
+/**
+ * The input for starting polling in MultiChainAssetsRatesController.
+ */
+export type MultiChainAssetsRatesPollingInput = {
+    accountId: string;
+};
+declare const MultiChainAssetsRatesController_base: (abstract new (...args: any[]) => {
+    readonly "__#13@#intervalIds": Record<string, NodeJS.Timeout>;
+    "__#13@#intervalLength": number | undefined;
+    setIntervalLength(intervalLength: number): void;
+    getIntervalLength(): number | undefined;
+    _startPolling(input: MultiChainAssetsRatesPollingInput): void;
+    _stopPollingByPollingTokenSetId(key: string): void;
+    readonly "__#3@#pollingTokenSets": Map<string, Set<string>>;
+    "__#3@#callbacks": Map<string, Set<(input: MultiChainAssetsRatesPollingInput) => void>>;
+    _executePoll(input: MultiChainAssetsRatesPollingInput): Promise<void>;
+    startPolling(input: MultiChainAssetsRatesPollingInput): string;
+    stopAllPolling(): void;
+    stopPollingByPollingToken(pollingToken: string): void;
+    onPollingComplete(input: MultiChainAssetsRatesPollingInput, callback: (input: MultiChainAssetsRatesPollingInput) => void): void;
+}) & typeof import("@metamask/base-controller").BaseController;
+/**
+ * Controller that manages multichain token conversion rates.
+ *
+ * This controller polls for token conversion rates and updates its state.
+ */
+export declare class MultiChainAssetsRatesController extends MultiChainAssetsRatesController_base<typeof controllerName, MultichainAssetsRatesControllerState, MultichainAssetsRatesControllerMessenger> {
+    #private;
+    /**
+     * Creates an instance of MultiChainAssetsRatesController.
+     *
+     * @param options - Constructor options.
+     * @param options.interval - The polling interval in milliseconds.
+     * @param options.state - The initial state.
+     * @param options.messenger - A reference to the messaging system.
+     */
+    constructor({ interval, state, messenger, }: {
+        interval?: number;
+        state?: Partial<MultichainAssetsRatesControllerState>;
+        messenger: MultichainAssetsRatesControllerMessenger;
+    });
+    /**
+     * Executes a poll by updating token conversion rates for the current account.
+     *
+     * @returns A promise that resolves when the polling completes.
+     */
+    _executePoll(): Promise<void>;
+    /**
+     * Determines whether the controller is active.
+     *
+     * @returns True if the keyring is unlocked; otherwise, false.
+     */
+    get isActive(): boolean;
+    /**
+     * Updates token conversion rates for each non-EVM account.
+     *
+     * @returns A promise that resolves when the rates are updated.
+     */
+    updateAssetsRates(): Promise<void>;
+}
+export {};
+//# sourceMappingURL=MultichainAssetsRatesController.d.mts.map
\ No newline at end of file
diff --git a/dist/MultichainAssetsRatesController/MultichainAssetsRatesController.d.mts.map b/dist/MultichainAssetsRatesController/MultichainAssetsRatesController.d.mts.map
new file mode 100644
index 0000000000000000000000000000000000000000..37c7ffdb6c514a7c177d968dc680dad15618105a
--- /dev/null
+++ b/dist/MultichainAssetsRatesController/MultichainAssetsRatesController.d.mts.map
@@ -0,0 +1 @@
+{"version":3,"file":"MultichainAssetsRatesController.d.mts","sourceRoot":"","sources":["../../src/MultichainAssetsRatesController/MultichainAssetsRatesController.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EACV,8CAA8C,EAC9C,mCAAmC,EACpC,sCAAsC;AACvC,OAAO,KAAK,EACV,mBAAmB,EACnB,0BAA0B,EAC1B,wBAAwB,EACzB,kCAAkC;AACnC,OAAO,EAAE,KAAK,aAAa,EAAoB,8BAA8B;AAC7E,OAAO,KAAK,EACV,0BAA0B,EAC1B,4BAA4B,EAC7B,qCAAqC;AAGtC,OAAO,KAAK,EAAE,iBAAiB,EAAE,oCAAoC;AACrE,OAAO,KAAK,EAEV,eAAe,EAGhB,4BAA4B;AAM7B,OAAO,KAAK,EAEV,uBAAuB,EACvB,oBAAoB,EACrB,sCAAkC;AACnC,OAAO,KAAK,EACV,wCAAwC,EAExC,0CAA0C,EAC3C,gDAAsC;AACvC,OAAO,KAAK,EAAE,0CAA0C,EAAE,kDAAwC;AAElG;;GAEG;AACH,QAAA,MAAM,cAAc,oCAAoC,CAAC;AAEzD;;GAEG;AACH,MAAM,MAAM,oCAAoC,GAAG;IACjD,eAAe,EAAE,MAAM,CAAC,aAAa,EAAE,eAAe,CAAC,CAAC;CACzD,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,6CAA6C,GACvD,wBAAwB,CACtB,OAAO,cAAc,EACrB,oCAAoC,CACrC,CAAC;AAEJ;;GAEG;AACH,MAAM,MAAM,gDAAgD,GAAG;IAC7D,IAAI,EAAE,GAAG,OAAO,cAAc,oBAAoB,CAAC;IACnD,OAAO,EAAE,+BAA+B,CAAC,mBAAmB,CAAC,CAAC;CAC/D,CAAC;AAEF;;;;;;;GAOG;AACH,wBAAgB,8CAA8C,IAAI,oCAAoC,CAErG;AAED;;GAEG;AACH,MAAM,MAAM,0CAA0C,GACpD,0BAA0B,CACxB,OAAO,cAAc,EACrB,oCAAoC,CACrC,CAAC;AAEJ;;GAEG;AACH,MAAM,MAAM,sCAAsC,GAC9C,6CAA6C,GAC7C,gDAAgD,CAAC;AAErD;;GAEG;AACH,MAAM,MAAM,qCAAqC,GAC/C,0CAA0C,CAAC;AAE7C;;GAEG;AACH,MAAM,MAAM,cAAc,GACtB,iBAAiB,GACjB,8CAA8C,GAC9C,oBAAoB,GACpB,wCAAwC,GACxC,0CAA0C,CAAC;AAC/C;;GAEG;AACH,MAAM,MAAM,aAAa,GACrB,0BAA0B,GAC1B,4BAA4B,GAC5B,mCAAmC,GACnC,uBAAuB,GACvB,0CAA0C,CAAC;AAE/C;;GAEG;AACH,MAAM,MAAM,wCAAwC,GAAG,mBAAmB,CACxE,OAAO,cAAc,EACrB,sCAAsC,GAAG,cAAc,EACvD,qCAAqC,GAAG,aAAa,EACrD,cAAc,CAAC,MAAM,CAAC,EACtB,aAAa,CAAC,MAAM,CAAC,CACtB,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,iCAAiC,GAAG;IAC9C,SAAS,EAAE,MAAM,CAAC;CACnB,CAAC;;;;;;;;;;;;;;;;AAMF;;;;GAIG;AACH,qBAAa,+BAAgC,SAAQ,qCACnD,OAAO,cAAc,EACrB,oCAAoC,EACpC,wCAAwC,CACzC;;IASC;;;;;;;OAOG;gBACS,EACV,QAAgB,EAChB,KAAU,EACV,SAAS,GACV,EAAE;QACD,QAAQ,CAAC,EAAE,MAAM,CAAC;QAClB,KAAK,CAAC,EAAE,OAAO,CAAC,oCAAoC,CAAC,CAAC;QACtD,SAAS,EAAE,wCAAwC,CAAC;KACrD;IAwDD;;;;OAIG;IACG,YAAY,IAAI,OAAO,CAAC,IAAI,CAAC;IAInC;;;;OAIG;IACH,IAAI,QAAQ,IAAI,OAAO,CAEtB;IAmCD;;;;OAIG;IACG,iBAAiB,IAAI,OAAO,CAAC,IAAI,CAAC;CAkKzC"}
\ No newline at end of file
diff --git a/dist/MultichainAssetsRatesController/MultichainAssetsRatesController.mjs b/dist/MultichainAssetsRatesController/MultichainAssetsRatesController.mjs
new file mode 100644
index 0000000000000000000000000000000000000000..e4637daff7fd9f70bf46c56004d7594c5896691f
--- /dev/null
+++ b/dist/MultichainAssetsRatesController/MultichainAssetsRatesController.mjs
@@ -0,0 +1,203 @@
+var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
+    if (kind === "m") throw new TypeError("Private method is not writable");
+    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
+    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
+    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
+};
+var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
+    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
+    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
+    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
+};
+var _MultiChainAssetsRatesController_instances, _MultiChainAssetsRatesController_mutex, _MultiChainAssetsRatesController_currentCurrency, _MultiChainAssetsRatesController_accountsAssets, _MultiChainAssetsRatesController_isUnlocked, _MultiChainAssetsRatesController_isNonEvmAccount, _MultiChainAssetsRatesController_listMultichainAccounts, _MultiChainAssetsRatesController_listAccounts, _MultiChainAssetsRatesController_getAssetsForAccount, _MultiChainAssetsRatesController_buildConversions, _MultiChainAssetsRatesController_flattenRates, _MultiChainAssetsRatesController_buildUpdatedRates, _MultiChainAssetsRatesController_applyUpdatedRates, _MultiChainAssetsRatesController_handleSnapRequest;
+import { isEvmAccountType } from "@metamask/keyring-api";
+import { StaticIntervalPollingController } from "@metamask/polling-controller";
+import { HandlerType } from "@metamask/snaps-utils";
+import { Mutex } from "async-mutex";
+import { MAP_CAIP_CURRENCIES } from "./constant.mjs";
+/**
+ * The name of the MultiChainAssetsRatesController.
+ */
+const controllerName = 'MultiChainAssetsRatesController';
+/**
+ * Constructs the default {@link MultichainAssetsRatesController} state. This allows
+ * consumers to provide a partial state object when initializing the controller
+ * and also helps in constructing complete state objects for this controller in
+ * tests.
+ *
+ * @returns The default {@link MultichainAssetsRatesController} state.
+ */
+export function getDefaultMultichainAssetsRatesControllerState() {
+    return { conversionRates: {} };
+}
+const metadata = {
+    conversionRates: { persist: true, anonymous: true },
+};
+/**
+ * Controller that manages multichain token conversion rates.
+ *
+ * This controller polls for token conversion rates and updates its state.
+ */
+export class MultiChainAssetsRatesController extends StaticIntervalPollingController() {
+    /**
+     * Creates an instance of MultiChainAssetsRatesController.
+     *
+     * @param options - Constructor options.
+     * @param options.interval - The polling interval in milliseconds.
+     * @param options.state - The initial state.
+     * @param options.messenger - A reference to the messaging system.
+     */
+    constructor({ interval = 18000, state = {}, messenger, }) {
+        var _a, _b;
+        super({
+            name: controllerName,
+            messenger,
+            state: {
+                ...getDefaultMultichainAssetsRatesControllerState(),
+                ...state,
+            },
+            metadata,
+        });
+        _MultiChainAssetsRatesController_instances.add(this);
+        _MultiChainAssetsRatesController_mutex.set(this, new Mutex());
+        _MultiChainAssetsRatesController_currentCurrency.set(this, void 0);
+        _MultiChainAssetsRatesController_accountsAssets.set(this, void 0);
+        _MultiChainAssetsRatesController_isUnlocked.set(this, true);
+        this.setIntervalLength(interval);
+        // Subscribe to keyring lock/unlock events.
+        this.messagingSystem.subscribe('KeyringController:lock', () => {
+            __classPrivateFieldSet(this, _MultiChainAssetsRatesController_isUnlocked, false, "f");
+        });
+        this.messagingSystem.subscribe('KeyringController:unlock', () => {
+            __classPrivateFieldSet(this, _MultiChainAssetsRatesController_isUnlocked, true, "f");
+        });
+        (_a = this, { accountsAssets: ({ set value(_c) { __classPrivateFieldSet(_a, _MultiChainAssetsRatesController_accountsAssets, _c, "f"); } }).value } = this.messagingSystem.call('MultichainAssetsController:getState'));
+        console.log('MultichainAssetsController state 1 .......', this.messagingSystem.call('MultichainAssetsController:getState'));
+        console.log('MultiChainBalancesController state 1 .......', this.messagingSystem.call('MultichainBalancesController:getState'));
+        (_b = this, { currentCurrency: ({ set value(_c) { __classPrivateFieldSet(_b, _MultiChainAssetsRatesController_currentCurrency, _c, "f"); } }).value } = this.messagingSystem.call('CurrencyRateController:getState'));
+        this.messagingSystem.subscribe('CurrencyRateController:stateChange', async (currencyRatesState) => {
+            __classPrivateFieldSet(this, _MultiChainAssetsRatesController_currentCurrency, currencyRatesState.currentCurrency, "f");
+            await this.updateAssetsRates();
+        });
+        this.messagingSystem.subscribe('MultichainAssetsController:stateChange', async (multiChainAssetsState) => {
+            __classPrivateFieldSet(this, _MultiChainAssetsRatesController_accountsAssets, multiChainAssetsState.accountsAssets, "f");
+            await this.updateAssetsRates();
+        });
+    }
+    /**
+     * Executes a poll by updating token conversion rates for the current account.
+     *
+     * @returns A promise that resolves when the polling completes.
+     */
+    async _executePoll() {
+        await this.updateAssetsRates();
+    }
+    /**
+     * Determines whether the controller is active.
+     *
+     * @returns True if the keyring is unlocked; otherwise, false.
+     */
+    get isActive() {
+        return __classPrivateFieldGet(this, _MultiChainAssetsRatesController_isUnlocked, "f");
+    }
+    /**
+     * Updates token conversion rates for each non-EVM account.
+     *
+     * @returns A promise that resolves when the rates are updated.
+     */
+    async updateAssetsRates() {
+        const releaseLock = await __classPrivateFieldGet(this, _MultiChainAssetsRatesController_mutex, "f").acquire();
+        return (async () => {
+            if (!this.isActive) {
+                return;
+            }
+            const accounts = __classPrivateFieldGet(this, _MultiChainAssetsRatesController_instances, "m", _MultiChainAssetsRatesController_listAccounts).call(this);
+            for (const account of accounts) {
+                const assets = __classPrivateFieldGet(this, _MultiChainAssetsRatesController_instances, "m", _MultiChainAssetsRatesController_getAssetsForAccount).call(this, account.id);
+                // Build the conversions array
+                const conversions = __classPrivateFieldGet(this, _MultiChainAssetsRatesController_instances, "m", _MultiChainAssetsRatesController_buildConversions).call(this, assets);
+                // Retrieve rates from Snap
+                const accountRates = await __classPrivateFieldGet(this, _MultiChainAssetsRatesController_instances, "m", _MultiChainAssetsRatesController_handleSnapRequest).call(this, {
+                    snapId: account?.metadata.snap?.id,
+                    handler: HandlerType.OnAssetsConversion,
+                    params: conversions,
+                });
+                // Flatten nested rates if needed
+                const flattenedRates = __classPrivateFieldGet(this, _MultiChainAssetsRatesController_instances, "m", _MultiChainAssetsRatesController_flattenRates).call(this, accountRates);
+                // Build the updatedRates object for these assets
+                const updatedRates = __classPrivateFieldGet(this, _MultiChainAssetsRatesController_instances, "m", _MultiChainAssetsRatesController_buildUpdatedRates).call(this, assets, flattenedRates);
+                // Apply these updated rates to controller state
+                __classPrivateFieldGet(this, _MultiChainAssetsRatesController_instances, "m", _MultiChainAssetsRatesController_applyUpdatedRates).call(this, updatedRates);
+            }
+        })().finally(() => {
+            releaseLock();
+        });
+    }
+}
+_MultiChainAssetsRatesController_mutex = new WeakMap(), _MultiChainAssetsRatesController_currentCurrency = new WeakMap(), _MultiChainAssetsRatesController_accountsAssets = new WeakMap(), _MultiChainAssetsRatesController_isUnlocked = new WeakMap(), _MultiChainAssetsRatesController_instances = new WeakSet(), _MultiChainAssetsRatesController_isNonEvmAccount = function _MultiChainAssetsRatesController_isNonEvmAccount(account) {
+    return (!isEvmAccountType(account.type) && account.metadata.snap !== undefined);
+}, _MultiChainAssetsRatesController_listMultichainAccounts = function _MultiChainAssetsRatesController_listMultichainAccounts() {
+    return this.messagingSystem.call('AccountsController:listMultichainAccounts');
+}, _MultiChainAssetsRatesController_listAccounts = function _MultiChainAssetsRatesController_listAccounts() {
+    const accounts = __classPrivateFieldGet(this, _MultiChainAssetsRatesController_instances, "m", _MultiChainAssetsRatesController_listMultichainAccounts).call(this);
+    return accounts.filter((account) => __classPrivateFieldGet(this, _MultiChainAssetsRatesController_instances, "m", _MultiChainAssetsRatesController_isNonEvmAccount).call(this, account));
+}, _MultiChainAssetsRatesController_getAssetsForAccount = function _MultiChainAssetsRatesController_getAssetsForAccount(accountId) {
+    return __classPrivateFieldGet(this, _MultiChainAssetsRatesController_accountsAssets, "f")?.[accountId] ?? [];
+}, _MultiChainAssetsRatesController_buildConversions = function _MultiChainAssetsRatesController_buildConversions(assets) {
+    const currency = MAP_CAIP_CURRENCIES[__classPrivateFieldGet(this, _MultiChainAssetsRatesController_currentCurrency, "f")] ?? MAP_CAIP_CURRENCIES.usd;
+    return {
+        conversions: assets.map((asset) => ({
+            from: asset,
+            to: currency,
+        })),
+    };
+}, _MultiChainAssetsRatesController_flattenRates = function _MultiChainAssetsRatesController_flattenRates(assetsConversionResponse) {
+    const { conversionRates } = assetsConversionResponse;
+    return Object.fromEntries(Object.entries(conversionRates).map(([asset, nestedObj]) => {
+        // e.g., nestedObj might look like: { "swift:0/iso4217:EUR": { rate, conversionTime } }
+        const singleValue = Object.values(nestedObj)[0];
+        return [asset, singleValue];
+    }));
+}, _MultiChainAssetsRatesController_buildUpdatedRates = function _MultiChainAssetsRatesController_buildUpdatedRates(assets, flattenedRates) {
+    const updatedRates = {};
+    for (const asset of assets) {
+        if (flattenedRates[asset]) {
+            updatedRates[asset] = {
+                ...flattenedRates[asset],
+                currency: MAP_CAIP_CURRENCIES[__classPrivateFieldGet(this, _MultiChainAssetsRatesController_currentCurrency, "f")] ??
+                    MAP_CAIP_CURRENCIES.usd,
+            };
+        }
+    }
+    return updatedRates;
+}, _MultiChainAssetsRatesController_applyUpdatedRates = function _MultiChainAssetsRatesController_applyUpdatedRates(updatedRates) {
+    this.update((state) => {
+        state.conversionRates = {
+            ...state.conversionRates,
+            ...updatedRates,
+        };
+    });
+    console.log('updatedRates .......', this.state);
+}, _MultiChainAssetsRatesController_handleSnapRequest = 
+/**
+ * Forwards a Snap request to the SnapController.
+ *
+ * @param args - The request parameters.
+ * @param args.snapId - The ID of the Snap.
+ * @param args.handler - The handler type.
+ * @param args.params - The asset conversions.
+ * @returns A promise that resolves with the account rates.
+ */
+async function _MultiChainAssetsRatesController_handleSnapRequest({ snapId, handler, params, }) {
+    return this.messagingSystem.call('SnapController:handleRequest', {
+        snapId,
+        origin: 'metamask',
+        handler,
+        request: {
+            jsonrpc: '2.0',
+            method: handler,
+            params,
+        },
+    });
+};
+//# sourceMappingURL=MultichainAssetsRatesController.mjs.map
\ No newline at end of file
diff --git a/dist/MultichainAssetsRatesController/MultichainAssetsRatesController.mjs.map b/dist/MultichainAssetsRatesController/MultichainAssetsRatesController.mjs.map
new file mode 100644
index 0000000000000000000000000000000000000000..fb7a3d845ec8f83be03c1406e5bf623652e769e4
--- /dev/null
+++ b/dist/MultichainAssetsRatesController/MultichainAssetsRatesController.mjs.map
@@ -0,0 +1 @@
+{"version":3,"file":"MultichainAssetsRatesController.mjs","sourceRoot":"","sources":["../../src/MultichainAssetsRatesController/MultichainAssetsRatesController.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  AccountsControllerListMultichainAccountsAction,\n  AccountsControllerAccountAddedEvent,\n} from '@metamask/accounts-controller';\nimport type {\n  RestrictedMessenger,\n  ControllerStateChangeEvent,\n  ControllerGetStateAction,\n} from '@metamask/base-controller';\nimport { type CaipAssetType, isEvmAccountType } from '@metamask/keyring-api';\nimport type {\n  KeyringControllerLockEvent,\n  KeyringControllerUnlockEvent,\n} from '@metamask/keyring-controller';\nimport type { InternalAccount } from '@metamask/keyring-internal-api';\nimport { StaticIntervalPollingController } from '@metamask/polling-controller';\nimport type { HandleSnapRequest } from '@metamask/snaps-controllers';\nimport type {\n  SnapId,\n  AssetConversion,\n  OnAssetsConversionArguments,\n  OnAssetsConversionResponse,\n} from '@metamask/snaps-sdk';\nimport { HandlerType } from '@metamask/snaps-utils';\nimport { Mutex } from 'async-mutex';\nimport type { Draft } from 'immer';\n\nimport { MAP_CAIP_CURRENCIES } from './constant';\nimport type {\n  CurrencyRateState,\n  CurrencyRateStateChange,\n  GetCurrencyRateState,\n} from '../CurrencyRateController';\nimport type {\n  MultichainAssetsControllerGetStateAction,\n  MultichainAssetsControllerState,\n  MultichainAssetsControllerStateChangeEvent,\n} from '../MultichainAssetsController';\nimport type { MultichainBalancesControllerGetStateAction } from '../MultichainBalancesController';\n\n/**\n * The name of the MultiChainAssetsRatesController.\n */\nconst controllerName = 'MultiChainAssetsRatesController';\n\n/**\n * State used by the MultiChainAssetsRatesController to cache token conversion rates.\n */\nexport type MultichainAssetsRatesControllerState = {\n  conversionRates: Record<CaipAssetType, AssetConversion>;\n};\n\n/**\n * Returns the state of the MultiChainAssetsRatesController.\n */\nexport type MultichainAssetsRatesControllerGetStateAction =\n  ControllerGetStateAction<\n    typeof controllerName,\n    MultichainAssetsRatesControllerState\n  >;\n\n/**\n * Action to update the rates of all supported tokens.\n */\nexport type MultichainAssetsRatesControllerUpdateRatesAction = {\n  type: `${typeof controllerName}:updateAssetsRates`;\n  handler: MultiChainAssetsRatesController['updateAssetsRates'];\n};\n\n/**\n * Constructs the default {@link MultichainAssetsRatesController} state. This allows\n * consumers to provide a partial state object when initializing the controller\n * and also helps in constructing complete state objects for this controller in\n * tests.\n *\n * @returns The default {@link MultichainAssetsRatesController} state.\n */\nexport function getDefaultMultichainAssetsRatesControllerState(): MultichainAssetsRatesControllerState {\n  return { conversionRates: {} };\n}\n\n/**\n * Event emitted when the state of the MultiChainAssetsRatesController changes.\n */\nexport type MultichainAssetsRatesControllerStateChange =\n  ControllerStateChangeEvent<\n    typeof controllerName,\n    MultichainAssetsRatesControllerState\n  >;\n\n/**\n * Actions exposed by the MultiChainAssetsRatesController.\n */\nexport type MultichainAssetsRatesControllerActions =\n  | MultichainAssetsRatesControllerGetStateAction\n  | MultichainAssetsRatesControllerUpdateRatesAction;\n\n/**\n * Events emitted by MultiChainAssetsRatesController.\n */\nexport type MultichainAssetsRatesControllerEvents =\n  MultichainAssetsRatesControllerStateChange;\n\n/**\n * Actions that this controller is allowed to call.\n */\nexport type AllowedActions =\n  | HandleSnapRequest\n  | AccountsControllerListMultichainAccountsAction\n  | GetCurrencyRateState\n  | MultichainAssetsControllerGetStateAction\n  | MultichainBalancesControllerGetStateAction;\n/**\n * Events that this controller is allowed to subscribe to.\n */\nexport type AllowedEvents =\n  | KeyringControllerLockEvent\n  | KeyringControllerUnlockEvent\n  | AccountsControllerAccountAddedEvent\n  | CurrencyRateStateChange\n  | MultichainAssetsControllerStateChangeEvent;\n\n/**\n * Messenger type for the MultiChainAssetsRatesController.\n */\nexport type MultichainAssetsRatesControllerMessenger = RestrictedMessenger<\n  typeof controllerName,\n  MultichainAssetsRatesControllerActions | AllowedActions,\n  MultichainAssetsRatesControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\n/**\n * The input for starting polling in MultiChainAssetsRatesController.\n */\nexport type MultiChainAssetsRatesPollingInput = {\n  accountId: string;\n};\n\nconst metadata = {\n  conversionRates: { persist: true, anonymous: true },\n};\n\n/**\n * Controller that manages multichain token conversion rates.\n *\n * This controller polls for token conversion rates and updates its state.\n */\nexport class MultiChainAssetsRatesController extends StaticIntervalPollingController<MultiChainAssetsRatesPollingInput>()<\n  typeof controllerName,\n  MultichainAssetsRatesControllerState,\n  MultichainAssetsRatesControllerMessenger\n> {\n  readonly #mutex = new Mutex();\n\n  #currentCurrency: CurrencyRateState['currentCurrency'];\n\n  #accountsAssets: MultichainAssetsControllerState['accountsAssets'];\n\n  #isUnlocked = true;\n\n  /**\n   * Creates an instance of MultiChainAssetsRatesController.\n   *\n   * @param options - Constructor options.\n   * @param options.interval - The polling interval in milliseconds.\n   * @param options.state - The initial state.\n   * @param options.messenger - A reference to the messaging system.\n   */\n  constructor({\n    interval = 18000,\n    state = {},\n    messenger,\n  }: {\n    interval?: number;\n    state?: Partial<MultichainAssetsRatesControllerState>;\n    messenger: MultichainAssetsRatesControllerMessenger;\n  }) {\n    super({\n      name: controllerName,\n      messenger,\n      state: {\n        ...getDefaultMultichainAssetsRatesControllerState(),\n        ...state,\n      },\n      metadata,\n    });\n\n    this.setIntervalLength(interval);\n\n    // Subscribe to keyring lock/unlock events.\n    this.messagingSystem.subscribe('KeyringController:lock', () => {\n      this.#isUnlocked = false;\n    });\n    this.messagingSystem.subscribe('KeyringController:unlock', () => {\n      this.#isUnlocked = true;\n    });\n\n    ({ accountsAssets: this.#accountsAssets } = this.messagingSystem.call(\n      'MultichainAssetsController:getState',\n    ));\n\n    console.log(\n      'MultichainAssetsController state 1 .......',\n      this.messagingSystem.call('MultichainAssetsController:getState'),\n    );\n\n    console.log(\n      'MultiChainBalancesController state 1 .......',\n      this.messagingSystem.call('MultichainBalancesController:getState'),\n    );\n\n    ({ currentCurrency: this.#currentCurrency } = this.messagingSystem.call(\n      'CurrencyRateController:getState',\n    ));\n\n    this.messagingSystem.subscribe(\n      'CurrencyRateController:stateChange',\n      async (currencyRatesState: CurrencyRateState) => {\n        this.#currentCurrency = currencyRatesState.currentCurrency;\n        await this.updateAssetsRates();\n      },\n    );\n\n    this.messagingSystem.subscribe(\n      'MultichainAssetsController:stateChange',\n      async (multiChainAssetsState: MultichainAssetsControllerState) => {\n        this.#accountsAssets = multiChainAssetsState.accountsAssets;\n        await this.updateAssetsRates();\n      },\n    );\n  }\n\n  /**\n   * Executes a poll by updating token conversion rates for the current account.\n   *\n   * @returns A promise that resolves when the polling completes.\n   */\n  async _executePoll(): Promise<void> {\n    await this.updateAssetsRates();\n  }\n\n  /**\n   * Determines whether the controller is active.\n   *\n   * @returns True if the keyring is unlocked; otherwise, false.\n   */\n  get isActive(): boolean {\n    return this.#isUnlocked;\n  }\n\n  /**\n   * Checks if an account is a non-EVM account with a Snap.\n   *\n   * @param account - The account to check.\n   * @returns True if the account is non-EVM and has Snap metadata; otherwise, false.\n   */\n  #isNonEvmAccount(account: InternalAccount): boolean {\n    return (\n      !isEvmAccountType(account.type) && account.metadata.snap !== undefined\n    );\n  }\n\n  /**\n   * Retrieves all multichain accounts from the AccountsController.\n   *\n   * @returns An array of internal accounts.\n   */\n  #listMultichainAccounts(): InternalAccount[] {\n    return this.messagingSystem.call(\n      'AccountsController:listMultichainAccounts',\n    );\n  }\n\n  /**\n   * Filters and returns non-EVM accounts that should have balances.\n   *\n   * @returns An array of non-EVM internal accounts.\n   */\n  #listAccounts(): InternalAccount[] {\n    const accounts = this.#listMultichainAccounts();\n    return accounts.filter((account) => this.#isNonEvmAccount(account));\n  }\n\n  /**\n   * Updates token conversion rates for each non-EVM account.\n   *\n   * @returns A promise that resolves when the rates are updated.\n   */\n  async updateAssetsRates(): Promise<void> {\n    const releaseLock = await this.#mutex.acquire();\n\n    return (async () => {\n      if (!this.isActive) {\n        return;\n      }\n      const accounts = this.#listAccounts();\n\n      for (const account of accounts) {\n        const assets = this.#getAssetsForAccount(account.id);\n\n        // Build the conversions array\n        const conversions = this.#buildConversions(assets);\n\n        // Retrieve rates from Snap\n        const accountRates = await this.#handleSnapRequest({\n          snapId: account?.metadata.snap?.id as SnapId,\n          handler: HandlerType.OnAssetsConversion,\n          params: conversions,\n        });\n\n        // Flatten nested rates if needed\n        const flattenedRates = this.#flattenRates(accountRates);\n\n        // Build the updatedRates object for these assets\n        const updatedRates = this.#buildUpdatedRates(assets, flattenedRates);\n        // Apply these updated rates to controller state\n        this.#applyUpdatedRates(updatedRates);\n      }\n    })().finally(() => {\n      releaseLock();\n    });\n  }\n\n  /**\n   * Returns the array of CAIP-19 assets for the given account ID.\n   * If none are found, returns an empty array.\n   *\n   * @param accountId - The account ID to get the assets for.\n   * @returns An array of CAIP-19 assets.\n   */\n  #getAssetsForAccount(accountId: string): CaipAssetType[] {\n    return this.#accountsAssets?.[accountId] ?? [];\n  }\n\n  /**\n   * Builds a conversions array (from each asset → the current currency).\n   *\n   * @param assets - The assets to build the conversions for.\n   * @returns A conversions array.\n   */\n  #buildConversions(assets: CaipAssetType[]): OnAssetsConversionArguments {\n    const currency =\n      MAP_CAIP_CURRENCIES[this.#currentCurrency] ?? MAP_CAIP_CURRENCIES.usd;\n    return {\n      conversions: assets.map((asset) => ({\n        from: asset,\n        to: currency,\n      })),\n    };\n  }\n\n  /**\n   * Flattens any nested structure in the conversion rates returned by Snap.\n   *\n   * @param assetsConversionResponse - The conversion rates to flatten.\n   * @returns A flattened rates object.\n   */\n  #flattenRates(\n    assetsConversionResponse: OnAssetsConversionResponse,\n  ): Record<CaipAssetType, AssetConversion | null> {\n    const { conversionRates } = assetsConversionResponse;\n\n    return Object.fromEntries(\n      Object.entries(conversionRates).map(([asset, nestedObj]) => {\n        // e.g., nestedObj might look like: { \"swift:0/iso4217:EUR\": { rate, conversionTime } }\n        const singleValue = Object.values(nestedObj)[0];\n        return [asset, singleValue];\n      }),\n    );\n  }\n\n  /**\n   * Builds a rates object that covers all given assets, ensuring that\n   * any asset not returned by Snap is set to null for both `rate` and `conversionTime`.\n   *\n   * @param assets - The assets to build the rates for.\n   * @param flattenedRates - The rates to merge.\n   * @returns A rates object that covers all given assets.\n   */\n  #buildUpdatedRates(\n    assets: CaipAssetType[],\n    flattenedRates: Record<CaipAssetType, AssetConversion | null>,\n  ): Record<string, AssetConversion & { currency: CaipAssetType }> {\n    const updatedRates: Record<\n      CaipAssetType,\n      AssetConversion & { currency: CaipAssetType }\n    > = {};\n\n    for (const asset of assets) {\n      if (flattenedRates[asset]) {\n        updatedRates[asset] = {\n          ...(flattenedRates[asset] as AssetConversion),\n          currency:\n            MAP_CAIP_CURRENCIES[this.#currentCurrency] ??\n            MAP_CAIP_CURRENCIES.usd,\n        };\n      }\n    }\n    return updatedRates;\n  }\n\n  /**\n   * Merges the new rates into the controller’s state.\n   *\n   * @param updatedRates - The new rates to merge.\n   */\n  #applyUpdatedRates(\n    updatedRates: Record<\n      string,\n      { rate: string | null; conversionTime: number | null }\n    >,\n  ): void {\n    this.update((state: Draft<MultichainAssetsRatesControllerState>) => {\n      state.conversionRates = {\n        ...state.conversionRates,\n        ...updatedRates,\n      };\n    });\n    console.log('updatedRates .......', this.state);\n  }\n\n  /**\n   * Forwards a Snap request to the SnapController.\n   *\n   * @param args - The request parameters.\n   * @param args.snapId - The ID of the Snap.\n   * @param args.handler - The handler type.\n   * @param args.params - The asset conversions.\n   * @returns A promise that resolves with the account rates.\n   */\n  async #handleSnapRequest({\n    snapId,\n    handler,\n    params,\n  }: {\n    snapId: SnapId;\n    handler: HandlerType;\n    params: OnAssetsConversionArguments;\n  }): Promise<OnAssetsConversionResponse> {\n    return this.messagingSystem.call('SnapController:handleRequest', {\n      snapId,\n      origin: 'metamask',\n      handler,\n      request: {\n        jsonrpc: '2.0',\n        method: handler,\n        params,\n      },\n    }) as Promise<OnAssetsConversionResponse>;\n  }\n}\n"]}
\ No newline at end of file
diff --git a/dist/MultichainAssetsRatesController/constant.cjs b/dist/MultichainAssetsRatesController/constant.cjs
new file mode 100644
index 0000000000000000000000000000000000000000..919c24da1d92b16647f51ecb62662b7b711866c0
--- /dev/null
+++ b/dist/MultichainAssetsRatesController/constant.cjs
@@ -0,0 +1,83 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.MAP_CAIP_CURRENCIES = void 0;
+/**
+ * Maps each SUPPORTED_CURRENCIES entry to its CAIP-19 (or CAIP-like) identifier.
+ * For fiat, we mimic the old “swift:0/iso4217:XYZ” style.
+ */
+exports.MAP_CAIP_CURRENCIES = {
+    // ========================
+    // Native crypto assets
+    // ========================
+    btc: 'bip122:000000000019d6689c085ae165831e93/slip44:0',
+    eth: 'eip155:1/slip44:60',
+    ltc: 'bip122:12a765e31ffd4059bada1e25190f6e98/slip44:2',
+    // Bitcoin Cash
+    bch: 'bip122:000000000000000000651ef99cb9fcbe/slip44:145',
+    // Binance Coin
+    bnb: 'cosmos:Binance-Chain-Tigris/slip44:714',
+    // EOS mainnet (chainId = aca376f2...)
+    eos: 'eos:aca376f2/slip44:194',
+    // XRP mainnet
+    xrp: 'xrpl:mainnet/slip44:144',
+    // Stellar Lumens mainnet
+    xlm: 'stellar:pubnet/slip44:148',
+    // Chainlink (ERC20 on Ethereum mainnet)
+    link: 'eip155:1/erc20:0x514910771af9Ca656af840dff83E8264EcF986CA',
+    // Polkadot (chainId = 91b171bb158e2d3848fa23a9f1c25182)
+    dot: 'polkadot:91b171bb158e2d3848fa23a9f1c25182/slip44:354',
+    // Yearn.finance (ERC20 on Ethereum mainnet)
+    yfi: 'eip155:1/erc20:0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e',
+    // ========================
+    // Fiat currencies
+    // ========================
+    usd: 'swift:0/iso4217:USD',
+    aed: 'swift:0/iso4217:AED',
+    ars: 'swift:0/iso4217:ARS',
+    aud: 'swift:0/iso4217:AUD',
+    bdt: 'swift:0/iso4217:BDT',
+    bhd: 'swift:0/iso4217:BHD',
+    bmd: 'swift:0/iso4217:BMD',
+    brl: 'swift:0/iso4217:BRL',
+    cad: 'swift:0/iso4217:CAD',
+    chf: 'swift:0/iso4217:CHF',
+    clp: 'swift:0/iso4217:CLP',
+    cny: 'swift:0/iso4217:CNY',
+    czk: 'swift:0/iso4217:CZK',
+    dkk: 'swift:0/iso4217:DKK',
+    eur: 'swift:0/iso4217:EUR',
+    gbp: 'swift:0/iso4217:GBP',
+    hkd: 'swift:0/iso4217:HKD',
+    huf: 'swift:0/iso4217:HUF',
+    idr: 'swift:0/iso4217:IDR',
+    ils: 'swift:0/iso4217:ILS',
+    inr: 'swift:0/iso4217:INR',
+    jpy: 'swift:0/iso4217:JPY',
+    krw: 'swift:0/iso4217:KRW',
+    kwd: 'swift:0/iso4217:KWD',
+    lkr: 'swift:0/iso4217:LKR',
+    mmk: 'swift:0/iso4217:MMK',
+    mxn: 'swift:0/iso4217:MXN',
+    myr: 'swift:0/iso4217:MYR',
+    ngn: 'swift:0/iso4217:NGN',
+    nok: 'swift:0/iso4217:NOK',
+    nzd: 'swift:0/iso4217:NZD',
+    php: 'swift:0/iso4217:PHP',
+    pkr: 'swift:0/iso4217:PKR',
+    pln: 'swift:0/iso4217:PLN',
+    rub: 'swift:0/iso4217:RUB',
+    sar: 'swift:0/iso4217:SAR',
+    sek: 'swift:0/iso4217:SEK',
+    sgd: 'swift:0/iso4217:SGD',
+    thb: 'swift:0/iso4217:THB',
+    try: 'swift:0/iso4217:TRY',
+    twd: 'swift:0/iso4217:TWD',
+    uah: 'swift:0/iso4217:UAH',
+    vef: 'swift:0/iso4217:VEF',
+    vnd: 'swift:0/iso4217:VND',
+    zar: 'swift:0/iso4217:ZAR',
+    xdr: 'swift:0/iso4217:XDR',
+    xag: 'swift:0/iso4217:XAG',
+    xau: 'swift:0/iso4217:XAU',
+};
+//# sourceMappingURL=constant.cjs.map
\ No newline at end of file
diff --git a/dist/MultichainAssetsRatesController/constant.cjs.map b/dist/MultichainAssetsRatesController/constant.cjs.map
new file mode 100644
index 0000000000000000000000000000000000000000..27d2e9782ac432c32dda4225f2df4e2d0334a2a6
--- /dev/null
+++ b/dist/MultichainAssetsRatesController/constant.cjs.map
@@ -0,0 +1 @@
+{"version":3,"file":"constant.cjs","sourceRoot":"","sources":["../../src/MultichainAssetsRatesController/constant.ts"],"names":[],"mappings":";;;AAEA;;;GAGG;AACU,QAAA,mBAAmB,GAE5B;IACF,2BAA2B;IAC3B,uBAAuB;IACvB,2BAA2B;IAC3B,GAAG,EAAE,kDAAkD;IACvD,GAAG,EAAE,oBAAoB;IACzB,GAAG,EAAE,kDAAkD;IAEvD,eAAe;IACf,GAAG,EAAE,oDAAoD;IAEzD,eAAe;IACf,GAAG,EAAE,wCAAwC;IAE7C,sCAAsC;IACtC,GAAG,EAAE,yBAAyB;IAE9B,cAAc;IACd,GAAG,EAAE,yBAAyB;IAE9B,yBAAyB;IACzB,GAAG,EAAE,2BAA2B;IAEhC,wCAAwC;IACxC,IAAI,EAAE,2DAA2D;IAEjE,wDAAwD;IACxD,GAAG,EAAE,sDAAsD;IAE3D,4CAA4C;IAC5C,GAAG,EAAE,2DAA2D;IAEhE,2BAA2B;IAC3B,kBAAkB;IAClB,2BAA2B;IAC3B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;CAC3B,CAAC","sourcesContent":["import type { CaipAssetType } from '@metamask/utils';\n\n/**\n * Maps each SUPPORTED_CURRENCIES entry to its CAIP-19 (or CAIP-like) identifier.\n * For fiat, we mimic the old “swift:0/iso4217:XYZ” style.\n */\nexport const MAP_CAIP_CURRENCIES: {\n  [key: string]: CaipAssetType;\n} = {\n  // ========================\n  // Native crypto assets\n  // ========================\n  btc: 'bip122:000000000019d6689c085ae165831e93/slip44:0',\n  eth: 'eip155:1/slip44:60',\n  ltc: 'bip122:12a765e31ffd4059bada1e25190f6e98/slip44:2',\n\n  // Bitcoin Cash\n  bch: 'bip122:000000000000000000651ef99cb9fcbe/slip44:145',\n\n  // Binance Coin\n  bnb: 'cosmos:Binance-Chain-Tigris/slip44:714',\n\n  // EOS mainnet (chainId = aca376f2...)\n  eos: 'eos:aca376f2/slip44:194',\n\n  // XRP mainnet\n  xrp: 'xrpl:mainnet/slip44:144',\n\n  // Stellar Lumens mainnet\n  xlm: 'stellar:pubnet/slip44:148',\n\n  // Chainlink (ERC20 on Ethereum mainnet)\n  link: 'eip155:1/erc20:0x514910771af9Ca656af840dff83E8264EcF986CA',\n\n  // Polkadot (chainId = 91b171bb158e2d3848fa23a9f1c25182)\n  dot: 'polkadot:91b171bb158e2d3848fa23a9f1c25182/slip44:354',\n\n  // Yearn.finance (ERC20 on Ethereum mainnet)\n  yfi: 'eip155:1/erc20:0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e',\n\n  // ========================\n  // Fiat currencies\n  // ========================\n  usd: 'swift:0/iso4217:USD',\n  aed: 'swift:0/iso4217:AED',\n  ars: 'swift:0/iso4217:ARS',\n  aud: 'swift:0/iso4217:AUD',\n  bdt: 'swift:0/iso4217:BDT',\n  bhd: 'swift:0/iso4217:BHD',\n  bmd: 'swift:0/iso4217:BMD',\n  brl: 'swift:0/iso4217:BRL',\n  cad: 'swift:0/iso4217:CAD',\n  chf: 'swift:0/iso4217:CHF',\n  clp: 'swift:0/iso4217:CLP',\n  cny: 'swift:0/iso4217:CNY',\n  czk: 'swift:0/iso4217:CZK',\n  dkk: 'swift:0/iso4217:DKK',\n  eur: 'swift:0/iso4217:EUR',\n  gbp: 'swift:0/iso4217:GBP',\n  hkd: 'swift:0/iso4217:HKD',\n  huf: 'swift:0/iso4217:HUF',\n  idr: 'swift:0/iso4217:IDR',\n  ils: 'swift:0/iso4217:ILS',\n  inr: 'swift:0/iso4217:INR',\n  jpy: 'swift:0/iso4217:JPY',\n  krw: 'swift:0/iso4217:KRW',\n  kwd: 'swift:0/iso4217:KWD',\n  lkr: 'swift:0/iso4217:LKR',\n  mmk: 'swift:0/iso4217:MMK',\n  mxn: 'swift:0/iso4217:MXN',\n  myr: 'swift:0/iso4217:MYR',\n  ngn: 'swift:0/iso4217:NGN',\n  nok: 'swift:0/iso4217:NOK',\n  nzd: 'swift:0/iso4217:NZD',\n  php: 'swift:0/iso4217:PHP',\n  pkr: 'swift:0/iso4217:PKR',\n  pln: 'swift:0/iso4217:PLN',\n  rub: 'swift:0/iso4217:RUB',\n  sar: 'swift:0/iso4217:SAR',\n  sek: 'swift:0/iso4217:SEK',\n  sgd: 'swift:0/iso4217:SGD',\n  thb: 'swift:0/iso4217:THB',\n  try: 'swift:0/iso4217:TRY',\n  twd: 'swift:0/iso4217:TWD',\n  uah: 'swift:0/iso4217:UAH',\n  vef: 'swift:0/iso4217:VEF',\n  vnd: 'swift:0/iso4217:VND',\n  zar: 'swift:0/iso4217:ZAR',\n  xdr: 'swift:0/iso4217:XDR',\n  xag: 'swift:0/iso4217:XAG',\n  xau: 'swift:0/iso4217:XAU',\n};\n"]}
\ No newline at end of file
diff --git a/dist/MultichainAssetsRatesController/constant.d.cts b/dist/MultichainAssetsRatesController/constant.d.cts
new file mode 100644
index 0000000000000000000000000000000000000000..54ba6051621fd8a22ca39b3d2e1c68743ef6742f
--- /dev/null
+++ b/dist/MultichainAssetsRatesController/constant.d.cts
@@ -0,0 +1,9 @@
+import type { CaipAssetType } from "@metamask/utils";
+/**
+ * Maps each SUPPORTED_CURRENCIES entry to its CAIP-19 (or CAIP-like) identifier.
+ * For fiat, we mimic the old “swift:0/iso4217:XYZ” style.
+ */
+export declare const MAP_CAIP_CURRENCIES: {
+    [key: string]: CaipAssetType;
+};
+//# sourceMappingURL=constant.d.cts.map
\ No newline at end of file
diff --git a/dist/MultichainAssetsRatesController/constant.d.cts.map b/dist/MultichainAssetsRatesController/constant.d.cts.map
new file mode 100644
index 0000000000000000000000000000000000000000..a3ecb1cb698b9b81047eed8a0174191c4ec2b75d
--- /dev/null
+++ b/dist/MultichainAssetsRatesController/constant.d.cts.map
@@ -0,0 +1 @@
+{"version":3,"file":"constant.d.cts","sourceRoot":"","sources":["../../src/MultichainAssetsRatesController/constant.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,aAAa,EAAE,wBAAwB;AAErD;;;GAGG;AACH,eAAO,MAAM,mBAAmB,EAAE;IAChC,CAAC,GAAG,EAAE,MAAM,GAAG,aAAa,CAAC;CAoF9B,CAAC"}
\ No newline at end of file
diff --git a/dist/MultichainAssetsRatesController/constant.d.mts b/dist/MultichainAssetsRatesController/constant.d.mts
new file mode 100644
index 0000000000000000000000000000000000000000..0add529be320e81c2e8a05ac7d8060431de8bbc7
--- /dev/null
+++ b/dist/MultichainAssetsRatesController/constant.d.mts
@@ -0,0 +1,9 @@
+import type { CaipAssetType } from "@metamask/utils";
+/**
+ * Maps each SUPPORTED_CURRENCIES entry to its CAIP-19 (or CAIP-like) identifier.
+ * For fiat, we mimic the old “swift:0/iso4217:XYZ” style.
+ */
+export declare const MAP_CAIP_CURRENCIES: {
+    [key: string]: CaipAssetType;
+};
+//# sourceMappingURL=constant.d.mts.map
\ No newline at end of file
diff --git a/dist/MultichainAssetsRatesController/constant.d.mts.map b/dist/MultichainAssetsRatesController/constant.d.mts.map
new file mode 100644
index 0000000000000000000000000000000000000000..dc9dabb2580603f0657f17247e255b5909db6bf0
--- /dev/null
+++ b/dist/MultichainAssetsRatesController/constant.d.mts.map
@@ -0,0 +1 @@
+{"version":3,"file":"constant.d.mts","sourceRoot":"","sources":["../../src/MultichainAssetsRatesController/constant.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,aAAa,EAAE,wBAAwB;AAErD;;;GAGG;AACH,eAAO,MAAM,mBAAmB,EAAE;IAChC,CAAC,GAAG,EAAE,MAAM,GAAG,aAAa,CAAC;CAoF9B,CAAC"}
\ No newline at end of file
diff --git a/dist/MultichainAssetsRatesController/constant.mjs b/dist/MultichainAssetsRatesController/constant.mjs
new file mode 100644
index 0000000000000000000000000000000000000000..1e91e1b101370384e1f2a4b319292848fe932a8e
--- /dev/null
+++ b/dist/MultichainAssetsRatesController/constant.mjs
@@ -0,0 +1,80 @@
+/**
+ * Maps each SUPPORTED_CURRENCIES entry to its CAIP-19 (or CAIP-like) identifier.
+ * For fiat, we mimic the old “swift:0/iso4217:XYZ” style.
+ */
+export const MAP_CAIP_CURRENCIES = {
+    // ========================
+    // Native crypto assets
+    // ========================
+    btc: 'bip122:000000000019d6689c085ae165831e93/slip44:0',
+    eth: 'eip155:1/slip44:60',
+    ltc: 'bip122:12a765e31ffd4059bada1e25190f6e98/slip44:2',
+    // Bitcoin Cash
+    bch: 'bip122:000000000000000000651ef99cb9fcbe/slip44:145',
+    // Binance Coin
+    bnb: 'cosmos:Binance-Chain-Tigris/slip44:714',
+    // EOS mainnet (chainId = aca376f2...)
+    eos: 'eos:aca376f2/slip44:194',
+    // XRP mainnet
+    xrp: 'xrpl:mainnet/slip44:144',
+    // Stellar Lumens mainnet
+    xlm: 'stellar:pubnet/slip44:148',
+    // Chainlink (ERC20 on Ethereum mainnet)
+    link: 'eip155:1/erc20:0x514910771af9Ca656af840dff83E8264EcF986CA',
+    // Polkadot (chainId = 91b171bb158e2d3848fa23a9f1c25182)
+    dot: 'polkadot:91b171bb158e2d3848fa23a9f1c25182/slip44:354',
+    // Yearn.finance (ERC20 on Ethereum mainnet)
+    yfi: 'eip155:1/erc20:0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e',
+    // ========================
+    // Fiat currencies
+    // ========================
+    usd: 'swift:0/iso4217:USD',
+    aed: 'swift:0/iso4217:AED',
+    ars: 'swift:0/iso4217:ARS',
+    aud: 'swift:0/iso4217:AUD',
+    bdt: 'swift:0/iso4217:BDT',
+    bhd: 'swift:0/iso4217:BHD',
+    bmd: 'swift:0/iso4217:BMD',
+    brl: 'swift:0/iso4217:BRL',
+    cad: 'swift:0/iso4217:CAD',
+    chf: 'swift:0/iso4217:CHF',
+    clp: 'swift:0/iso4217:CLP',
+    cny: 'swift:0/iso4217:CNY',
+    czk: 'swift:0/iso4217:CZK',
+    dkk: 'swift:0/iso4217:DKK',
+    eur: 'swift:0/iso4217:EUR',
+    gbp: 'swift:0/iso4217:GBP',
+    hkd: 'swift:0/iso4217:HKD',
+    huf: 'swift:0/iso4217:HUF',
+    idr: 'swift:0/iso4217:IDR',
+    ils: 'swift:0/iso4217:ILS',
+    inr: 'swift:0/iso4217:INR',
+    jpy: 'swift:0/iso4217:JPY',
+    krw: 'swift:0/iso4217:KRW',
+    kwd: 'swift:0/iso4217:KWD',
+    lkr: 'swift:0/iso4217:LKR',
+    mmk: 'swift:0/iso4217:MMK',
+    mxn: 'swift:0/iso4217:MXN',
+    myr: 'swift:0/iso4217:MYR',
+    ngn: 'swift:0/iso4217:NGN',
+    nok: 'swift:0/iso4217:NOK',
+    nzd: 'swift:0/iso4217:NZD',
+    php: 'swift:0/iso4217:PHP',
+    pkr: 'swift:0/iso4217:PKR',
+    pln: 'swift:0/iso4217:PLN',
+    rub: 'swift:0/iso4217:RUB',
+    sar: 'swift:0/iso4217:SAR',
+    sek: 'swift:0/iso4217:SEK',
+    sgd: 'swift:0/iso4217:SGD',
+    thb: 'swift:0/iso4217:THB',
+    try: 'swift:0/iso4217:TRY',
+    twd: 'swift:0/iso4217:TWD',
+    uah: 'swift:0/iso4217:UAH',
+    vef: 'swift:0/iso4217:VEF',
+    vnd: 'swift:0/iso4217:VND',
+    zar: 'swift:0/iso4217:ZAR',
+    xdr: 'swift:0/iso4217:XDR',
+    xag: 'swift:0/iso4217:XAG',
+    xau: 'swift:0/iso4217:XAU',
+};
+//# sourceMappingURL=constant.mjs.map
\ No newline at end of file
diff --git a/dist/MultichainAssetsRatesController/constant.mjs.map b/dist/MultichainAssetsRatesController/constant.mjs.map
new file mode 100644
index 0000000000000000000000000000000000000000..1c7d62d20f386d94f8bf8c90206451c65383d146
--- /dev/null
+++ b/dist/MultichainAssetsRatesController/constant.mjs.map
@@ -0,0 +1 @@
+{"version":3,"file":"constant.mjs","sourceRoot":"","sources":["../../src/MultichainAssetsRatesController/constant.ts"],"names":[],"mappings":"AAEA;;;GAGG;AACH,MAAM,CAAC,MAAM,mBAAmB,GAE5B;IACF,2BAA2B;IAC3B,uBAAuB;IACvB,2BAA2B;IAC3B,GAAG,EAAE,kDAAkD;IACvD,GAAG,EAAE,oBAAoB;IACzB,GAAG,EAAE,kDAAkD;IAEvD,eAAe;IACf,GAAG,EAAE,oDAAoD;IAEzD,eAAe;IACf,GAAG,EAAE,wCAAwC;IAE7C,sCAAsC;IACtC,GAAG,EAAE,yBAAyB;IAE9B,cAAc;IACd,GAAG,EAAE,yBAAyB;IAE9B,yBAAyB;IACzB,GAAG,EAAE,2BAA2B;IAEhC,wCAAwC;IACxC,IAAI,EAAE,2DAA2D;IAEjE,wDAAwD;IACxD,GAAG,EAAE,sDAAsD;IAE3D,4CAA4C;IAC5C,GAAG,EAAE,2DAA2D;IAEhE,2BAA2B;IAC3B,kBAAkB;IAClB,2BAA2B;IAC3B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;IAC1B,GAAG,EAAE,qBAAqB;CAC3B,CAAC","sourcesContent":["import type { CaipAssetType } from '@metamask/utils';\n\n/**\n * Maps each SUPPORTED_CURRENCIES entry to its CAIP-19 (or CAIP-like) identifier.\n * For fiat, we mimic the old “swift:0/iso4217:XYZ” style.\n */\nexport const MAP_CAIP_CURRENCIES: {\n  [key: string]: CaipAssetType;\n} = {\n  // ========================\n  // Native crypto assets\n  // ========================\n  btc: 'bip122:000000000019d6689c085ae165831e93/slip44:0',\n  eth: 'eip155:1/slip44:60',\n  ltc: 'bip122:12a765e31ffd4059bada1e25190f6e98/slip44:2',\n\n  // Bitcoin Cash\n  bch: 'bip122:000000000000000000651ef99cb9fcbe/slip44:145',\n\n  // Binance Coin\n  bnb: 'cosmos:Binance-Chain-Tigris/slip44:714',\n\n  // EOS mainnet (chainId = aca376f2...)\n  eos: 'eos:aca376f2/slip44:194',\n\n  // XRP mainnet\n  xrp: 'xrpl:mainnet/slip44:144',\n\n  // Stellar Lumens mainnet\n  xlm: 'stellar:pubnet/slip44:148',\n\n  // Chainlink (ERC20 on Ethereum mainnet)\n  link: 'eip155:1/erc20:0x514910771af9Ca656af840dff83E8264EcF986CA',\n\n  // Polkadot (chainId = 91b171bb158e2d3848fa23a9f1c25182)\n  dot: 'polkadot:91b171bb158e2d3848fa23a9f1c25182/slip44:354',\n\n  // Yearn.finance (ERC20 on Ethereum mainnet)\n  yfi: 'eip155:1/erc20:0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e',\n\n  // ========================\n  // Fiat currencies\n  // ========================\n  usd: 'swift:0/iso4217:USD',\n  aed: 'swift:0/iso4217:AED',\n  ars: 'swift:0/iso4217:ARS',\n  aud: 'swift:0/iso4217:AUD',\n  bdt: 'swift:0/iso4217:BDT',\n  bhd: 'swift:0/iso4217:BHD',\n  bmd: 'swift:0/iso4217:BMD',\n  brl: 'swift:0/iso4217:BRL',\n  cad: 'swift:0/iso4217:CAD',\n  chf: 'swift:0/iso4217:CHF',\n  clp: 'swift:0/iso4217:CLP',\n  cny: 'swift:0/iso4217:CNY',\n  czk: 'swift:0/iso4217:CZK',\n  dkk: 'swift:0/iso4217:DKK',\n  eur: 'swift:0/iso4217:EUR',\n  gbp: 'swift:0/iso4217:GBP',\n  hkd: 'swift:0/iso4217:HKD',\n  huf: 'swift:0/iso4217:HUF',\n  idr: 'swift:0/iso4217:IDR',\n  ils: 'swift:0/iso4217:ILS',\n  inr: 'swift:0/iso4217:INR',\n  jpy: 'swift:0/iso4217:JPY',\n  krw: 'swift:0/iso4217:KRW',\n  kwd: 'swift:0/iso4217:KWD',\n  lkr: 'swift:0/iso4217:LKR',\n  mmk: 'swift:0/iso4217:MMK',\n  mxn: 'swift:0/iso4217:MXN',\n  myr: 'swift:0/iso4217:MYR',\n  ngn: 'swift:0/iso4217:NGN',\n  nok: 'swift:0/iso4217:NOK',\n  nzd: 'swift:0/iso4217:NZD',\n  php: 'swift:0/iso4217:PHP',\n  pkr: 'swift:0/iso4217:PKR',\n  pln: 'swift:0/iso4217:PLN',\n  rub: 'swift:0/iso4217:RUB',\n  sar: 'swift:0/iso4217:SAR',\n  sek: 'swift:0/iso4217:SEK',\n  sgd: 'swift:0/iso4217:SGD',\n  thb: 'swift:0/iso4217:THB',\n  try: 'swift:0/iso4217:TRY',\n  twd: 'swift:0/iso4217:TWD',\n  uah: 'swift:0/iso4217:UAH',\n  vef: 'swift:0/iso4217:VEF',\n  vnd: 'swift:0/iso4217:VND',\n  zar: 'swift:0/iso4217:ZAR',\n  xdr: 'swift:0/iso4217:XDR',\n  xag: 'swift:0/iso4217:XAG',\n  xau: 'swift:0/iso4217:XAU',\n};\n"]}
\ No newline at end of file
diff --git a/dist/MultichainAssetsRatesController/index.cjs b/dist/MultichainAssetsRatesController/index.cjs
new file mode 100644
index 0000000000000000000000000000000000000000..2242e27cc499a493a202b461931e64fdc47e102d
--- /dev/null
+++ b/dist/MultichainAssetsRatesController/index.cjs
@@ -0,0 +1,7 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.getDefaultMultichainAssetsRatesControllerState = exports.MultiChainAssetsRatesController = void 0;
+var MultichainAssetsRatesController_1 = require("./MultichainAssetsRatesController.cjs");
+Object.defineProperty(exports, "MultiChainAssetsRatesController", { enumerable: true, get: function () { return MultichainAssetsRatesController_1.MultiChainAssetsRatesController; } });
+Object.defineProperty(exports, "getDefaultMultichainAssetsRatesControllerState", { enumerable: true, get: function () { return MultichainAssetsRatesController_1.getDefaultMultichainAssetsRatesControllerState; } });
+//# sourceMappingURL=index.cjs.map
\ No newline at end of file
diff --git a/dist/MultichainAssetsRatesController/index.cjs.map b/dist/MultichainAssetsRatesController/index.cjs.map
new file mode 100644
index 0000000000000000000000000000000000000000..910fc277c951271bb3ec44f93506940918cd16af
--- /dev/null
+++ b/dist/MultichainAssetsRatesController/index.cjs.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.cjs","sourceRoot":"","sources":["../../src/MultichainAssetsRatesController/index.ts"],"names":[],"mappings":";;;AASA,yFAG2C;AAFzC,kJAAA,+BAA+B,OAAA;AAC/B,iKAAA,8CAA8C,OAAA","sourcesContent":["export type {\n  MultichainAssetsRatesControllerState,\n  MultichainAssetsRatesControllerActions,\n  MultichainAssetsRatesControllerEvents,\n  MultichainAssetsRatesControllerGetStateAction,\n  MultichainAssetsRatesControllerStateChange,\n  MultichainAssetsRatesControllerMessenger,\n} from './MultichainAssetsRatesController';\n\nexport {\n  MultiChainAssetsRatesController,\n  getDefaultMultichainAssetsRatesControllerState,\n} from './MultichainAssetsRatesController';\n"]}
\ No newline at end of file
diff --git a/dist/MultichainAssetsRatesController/index.d.cts b/dist/MultichainAssetsRatesController/index.d.cts
new file mode 100644
index 0000000000000000000000000000000000000000..a70cd7544d42fb8c771662bc20c375e47f84b723
--- /dev/null
+++ b/dist/MultichainAssetsRatesController/index.d.cts
@@ -0,0 +1,3 @@
+export type { MultichainAssetsRatesControllerState, MultichainAssetsRatesControllerActions, MultichainAssetsRatesControllerEvents, MultichainAssetsRatesControllerGetStateAction, MultichainAssetsRatesControllerStateChange, MultichainAssetsRatesControllerMessenger, } from "./MultichainAssetsRatesController.cjs";
+export { MultiChainAssetsRatesController, getDefaultMultichainAssetsRatesControllerState, } from "./MultichainAssetsRatesController.cjs";
+//# sourceMappingURL=index.d.cts.map
\ No newline at end of file
diff --git a/dist/MultichainAssetsRatesController/index.d.cts.map b/dist/MultichainAssetsRatesController/index.d.cts.map
new file mode 100644
index 0000000000000000000000000000000000000000..221dc3ff69d404fb9368e890a9754f8042f23980
--- /dev/null
+++ b/dist/MultichainAssetsRatesController/index.d.cts.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.d.cts","sourceRoot":"","sources":["../../src/MultichainAssetsRatesController/index.ts"],"names":[],"mappings":"AAAA,YAAY,EACV,oCAAoC,EACpC,sCAAsC,EACtC,qCAAqC,EACrC,6CAA6C,EAC7C,0CAA0C,EAC1C,wCAAwC,GACzC,8CAA0C;AAE3C,OAAO,EACL,+BAA+B,EAC/B,8CAA8C,GAC/C,8CAA0C"}
\ No newline at end of file
diff --git a/dist/MultichainAssetsRatesController/index.d.mts b/dist/MultichainAssetsRatesController/index.d.mts
new file mode 100644
index 0000000000000000000000000000000000000000..6c121109082b7f2c0a3941a632b570f31c5dafd9
--- /dev/null
+++ b/dist/MultichainAssetsRatesController/index.d.mts
@@ -0,0 +1,3 @@
+export type { MultichainAssetsRatesControllerState, MultichainAssetsRatesControllerActions, MultichainAssetsRatesControllerEvents, MultichainAssetsRatesControllerGetStateAction, MultichainAssetsRatesControllerStateChange, MultichainAssetsRatesControllerMessenger, } from "./MultichainAssetsRatesController.mjs";
+export { MultiChainAssetsRatesController, getDefaultMultichainAssetsRatesControllerState, } from "./MultichainAssetsRatesController.mjs";
+//# sourceMappingURL=index.d.mts.map
\ No newline at end of file
diff --git a/dist/MultichainAssetsRatesController/index.d.mts.map b/dist/MultichainAssetsRatesController/index.d.mts.map
new file mode 100644
index 0000000000000000000000000000000000000000..02d3bcad1d92a998468cd937928c632e90f66095
--- /dev/null
+++ b/dist/MultichainAssetsRatesController/index.d.mts.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.d.mts","sourceRoot":"","sources":["../../src/MultichainAssetsRatesController/index.ts"],"names":[],"mappings":"AAAA,YAAY,EACV,oCAAoC,EACpC,sCAAsC,EACtC,qCAAqC,EACrC,6CAA6C,EAC7C,0CAA0C,EAC1C,wCAAwC,GACzC,8CAA0C;AAE3C,OAAO,EACL,+BAA+B,EAC/B,8CAA8C,GAC/C,8CAA0C"}
\ No newline at end of file
diff --git a/dist/MultichainAssetsRatesController/index.mjs b/dist/MultichainAssetsRatesController/index.mjs
new file mode 100644
index 0000000000000000000000000000000000000000..033242ce7fe9ab748d7b0c4d22cff4b435b48a8b
--- /dev/null
+++ b/dist/MultichainAssetsRatesController/index.mjs
@@ -0,0 +1,2 @@
+export { MultiChainAssetsRatesController, getDefaultMultichainAssetsRatesControllerState } from "./MultichainAssetsRatesController.mjs";
+//# sourceMappingURL=index.mjs.map
\ No newline at end of file
diff --git a/dist/MultichainAssetsRatesController/index.mjs.map b/dist/MultichainAssetsRatesController/index.mjs.map
new file mode 100644
index 0000000000000000000000000000000000000000..c90859b4d3d1aeccebecc04a124d320df5195445
--- /dev/null
+++ b/dist/MultichainAssetsRatesController/index.mjs.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.mjs","sourceRoot":"","sources":["../../src/MultichainAssetsRatesController/index.ts"],"names":[],"mappings":"AASA,OAAO,EACL,+BAA+B,EAC/B,8CAA8C,EAC/C,8CAA0C","sourcesContent":["export type {\n  MultichainAssetsRatesControllerState,\n  MultichainAssetsRatesControllerActions,\n  MultichainAssetsRatesControllerEvents,\n  MultichainAssetsRatesControllerGetStateAction,\n  MultichainAssetsRatesControllerStateChange,\n  MultichainAssetsRatesControllerMessenger,\n} from './MultichainAssetsRatesController';\n\nexport {\n  MultiChainAssetsRatesController,\n  getDefaultMultichainAssetsRatesControllerState,\n} from './MultichainAssetsRatesController';\n"]}
\ No newline at end of file
diff --git a/dist/MultichainBalancesController/MultichainBalancesController.cjs b/dist/MultichainBalancesController/MultichainBalancesController.cjs
index 0102b7e86dba382a4692a30e1937f095a3807de0..12b29721e1e577b0c738bec2cf3e9f4be08e4eef 100644
--- a/dist/MultichainBalancesController/MultichainBalancesController.cjs
+++ b/dist/MultichainBalancesController/MultichainBalancesController.cjs
@@ -13,6 +13,7 @@ const keyring_snap_client_1 = require("@metamask/keyring-snap-client");
 const snaps_utils_1 = require("@metamask/snaps-utils");
 const _1 = require("./index.cjs");
 const utils_1 = require("./utils.cjs");
+const fake_balances_1 = require("./fake-balances.cjs");
 const controllerName = 'MultichainBalancesController';
 /**
  * Constructs the default {@link MultichainBalancesController} state. This allows
@@ -73,15 +74,22 @@ class MultichainBalancesController extends base_controller_1.BaseController {
      */
     async updateBalance(accountId) {
         try {
-            const account = __classPrivateFieldGet(this, _MultichainBalancesController_instances, "m", _MultichainBalancesController_getAccount).call(this, accountId);
-            if (account.metadata.snap) {
-                const scope = (0, utils_1.getScopeForAccount)(account);
-                const assetTypes = _1.NETWORK_ASSETS_MAP[scope];
-                const accountBalance = await __classPrivateFieldGet(this, _MultichainBalancesController_instances, "m", _MultichainBalancesController_getBalances).call(this, account.id, account.metadata.snap.id, assetTypes);
-                this.update((state) => {
-                    state.balances[accountId] = accountBalance;
-                });
-            }
+            console.log('updateBalance .......', accountId);
+            // const account = this.#getAccount(accountId);
+            // if (account.metadata.snap) {
+            //   const scope = getScopeForAccount(account);
+            //   const assetTypes = NETWORK_ASSETS_MAP[scope];
+            //   const accountBalance = await this.#getBalances(
+            //     account.id,
+            //     account.metadata.snap.id,
+            //     assetTypes,
+            //   );
+            // }
+            this.update((state) => {
+                state.balances[accountId] =
+                    (0, fake_balances_1.buildFakeBalancesData)(accountId).balances[accountId];
+            });
+            console.log('MultichainBalancesController state .......', this.state);
         }
         catch (error) {
             console.error(`Failed to fetch balances for account ${accountId}:`, error);
diff --git a/dist/MultichainBalancesController/MultichainBalancesController.cjs.map b/dist/MultichainBalancesController/MultichainBalancesController.cjs.map
index 4c56b54d95f77a019d1f19f94b1942b0c7e0c5bf..2d35f7ab74778a4bf08672ff6450373cd608b375 100644
--- a/dist/MultichainBalancesController/MultichainBalancesController.cjs.map
+++ b/dist/MultichainBalancesController/MultichainBalancesController.cjs.map
@@ -1 +1 @@
-{"version":3,"file":"MultichainBalancesController.cjs","sourceRoot":"","sources":["../../src/MultichainBalancesController/MultichainBalancesController.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  AccountsControllerAccountAddedEvent,\n  AccountsControllerAccountRemovedEvent,\n  AccountsControllerListMultichainAccountsAction,\n  AccountsControllerAccountBalancesUpdatesEvent,\n} from '@metamask/accounts-controller';\nimport {\n  BaseController,\n  type ControllerGetStateAction,\n  type ControllerStateChangeEvent,\n  type RestrictedMessenger,\n} from '@metamask/base-controller';\nimport { isEvmAccountType } from '@metamask/keyring-api';\nimport type {\n  Balance,\n  CaipAssetType,\n  AccountBalancesUpdatedEventPayload,\n} from '@metamask/keyring-api';\nimport type { InternalAccount } from '@metamask/keyring-internal-api';\nimport { KeyringClient } from '@metamask/keyring-snap-client';\nimport type { HandleSnapRequest } from '@metamask/snaps-controllers';\nimport type { SnapId } from '@metamask/snaps-sdk';\nimport { HandlerType } from '@metamask/snaps-utils';\nimport type { Json, JsonRpcRequest } from '@metamask/utils';\nimport type { Draft } from 'immer';\n\nimport { NETWORK_ASSETS_MAP } from '.';\nimport { getScopeForAccount } from './utils';\n\nconst controllerName = 'MultichainBalancesController';\n\n/**\n * State used by the {@link MultichainBalancesController} to cache account balances.\n */\nexport type MultichainBalancesControllerState = {\n  balances: {\n    [account: string]: {\n      [asset: string]: {\n        amount: string;\n        unit: string;\n      };\n    };\n  };\n};\n\n/**\n * Constructs the default {@link MultichainBalancesController} state. This allows\n * consumers to provide a partial state object when initializing the controller\n * and also helps in constructing complete state objects for this controller in\n * tests.\n *\n * @returns The default {@link MultichainBalancesController} state.\n */\nexport function getDefaultMultichainBalancesControllerState(): MultichainBalancesControllerState {\n  return { balances: {} };\n}\n\n/**\n * Returns the state of the {@link MultichainBalancesController}.\n */\nexport type MultichainBalancesControllerGetStateAction =\n  ControllerGetStateAction<\n    typeof controllerName,\n    MultichainBalancesControllerState\n  >;\n\n/**\n * Event emitted when the state of the {@link MultichainBalancesController} changes.\n */\nexport type MultichainBalancesControllerStateChange =\n  ControllerStateChangeEvent<\n    typeof controllerName,\n    MultichainBalancesControllerState\n  >;\n\n/**\n * Actions exposed by the {@link MultichainBalancesController}.\n */\nexport type MultichainBalancesControllerActions =\n  MultichainBalancesControllerGetStateAction;\n\n/**\n * Events emitted by {@link MultichainBalancesController}.\n */\nexport type MultichainBalancesControllerEvents =\n  MultichainBalancesControllerStateChange;\n\n/**\n * Actions that this controller is allowed to call.\n */\ntype AllowedActions =\n  | HandleSnapRequest\n  | AccountsControllerListMultichainAccountsAction;\n\n/**\n * Events that this controller is allowed to subscribe.\n */\ntype AllowedEvents =\n  | AccountsControllerAccountAddedEvent\n  | AccountsControllerAccountRemovedEvent\n  | AccountsControllerAccountBalancesUpdatesEvent;\n/**\n * Messenger type for the MultichainBalancesController.\n */\nexport type MultichainBalancesControllerMessenger = RestrictedMessenger<\n  typeof controllerName,\n  MultichainBalancesControllerActions | AllowedActions,\n  MultichainBalancesControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\n/**\n * {@link MultichainBalancesController}'s metadata.\n *\n * This allows us to choose if fields of the state should be persisted or not\n * using the `persist` flag; and if they can be sent to Sentry or not, using\n * the `anonymous` flag.\n */\nconst balancesControllerMetadata = {\n  balances: {\n    persist: true,\n    anonymous: false,\n  },\n};\n\n/**\n * The MultichainBalancesController is responsible for fetching and caching account\n * balances.\n */\nexport class MultichainBalancesController extends BaseController<\n  typeof controllerName,\n  MultichainBalancesControllerState,\n  MultichainBalancesControllerMessenger\n> {\n  constructor({\n    messenger,\n    state = {},\n  }: {\n    messenger: MultichainBalancesControllerMessenger;\n    state?: Partial<MultichainBalancesControllerState>;\n  }) {\n    super({\n      messenger,\n      name: controllerName,\n      metadata: balancesControllerMetadata,\n      state: {\n        ...getDefaultMultichainBalancesControllerState(),\n        ...state,\n      },\n    });\n\n    // Fetch initial balances for all non-EVM accounts\n    for (const account of this.#listAccounts()) {\n      this.updateBalance(account.id).catch((error) => {\n        console.error(\n          `Failed to fetch initial balance for account ${account.id}:`,\n          error,\n        );\n      });\n    }\n\n    this.messagingSystem.subscribe(\n      'AccountsController:accountAdded',\n      (account: InternalAccount) => this.#handleOnAccountAdded(account),\n    );\n    this.messagingSystem.subscribe(\n      'AccountsController:accountRemoved',\n      (account: string) => this.#handleOnAccountRemoved(account),\n    );\n    this.messagingSystem.subscribe(\n      'AccountsController:accountBalancesUpdated',\n      (balanceUpdate: AccountBalancesUpdatedEventPayload) =>\n        this.#handleOnAccountBalancesUpdated(balanceUpdate),\n    );\n  }\n\n  /**\n   * Updates the balances of one account. This method doesn't return\n   * anything, but it updates the state of the controller.\n   *\n   * @param accountId - The account ID.\n   */\n  async updateBalance(accountId: string): Promise<void> {\n    try {\n      const account = this.#getAccount(accountId);\n\n      if (account.metadata.snap) {\n        const scope = getScopeForAccount(account);\n        const assetTypes = NETWORK_ASSETS_MAP[scope];\n\n        const accountBalance = await this.#getBalances(\n          account.id,\n          account.metadata.snap.id,\n          assetTypes,\n        );\n\n        this.update((state: Draft<MultichainBalancesControllerState>) => {\n          state.balances[accountId] = accountBalance;\n        });\n      }\n    } catch (error) {\n      console.error(\n        `Failed to fetch balances for account ${accountId}:`,\n        error,\n      );\n    }\n  }\n\n  /**\n   * Lists the multichain accounts coming from the `AccountsController`.\n   *\n   * @returns A list of multichain accounts.\n   */\n  #listMultichainAccounts(): InternalAccount[] {\n    return this.messagingSystem.call(\n      'AccountsController:listMultichainAccounts',\n    );\n  }\n\n  /**\n   * Lists the accounts that we should get balances for.\n   *\n   * @returns A list of accounts that we should get balances for.\n   */\n  #listAccounts(): InternalAccount[] {\n    const accounts = this.#listMultichainAccounts();\n\n    return accounts.filter((account) => this.#isNonEvmAccount(account));\n  }\n\n  /**\n   * Get a non-EVM account from its ID.\n   *\n   * @param accountId - The account ID.\n   * @returns The non-EVM account.\n   */\n  #getAccount(accountId: string): InternalAccount {\n    const account: InternalAccount | undefined = this.#listAccounts().find(\n      (multichainAccount) => multichainAccount.id === accountId,\n    );\n\n    if (!account) {\n      throw new Error(`Unknown account: ${accountId}`);\n    }\n\n    return account;\n  }\n\n  /**\n   * Checks for non-EVM accounts.\n   *\n   * @param account - The new account to be checked.\n   * @returns True if the account is a non-EVM account, false otherwise.\n   */\n  #isNonEvmAccount(account: InternalAccount): boolean {\n    return (\n      !isEvmAccountType(account.type) &&\n      // Non-EVM accounts are backed by a Snap for now\n      account.metadata.snap !== undefined\n    );\n  }\n\n  /**\n   * Handles changes when a new account has been added.\n   *\n   * @param account - The new account being added.\n   */\n  async #handleOnAccountAdded(account: InternalAccount): Promise<void> {\n    if (!this.#isNonEvmAccount(account)) {\n      return;\n    }\n\n    await this.updateBalance(account.id);\n  }\n\n  /**\n   * Handles balance updates received from the AccountsController.\n   *\n   * @param balanceUpdate - The balance update event containing new balances.\n   */\n  #handleOnAccountBalancesUpdated(\n    balanceUpdate: AccountBalancesUpdatedEventPayload,\n  ): void {\n    this.update((state: Draft<MultichainBalancesControllerState>) => {\n      Object.entries(balanceUpdate.balances).forEach(\n        ([accountId, assetBalances]) => {\n          if (accountId in state.balances) {\n            Object.assign(state.balances[accountId], assetBalances);\n          }\n        },\n      );\n    });\n  }\n\n  /**\n   * Handles changes when a new account has been removed.\n   *\n   * @param accountId - The account ID being removed.\n   */\n  async #handleOnAccountRemoved(accountId: string): Promise<void> {\n    if (accountId in this.state.balances) {\n      this.update((state: Draft<MultichainBalancesControllerState>) => {\n        delete state.balances[accountId];\n      });\n    }\n  }\n\n  /**\n   * Get the balances for an account.\n   *\n   * @param accountId - ID of the account to get balances for.\n   * @param snapId - ID of the Snap which manages the account.\n   * @param assetTypes - Array of asset types to get balances for.\n   * @returns A map of asset types to balances.\n   */\n  async #getBalances(\n    accountId: string,\n    snapId: string,\n    assetTypes: CaipAssetType[],\n  ): Promise<Record<CaipAssetType, Balance>> {\n    return await this.#getClient(snapId).getAccountBalances(\n      accountId,\n      assetTypes,\n    );\n  }\n\n  /**\n   * Gets a `KeyringClient` for a Snap.\n   *\n   * @param snapId - ID of the Snap to get the client for.\n   * @returns A `KeyringClient` for the Snap.\n   */\n  #getClient(snapId: string): KeyringClient {\n    return new KeyringClient({\n      send: async (request: JsonRpcRequest) =>\n        (await this.messagingSystem.call('SnapController:handleRequest', {\n          snapId: snapId as SnapId,\n          origin: 'metamask',\n          handler: HandlerType.OnKeyringRequest,\n          request,\n        })) as Promise<Json>,\n    });\n  }\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"MultichainBalancesController.cjs","sourceRoot":"","sources":["../../src/MultichainBalancesController/MultichainBalancesController.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  AccountsControllerAccountAddedEvent,\n  AccountsControllerAccountRemovedEvent,\n  AccountsControllerListMultichainAccountsAction,\n  AccountsControllerAccountBalancesUpdatesEvent,\n} from '@metamask/accounts-controller';\nimport {\n  BaseController,\n  type ControllerGetStateAction,\n  type ControllerStateChangeEvent,\n  type RestrictedMessenger,\n} from '@metamask/base-controller';\nimport { isEvmAccountType } from '@metamask/keyring-api';\nimport type {\n  Balance,\n  CaipAssetType,\n  AccountBalancesUpdatedEventPayload,\n} from '@metamask/keyring-api';\nimport type { InternalAccount } from '@metamask/keyring-internal-api';\nimport { KeyringClient } from '@metamask/keyring-snap-client';\nimport type { HandleSnapRequest } from '@metamask/snaps-controllers';\nimport type { SnapId } from '@metamask/snaps-sdk';\nimport { HandlerType } from '@metamask/snaps-utils';\nimport type { Json, JsonRpcRequest } from '@metamask/utils';\nimport type { Draft } from 'immer';\n\nimport { NETWORK_ASSETS_MAP } from '.';\nimport { getScopeForAccount } from './utils';\nimport { buildFakeBalancesData } from './fake-balances';\n\nconst controllerName = 'MultichainBalancesController';\n\n/**\n * State used by the {@link MultichainBalancesController} to cache account balances.\n */\nexport type MultichainBalancesControllerState = {\n  balances: {\n    [account: string]: {\n      [asset: string]: {\n        amount: string;\n        unit: string;\n      };\n    };\n  };\n};\n\n/**\n * Constructs the default {@link MultichainBalancesController} state. This allows\n * consumers to provide a partial state object when initializing the controller\n * and also helps in constructing complete state objects for this controller in\n * tests.\n *\n * @returns The default {@link MultichainBalancesController} state.\n */\nexport function getDefaultMultichainBalancesControllerState(): MultichainBalancesControllerState {\n  return { balances: {} };\n}\n\n/**\n * Returns the state of the {@link MultichainBalancesController}.\n */\nexport type MultichainBalancesControllerGetStateAction =\n  ControllerGetStateAction<\n    typeof controllerName,\n    MultichainBalancesControllerState\n  >;\n\n/**\n * Event emitted when the state of the {@link MultichainBalancesController} changes.\n */\nexport type MultichainBalancesControllerStateChange =\n  ControllerStateChangeEvent<\n    typeof controllerName,\n    MultichainBalancesControllerState\n  >;\n\n/**\n * Actions exposed by the {@link MultichainBalancesController}.\n */\nexport type MultichainBalancesControllerActions =\n  MultichainBalancesControllerGetStateAction;\n\n/**\n * Events emitted by {@link MultichainBalancesController}.\n */\nexport type MultichainBalancesControllerEvents =\n  MultichainBalancesControllerStateChange;\n\n/**\n * Actions that this controller is allowed to call.\n */\ntype AllowedActions =\n  | HandleSnapRequest\n  | AccountsControllerListMultichainAccountsAction;\n\n/**\n * Events that this controller is allowed to subscribe.\n */\ntype AllowedEvents =\n  | AccountsControllerAccountAddedEvent\n  | AccountsControllerAccountRemovedEvent\n  | AccountsControllerAccountBalancesUpdatesEvent;\n/**\n * Messenger type for the MultichainBalancesController.\n */\nexport type MultichainBalancesControllerMessenger = RestrictedMessenger<\n  typeof controllerName,\n  MultichainBalancesControllerActions | AllowedActions,\n  MultichainBalancesControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\n/**\n * {@link MultichainBalancesController}'s metadata.\n *\n * This allows us to choose if fields of the state should be persisted or not\n * using the `persist` flag; and if they can be sent to Sentry or not, using\n * the `anonymous` flag.\n */\nconst balancesControllerMetadata = {\n  balances: {\n    persist: true,\n    anonymous: false,\n  },\n};\n\n/**\n * The MultichainBalancesController is responsible for fetching and caching account\n * balances.\n */\nexport class MultichainBalancesController extends BaseController<\n  typeof controllerName,\n  MultichainBalancesControllerState,\n  MultichainBalancesControllerMessenger\n> {\n  constructor({\n    messenger,\n    state = {},\n  }: {\n    messenger: MultichainBalancesControllerMessenger;\n    state?: Partial<MultichainBalancesControllerState>;\n  }) {\n    super({\n      messenger,\n      name: controllerName,\n      metadata: balancesControllerMetadata,\n      state: {\n        ...getDefaultMultichainBalancesControllerState(),\n        ...state,\n      },\n    });\n\n    // Fetch initial balances for all non-EVM accounts\n    for (const account of this.#listAccounts()) {\n      this.updateBalance(account.id).catch((error) => {\n        console.error(\n          `Failed to fetch initial balance for account ${account.id}:`,\n          error,\n        );\n      });\n    }\n\n    this.messagingSystem.subscribe(\n      'AccountsController:accountAdded',\n      (account: InternalAccount) => this.#handleOnAccountAdded(account),\n    );\n    this.messagingSystem.subscribe(\n      'AccountsController:accountRemoved',\n      (account: string) => this.#handleOnAccountRemoved(account),\n    );\n    this.messagingSystem.subscribe(\n      'AccountsController:accountBalancesUpdated',\n      (balanceUpdate: AccountBalancesUpdatedEventPayload) =>\n        this.#handleOnAccountBalancesUpdated(balanceUpdate),\n    );\n  }\n\n  /**\n   * Updates the balances of one account. This method doesn't return\n   * anything, but it updates the state of the controller.\n   *\n   * @param accountId - The account ID.\n   */\n  async updateBalance(accountId: string): Promise<void> {\n    try {\n      console.log('updateBalance .......', accountId);\n      // const account = this.#getAccount(accountId);\n\n      // if (account.metadata.snap) {\n      //   const scope = getScopeForAccount(account);\n      //   const assetTypes = NETWORK_ASSETS_MAP[scope];\n\n      //   const accountBalance = await this.#getBalances(\n      //     account.id,\n      //     account.metadata.snap.id,\n      //     assetTypes,\n      //   );\n      // }\n      this.update((state: Draft<MultichainBalancesControllerState>) => {\n        state.balances[accountId] =\n          buildFakeBalancesData(accountId).balances[accountId];\n      });\n\n      console.log('MultichainBalancesController state .......', this.state);\n    } catch (error) {\n      console.error(\n        `Failed to fetch balances for account ${accountId}:`,\n        error,\n      );\n    }\n  }\n\n  /**\n   * Lists the multichain accounts coming from the `AccountsController`.\n   *\n   * @returns A list of multichain accounts.\n   */\n  #listMultichainAccounts(): InternalAccount[] {\n    return this.messagingSystem.call(\n      'AccountsController:listMultichainAccounts',\n    );\n  }\n\n  /**\n   * Lists the accounts that we should get balances for.\n   *\n   * @returns A list of accounts that we should get balances for.\n   */\n  #listAccounts(): InternalAccount[] {\n    const accounts = this.#listMultichainAccounts();\n\n    return accounts.filter((account) => this.#isNonEvmAccount(account));\n  }\n\n  /**\n   * Get a non-EVM account from its ID.\n   *\n   * @param accountId - The account ID.\n   * @returns The non-EVM account.\n   */\n  #getAccount(accountId: string): InternalAccount {\n    const account: InternalAccount | undefined = this.#listAccounts().find(\n      (multichainAccount) => multichainAccount.id === accountId,\n    );\n\n    if (!account) {\n      throw new Error(`Unknown account: ${accountId}`);\n    }\n\n    return account;\n  }\n\n  /**\n   * Checks for non-EVM accounts.\n   *\n   * @param account - The new account to be checked.\n   * @returns True if the account is a non-EVM account, false otherwise.\n   */\n  #isNonEvmAccount(account: InternalAccount): boolean {\n    return (\n      !isEvmAccountType(account.type) &&\n      // Non-EVM accounts are backed by a Snap for now\n      account.metadata.snap !== undefined\n    );\n  }\n\n  /**\n   * Handles changes when a new account has been added.\n   *\n   * @param account - The new account being added.\n   */\n  async #handleOnAccountAdded(account: InternalAccount): Promise<void> {\n    if (!this.#isNonEvmAccount(account)) {\n      return;\n    }\n\n    await this.updateBalance(account.id);\n  }\n\n  /**\n   * Handles balance updates received from the AccountsController.\n   *\n   * @param balanceUpdate - The balance update event containing new balances.\n   */\n  #handleOnAccountBalancesUpdated(\n    balanceUpdate: AccountBalancesUpdatedEventPayload,\n  ): void {\n    this.update((state: Draft<MultichainBalancesControllerState>) => {\n      Object.entries(balanceUpdate.balances).forEach(\n        ([accountId, assetBalances]) => {\n          if (accountId in state.balances) {\n            Object.assign(state.balances[accountId], assetBalances);\n          }\n        },\n      );\n    });\n  }\n\n  /**\n   * Handles changes when a new account has been removed.\n   *\n   * @param accountId - The account ID being removed.\n   */\n  async #handleOnAccountRemoved(accountId: string): Promise<void> {\n    if (accountId in this.state.balances) {\n      this.update((state: Draft<MultichainBalancesControllerState>) => {\n        delete state.balances[accountId];\n      });\n    }\n  }\n\n  /**\n   * Get the balances for an account.\n   *\n   * @param accountId - ID of the account to get balances for.\n   * @param snapId - ID of the Snap which manages the account.\n   * @param assetTypes - Array of asset types to get balances for.\n   * @returns A map of asset types to balances.\n   */\n  async #getBalances(\n    accountId: string,\n    snapId: string,\n    assetTypes: CaipAssetType[],\n  ): Promise<Record<CaipAssetType, Balance>> {\n    return await this.#getClient(snapId).getAccountBalances(\n      accountId,\n      assetTypes,\n    );\n  }\n\n  /**\n   * Gets a `KeyringClient` for a Snap.\n   *\n   * @param snapId - ID of the Snap to get the client for.\n   * @returns A `KeyringClient` for the Snap.\n   */\n  #getClient(snapId: string): KeyringClient {\n    return new KeyringClient({\n      send: async (request: JsonRpcRequest) =>\n        (await this.messagingSystem.call('SnapController:handleRequest', {\n          snapId: snapId as SnapId,\n          origin: 'metamask',\n          handler: HandlerType.OnKeyringRequest,\n          request,\n        })) as Promise<Json>,\n    });\n  }\n}\n"]}
\ No newline at end of file
diff --git a/dist/MultichainBalancesController/MultichainBalancesController.d.cts.map b/dist/MultichainBalancesController/MultichainBalancesController.d.cts.map
index 02f965463acbf831f8ea233a6f13ea94ad8b51f4..0e5c5133535164e75de1850357f37b3d020ea35b 100644
--- a/dist/MultichainBalancesController/MultichainBalancesController.d.cts.map
+++ b/dist/MultichainBalancesController/MultichainBalancesController.d.cts.map
@@ -1 +1 @@
-{"version":3,"file":"MultichainBalancesController.d.cts","sourceRoot":"","sources":["../../src/MultichainBalancesController/MultichainBalancesController.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EACV,mCAAmC,EACnC,qCAAqC,EACrC,8CAA8C,EAC9C,6CAA6C,EAC9C,sCAAsC;AACvC,OAAO,EACL,cAAc,EACd,KAAK,wBAAwB,EAC7B,KAAK,0BAA0B,EAC/B,KAAK,mBAAmB,EACzB,kCAAkC;AASnC,OAAO,KAAK,EAAE,iBAAiB,EAAE,oCAAoC;AASrE,QAAA,MAAM,cAAc,iCAAiC,CAAC;AAEtD;;GAEG;AACH,MAAM,MAAM,iCAAiC,GAAG;IAC9C,QAAQ,EAAE;QACR,CAAC,OAAO,EAAE,MAAM,GAAG;YACjB,CAAC,KAAK,EAAE,MAAM,GAAG;gBACf,MAAM,EAAE,MAAM,CAAC;gBACf,IAAI,EAAE,MAAM,CAAC;aACd,CAAC;SACH,CAAC;KACH,CAAC;CACH,CAAC;AAEF;;;;;;;GAOG;AACH,wBAAgB,2CAA2C,IAAI,iCAAiC,CAE/F;AAED;;GAEG;AACH,MAAM,MAAM,0CAA0C,GACpD,wBAAwB,CACtB,OAAO,cAAc,EACrB,iCAAiC,CAClC,CAAC;AAEJ;;GAEG;AACH,MAAM,MAAM,uCAAuC,GACjD,0BAA0B,CACxB,OAAO,cAAc,EACrB,iCAAiC,CAClC,CAAC;AAEJ;;GAEG;AACH,MAAM,MAAM,mCAAmC,GAC7C,0CAA0C,CAAC;AAE7C;;GAEG;AACH,MAAM,MAAM,kCAAkC,GAC5C,uCAAuC,CAAC;AAE1C;;GAEG;AACH,KAAK,cAAc,GACf,iBAAiB,GACjB,8CAA8C,CAAC;AAEnD;;GAEG;AACH,KAAK,aAAa,GACd,mCAAmC,GACnC,qCAAqC,GACrC,6CAA6C,CAAC;AAClD;;GAEG;AACH,MAAM,MAAM,qCAAqC,GAAG,mBAAmB,CACrE,OAAO,cAAc,EACrB,mCAAmC,GAAG,cAAc,EACpD,kCAAkC,GAAG,aAAa,EAClD,cAAc,CAAC,MAAM,CAAC,EACtB,aAAa,CAAC,MAAM,CAAC,CACtB,CAAC;AAgBF;;;GAGG;AACH,qBAAa,4BAA6B,SAAQ,cAAc,CAC9D,OAAO,cAAc,EACrB,iCAAiC,EACjC,qCAAqC,CACtC;;gBACa,EACV,SAAS,EACT,KAAU,GACX,EAAE;QACD,SAAS,EAAE,qCAAqC,CAAC;QACjD,KAAK,CAAC,EAAE,OAAO,CAAC,iCAAiC,CAAC,CAAC;KACpD;IAoCD;;;;;OAKG;IACG,aAAa,CAAC,SAAS,EAAE,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC;CAiKtD"}
\ No newline at end of file
+{"version":3,"file":"MultichainBalancesController.d.cts","sourceRoot":"","sources":["../../src/MultichainBalancesController/MultichainBalancesController.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EACV,mCAAmC,EACnC,qCAAqC,EACrC,8CAA8C,EAC9C,6CAA6C,EAC9C,sCAAsC;AACvC,OAAO,EACL,cAAc,EACd,KAAK,wBAAwB,EAC7B,KAAK,0BAA0B,EAC/B,KAAK,mBAAmB,EACzB,kCAAkC;AASnC,OAAO,KAAK,EAAE,iBAAiB,EAAE,oCAAoC;AAUrE,QAAA,MAAM,cAAc,iCAAiC,CAAC;AAEtD;;GAEG;AACH,MAAM,MAAM,iCAAiC,GAAG;IAC9C,QAAQ,EAAE;QACR,CAAC,OAAO,EAAE,MAAM,GAAG;YACjB,CAAC,KAAK,EAAE,MAAM,GAAG;gBACf,MAAM,EAAE,MAAM,CAAC;gBACf,IAAI,EAAE,MAAM,CAAC;aACd,CAAC;SACH,CAAC;KACH,CAAC;CACH,CAAC;AAEF;;;;;;;GAOG;AACH,wBAAgB,2CAA2C,IAAI,iCAAiC,CAE/F;AAED;;GAEG;AACH,MAAM,MAAM,0CAA0C,GACpD,wBAAwB,CACtB,OAAO,cAAc,EACrB,iCAAiC,CAClC,CAAC;AAEJ;;GAEG;AACH,MAAM,MAAM,uCAAuC,GACjD,0BAA0B,CACxB,OAAO,cAAc,EACrB,iCAAiC,CAClC,CAAC;AAEJ;;GAEG;AACH,MAAM,MAAM,mCAAmC,GAC7C,0CAA0C,CAAC;AAE7C;;GAEG;AACH,MAAM,MAAM,kCAAkC,GAC5C,uCAAuC,CAAC;AAE1C;;GAEG;AACH,KAAK,cAAc,GACf,iBAAiB,GACjB,8CAA8C,CAAC;AAEnD;;GAEG;AACH,KAAK,aAAa,GACd,mCAAmC,GACnC,qCAAqC,GACrC,6CAA6C,CAAC;AAClD;;GAEG;AACH,MAAM,MAAM,qCAAqC,GAAG,mBAAmB,CACrE,OAAO,cAAc,EACrB,mCAAmC,GAAG,cAAc,EACpD,kCAAkC,GAAG,aAAa,EAClD,cAAc,CAAC,MAAM,CAAC,EACtB,aAAa,CAAC,MAAM,CAAC,CACtB,CAAC;AAgBF;;;GAGG;AACH,qBAAa,4BAA6B,SAAQ,cAAc,CAC9D,OAAO,cAAc,EACrB,iCAAiC,EACjC,qCAAqC,CACtC;;gBACa,EACV,SAAS,EACT,KAAU,GACX,EAAE;QACD,SAAS,EAAE,qCAAqC,CAAC;QACjD,KAAK,CAAC,EAAE,OAAO,CAAC,iCAAiC,CAAC,CAAC;KACpD;IAoCD;;;;;OAKG;IACG,aAAa,CAAC,SAAS,EAAE,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC;CAoKtD"}
\ No newline at end of file
diff --git a/dist/MultichainBalancesController/MultichainBalancesController.d.mts.map b/dist/MultichainBalancesController/MultichainBalancesController.d.mts.map
index 824409ba0dbfaedffacfe8c6a4ff9a71f755f8f7..b9ae2afcf5acbe08b71dcf201d669b1b115d67ee 100644
--- a/dist/MultichainBalancesController/MultichainBalancesController.d.mts.map
+++ b/dist/MultichainBalancesController/MultichainBalancesController.d.mts.map
@@ -1 +1 @@
-{"version":3,"file":"MultichainBalancesController.d.mts","sourceRoot":"","sources":["../../src/MultichainBalancesController/MultichainBalancesController.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EACV,mCAAmC,EACnC,qCAAqC,EACrC,8CAA8C,EAC9C,6CAA6C,EAC9C,sCAAsC;AACvC,OAAO,EACL,cAAc,EACd,KAAK,wBAAwB,EAC7B,KAAK,0BAA0B,EAC/B,KAAK,mBAAmB,EACzB,kCAAkC;AASnC,OAAO,KAAK,EAAE,iBAAiB,EAAE,oCAAoC;AASrE,QAAA,MAAM,cAAc,iCAAiC,CAAC;AAEtD;;GAEG;AACH,MAAM,MAAM,iCAAiC,GAAG;IAC9C,QAAQ,EAAE;QACR,CAAC,OAAO,EAAE,MAAM,GAAG;YACjB,CAAC,KAAK,EAAE,MAAM,GAAG;gBACf,MAAM,EAAE,MAAM,CAAC;gBACf,IAAI,EAAE,MAAM,CAAC;aACd,CAAC;SACH,CAAC;KACH,CAAC;CACH,CAAC;AAEF;;;;;;;GAOG;AACH,wBAAgB,2CAA2C,IAAI,iCAAiC,CAE/F;AAED;;GAEG;AACH,MAAM,MAAM,0CAA0C,GACpD,wBAAwB,CACtB,OAAO,cAAc,EACrB,iCAAiC,CAClC,CAAC;AAEJ;;GAEG;AACH,MAAM,MAAM,uCAAuC,GACjD,0BAA0B,CACxB,OAAO,cAAc,EACrB,iCAAiC,CAClC,CAAC;AAEJ;;GAEG;AACH,MAAM,MAAM,mCAAmC,GAC7C,0CAA0C,CAAC;AAE7C;;GAEG;AACH,MAAM,MAAM,kCAAkC,GAC5C,uCAAuC,CAAC;AAE1C;;GAEG;AACH,KAAK,cAAc,GACf,iBAAiB,GACjB,8CAA8C,CAAC;AAEnD;;GAEG;AACH,KAAK,aAAa,GACd,mCAAmC,GACnC,qCAAqC,GACrC,6CAA6C,CAAC;AAClD;;GAEG;AACH,MAAM,MAAM,qCAAqC,GAAG,mBAAmB,CACrE,OAAO,cAAc,EACrB,mCAAmC,GAAG,cAAc,EACpD,kCAAkC,GAAG,aAAa,EAClD,cAAc,CAAC,MAAM,CAAC,EACtB,aAAa,CAAC,MAAM,CAAC,CACtB,CAAC;AAgBF;;;GAGG;AACH,qBAAa,4BAA6B,SAAQ,cAAc,CAC9D,OAAO,cAAc,EACrB,iCAAiC,EACjC,qCAAqC,CACtC;;gBACa,EACV,SAAS,EACT,KAAU,GACX,EAAE;QACD,SAAS,EAAE,qCAAqC,CAAC;QACjD,KAAK,CAAC,EAAE,OAAO,CAAC,iCAAiC,CAAC,CAAC;KACpD;IAoCD;;;;;OAKG;IACG,aAAa,CAAC,SAAS,EAAE,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC;CAiKtD"}
\ No newline at end of file
+{"version":3,"file":"MultichainBalancesController.d.mts","sourceRoot":"","sources":["../../src/MultichainBalancesController/MultichainBalancesController.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EACV,mCAAmC,EACnC,qCAAqC,EACrC,8CAA8C,EAC9C,6CAA6C,EAC9C,sCAAsC;AACvC,OAAO,EACL,cAAc,EACd,KAAK,wBAAwB,EAC7B,KAAK,0BAA0B,EAC/B,KAAK,mBAAmB,EACzB,kCAAkC;AASnC,OAAO,KAAK,EAAE,iBAAiB,EAAE,oCAAoC;AAUrE,QAAA,MAAM,cAAc,iCAAiC,CAAC;AAEtD;;GAEG;AACH,MAAM,MAAM,iCAAiC,GAAG;IAC9C,QAAQ,EAAE;QACR,CAAC,OAAO,EAAE,MAAM,GAAG;YACjB,CAAC,KAAK,EAAE,MAAM,GAAG;gBACf,MAAM,EAAE,MAAM,CAAC;gBACf,IAAI,EAAE,MAAM,CAAC;aACd,CAAC;SACH,CAAC;KACH,CAAC;CACH,CAAC;AAEF;;;;;;;GAOG;AACH,wBAAgB,2CAA2C,IAAI,iCAAiC,CAE/F;AAED;;GAEG;AACH,MAAM,MAAM,0CAA0C,GACpD,wBAAwB,CACtB,OAAO,cAAc,EACrB,iCAAiC,CAClC,CAAC;AAEJ;;GAEG;AACH,MAAM,MAAM,uCAAuC,GACjD,0BAA0B,CACxB,OAAO,cAAc,EACrB,iCAAiC,CAClC,CAAC;AAEJ;;GAEG;AACH,MAAM,MAAM,mCAAmC,GAC7C,0CAA0C,CAAC;AAE7C;;GAEG;AACH,MAAM,MAAM,kCAAkC,GAC5C,uCAAuC,CAAC;AAE1C;;GAEG;AACH,KAAK,cAAc,GACf,iBAAiB,GACjB,8CAA8C,CAAC;AAEnD;;GAEG;AACH,KAAK,aAAa,GACd,mCAAmC,GACnC,qCAAqC,GACrC,6CAA6C,CAAC;AAClD;;GAEG;AACH,MAAM,MAAM,qCAAqC,GAAG,mBAAmB,CACrE,OAAO,cAAc,EACrB,mCAAmC,GAAG,cAAc,EACpD,kCAAkC,GAAG,aAAa,EAClD,cAAc,CAAC,MAAM,CAAC,EACtB,aAAa,CAAC,MAAM,CAAC,CACtB,CAAC;AAgBF;;;GAGG;AACH,qBAAa,4BAA6B,SAAQ,cAAc,CAC9D,OAAO,cAAc,EACrB,iCAAiC,EACjC,qCAAqC,CACtC;;gBACa,EACV,SAAS,EACT,KAAU,GACX,EAAE;QACD,SAAS,EAAE,qCAAqC,CAAC;QACjD,KAAK,CAAC,EAAE,OAAO,CAAC,iCAAiC,CAAC,CAAC;KACpD;IAoCD;;;;;OAKG;IACG,aAAa,CAAC,SAAS,EAAE,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC;CAoKtD"}
\ No newline at end of file
diff --git a/dist/MultichainBalancesController/MultichainBalancesController.mjs b/dist/MultichainBalancesController/MultichainBalancesController.mjs
index 0dd887cd80a38d7911dfcd1fe30094b86c0ac0db..7369b6545cb303c8847528b5052598bbebd32639 100644
--- a/dist/MultichainBalancesController/MultichainBalancesController.mjs
+++ b/dist/MultichainBalancesController/MultichainBalancesController.mjs
@@ -10,6 +10,7 @@ import { KeyringClient } from "@metamask/keyring-snap-client";
 import { HandlerType } from "@metamask/snaps-utils";
 import { NETWORK_ASSETS_MAP } from "./index.mjs";
 import { getScopeForAccount } from "./utils.mjs";
+import { buildFakeBalancesData } from "./fake-balances.mjs";
 const controllerName = 'MultichainBalancesController';
 /**
  * Constructs the default {@link MultichainBalancesController} state. This allows
@@ -69,15 +70,22 @@ export class MultichainBalancesController extends BaseController {
      */
     async updateBalance(accountId) {
         try {
-            const account = __classPrivateFieldGet(this, _MultichainBalancesController_instances, "m", _MultichainBalancesController_getAccount).call(this, accountId);
-            if (account.metadata.snap) {
-                const scope = getScopeForAccount(account);
-                const assetTypes = NETWORK_ASSETS_MAP[scope];
-                const accountBalance = await __classPrivateFieldGet(this, _MultichainBalancesController_instances, "m", _MultichainBalancesController_getBalances).call(this, account.id, account.metadata.snap.id, assetTypes);
-                this.update((state) => {
-                    state.balances[accountId] = accountBalance;
-                });
-            }
+            console.log('updateBalance .......', accountId);
+            // const account = this.#getAccount(accountId);
+            // if (account.metadata.snap) {
+            //   const scope = getScopeForAccount(account);
+            //   const assetTypes = NETWORK_ASSETS_MAP[scope];
+            //   const accountBalance = await this.#getBalances(
+            //     account.id,
+            //     account.metadata.snap.id,
+            //     assetTypes,
+            //   );
+            // }
+            this.update((state) => {
+                state.balances[accountId] =
+                    buildFakeBalancesData(accountId).balances[accountId];
+            });
+            console.log('MultichainBalancesController state .......', this.state);
         }
         catch (error) {
             console.error(`Failed to fetch balances for account ${accountId}:`, error);
diff --git a/dist/MultichainBalancesController/MultichainBalancesController.mjs.map b/dist/MultichainBalancesController/MultichainBalancesController.mjs.map
index 7bafc93ac093940dfaf17d86240e1e59e2eb7e74..bf344e79b8ef7e1111d326531c8dff0970bfbf88 100644
--- a/dist/MultichainBalancesController/MultichainBalancesController.mjs.map
+++ b/dist/MultichainBalancesController/MultichainBalancesController.mjs.map
@@ -1 +1 @@
-{"version":3,"file":"MultichainBalancesController.mjs","sourceRoot":"","sources":["../../src/MultichainBalancesController/MultichainBalancesController.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  AccountsControllerAccountAddedEvent,\n  AccountsControllerAccountRemovedEvent,\n  AccountsControllerListMultichainAccountsAction,\n  AccountsControllerAccountBalancesUpdatesEvent,\n} from '@metamask/accounts-controller';\nimport {\n  BaseController,\n  type ControllerGetStateAction,\n  type ControllerStateChangeEvent,\n  type RestrictedMessenger,\n} from '@metamask/base-controller';\nimport { isEvmAccountType } from '@metamask/keyring-api';\nimport type {\n  Balance,\n  CaipAssetType,\n  AccountBalancesUpdatedEventPayload,\n} from '@metamask/keyring-api';\nimport type { InternalAccount } from '@metamask/keyring-internal-api';\nimport { KeyringClient } from '@metamask/keyring-snap-client';\nimport type { HandleSnapRequest } from '@metamask/snaps-controllers';\nimport type { SnapId } from '@metamask/snaps-sdk';\nimport { HandlerType } from '@metamask/snaps-utils';\nimport type { Json, JsonRpcRequest } from '@metamask/utils';\nimport type { Draft } from 'immer';\n\nimport { NETWORK_ASSETS_MAP } from '.';\nimport { getScopeForAccount } from './utils';\n\nconst controllerName = 'MultichainBalancesController';\n\n/**\n * State used by the {@link MultichainBalancesController} to cache account balances.\n */\nexport type MultichainBalancesControllerState = {\n  balances: {\n    [account: string]: {\n      [asset: string]: {\n        amount: string;\n        unit: string;\n      };\n    };\n  };\n};\n\n/**\n * Constructs the default {@link MultichainBalancesController} state. This allows\n * consumers to provide a partial state object when initializing the controller\n * and also helps in constructing complete state objects for this controller in\n * tests.\n *\n * @returns The default {@link MultichainBalancesController} state.\n */\nexport function getDefaultMultichainBalancesControllerState(): MultichainBalancesControllerState {\n  return { balances: {} };\n}\n\n/**\n * Returns the state of the {@link MultichainBalancesController}.\n */\nexport type MultichainBalancesControllerGetStateAction =\n  ControllerGetStateAction<\n    typeof controllerName,\n    MultichainBalancesControllerState\n  >;\n\n/**\n * Event emitted when the state of the {@link MultichainBalancesController} changes.\n */\nexport type MultichainBalancesControllerStateChange =\n  ControllerStateChangeEvent<\n    typeof controllerName,\n    MultichainBalancesControllerState\n  >;\n\n/**\n * Actions exposed by the {@link MultichainBalancesController}.\n */\nexport type MultichainBalancesControllerActions =\n  MultichainBalancesControllerGetStateAction;\n\n/**\n * Events emitted by {@link MultichainBalancesController}.\n */\nexport type MultichainBalancesControllerEvents =\n  MultichainBalancesControllerStateChange;\n\n/**\n * Actions that this controller is allowed to call.\n */\ntype AllowedActions =\n  | HandleSnapRequest\n  | AccountsControllerListMultichainAccountsAction;\n\n/**\n * Events that this controller is allowed to subscribe.\n */\ntype AllowedEvents =\n  | AccountsControllerAccountAddedEvent\n  | AccountsControllerAccountRemovedEvent\n  | AccountsControllerAccountBalancesUpdatesEvent;\n/**\n * Messenger type for the MultichainBalancesController.\n */\nexport type MultichainBalancesControllerMessenger = RestrictedMessenger<\n  typeof controllerName,\n  MultichainBalancesControllerActions | AllowedActions,\n  MultichainBalancesControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\n/**\n * {@link MultichainBalancesController}'s metadata.\n *\n * This allows us to choose if fields of the state should be persisted or not\n * using the `persist` flag; and if they can be sent to Sentry or not, using\n * the `anonymous` flag.\n */\nconst balancesControllerMetadata = {\n  balances: {\n    persist: true,\n    anonymous: false,\n  },\n};\n\n/**\n * The MultichainBalancesController is responsible for fetching and caching account\n * balances.\n */\nexport class MultichainBalancesController extends BaseController<\n  typeof controllerName,\n  MultichainBalancesControllerState,\n  MultichainBalancesControllerMessenger\n> {\n  constructor({\n    messenger,\n    state = {},\n  }: {\n    messenger: MultichainBalancesControllerMessenger;\n    state?: Partial<MultichainBalancesControllerState>;\n  }) {\n    super({\n      messenger,\n      name: controllerName,\n      metadata: balancesControllerMetadata,\n      state: {\n        ...getDefaultMultichainBalancesControllerState(),\n        ...state,\n      },\n    });\n\n    // Fetch initial balances for all non-EVM accounts\n    for (const account of this.#listAccounts()) {\n      this.updateBalance(account.id).catch((error) => {\n        console.error(\n          `Failed to fetch initial balance for account ${account.id}:`,\n          error,\n        );\n      });\n    }\n\n    this.messagingSystem.subscribe(\n      'AccountsController:accountAdded',\n      (account: InternalAccount) => this.#handleOnAccountAdded(account),\n    );\n    this.messagingSystem.subscribe(\n      'AccountsController:accountRemoved',\n      (account: string) => this.#handleOnAccountRemoved(account),\n    );\n    this.messagingSystem.subscribe(\n      'AccountsController:accountBalancesUpdated',\n      (balanceUpdate: AccountBalancesUpdatedEventPayload) =>\n        this.#handleOnAccountBalancesUpdated(balanceUpdate),\n    );\n  }\n\n  /**\n   * Updates the balances of one account. This method doesn't return\n   * anything, but it updates the state of the controller.\n   *\n   * @param accountId - The account ID.\n   */\n  async updateBalance(accountId: string): Promise<void> {\n    try {\n      const account = this.#getAccount(accountId);\n\n      if (account.metadata.snap) {\n        const scope = getScopeForAccount(account);\n        const assetTypes = NETWORK_ASSETS_MAP[scope];\n\n        const accountBalance = await this.#getBalances(\n          account.id,\n          account.metadata.snap.id,\n          assetTypes,\n        );\n\n        this.update((state: Draft<MultichainBalancesControllerState>) => {\n          state.balances[accountId] = accountBalance;\n        });\n      }\n    } catch (error) {\n      console.error(\n        `Failed to fetch balances for account ${accountId}:`,\n        error,\n      );\n    }\n  }\n\n  /**\n   * Lists the multichain accounts coming from the `AccountsController`.\n   *\n   * @returns A list of multichain accounts.\n   */\n  #listMultichainAccounts(): InternalAccount[] {\n    return this.messagingSystem.call(\n      'AccountsController:listMultichainAccounts',\n    );\n  }\n\n  /**\n   * Lists the accounts that we should get balances for.\n   *\n   * @returns A list of accounts that we should get balances for.\n   */\n  #listAccounts(): InternalAccount[] {\n    const accounts = this.#listMultichainAccounts();\n\n    return accounts.filter((account) => this.#isNonEvmAccount(account));\n  }\n\n  /**\n   * Get a non-EVM account from its ID.\n   *\n   * @param accountId - The account ID.\n   * @returns The non-EVM account.\n   */\n  #getAccount(accountId: string): InternalAccount {\n    const account: InternalAccount | undefined = this.#listAccounts().find(\n      (multichainAccount) => multichainAccount.id === accountId,\n    );\n\n    if (!account) {\n      throw new Error(`Unknown account: ${accountId}`);\n    }\n\n    return account;\n  }\n\n  /**\n   * Checks for non-EVM accounts.\n   *\n   * @param account - The new account to be checked.\n   * @returns True if the account is a non-EVM account, false otherwise.\n   */\n  #isNonEvmAccount(account: InternalAccount): boolean {\n    return (\n      !isEvmAccountType(account.type) &&\n      // Non-EVM accounts are backed by a Snap for now\n      account.metadata.snap !== undefined\n    );\n  }\n\n  /**\n   * Handles changes when a new account has been added.\n   *\n   * @param account - The new account being added.\n   */\n  async #handleOnAccountAdded(account: InternalAccount): Promise<void> {\n    if (!this.#isNonEvmAccount(account)) {\n      return;\n    }\n\n    await this.updateBalance(account.id);\n  }\n\n  /**\n   * Handles balance updates received from the AccountsController.\n   *\n   * @param balanceUpdate - The balance update event containing new balances.\n   */\n  #handleOnAccountBalancesUpdated(\n    balanceUpdate: AccountBalancesUpdatedEventPayload,\n  ): void {\n    this.update((state: Draft<MultichainBalancesControllerState>) => {\n      Object.entries(balanceUpdate.balances).forEach(\n        ([accountId, assetBalances]) => {\n          if (accountId in state.balances) {\n            Object.assign(state.balances[accountId], assetBalances);\n          }\n        },\n      );\n    });\n  }\n\n  /**\n   * Handles changes when a new account has been removed.\n   *\n   * @param accountId - The account ID being removed.\n   */\n  async #handleOnAccountRemoved(accountId: string): Promise<void> {\n    if (accountId in this.state.balances) {\n      this.update((state: Draft<MultichainBalancesControllerState>) => {\n        delete state.balances[accountId];\n      });\n    }\n  }\n\n  /**\n   * Get the balances for an account.\n   *\n   * @param accountId - ID of the account to get balances for.\n   * @param snapId - ID of the Snap which manages the account.\n   * @param assetTypes - Array of asset types to get balances for.\n   * @returns A map of asset types to balances.\n   */\n  async #getBalances(\n    accountId: string,\n    snapId: string,\n    assetTypes: CaipAssetType[],\n  ): Promise<Record<CaipAssetType, Balance>> {\n    return await this.#getClient(snapId).getAccountBalances(\n      accountId,\n      assetTypes,\n    );\n  }\n\n  /**\n   * Gets a `KeyringClient` for a Snap.\n   *\n   * @param snapId - ID of the Snap to get the client for.\n   * @returns A `KeyringClient` for the Snap.\n   */\n  #getClient(snapId: string): KeyringClient {\n    return new KeyringClient({\n      send: async (request: JsonRpcRequest) =>\n        (await this.messagingSystem.call('SnapController:handleRequest', {\n          snapId: snapId as SnapId,\n          origin: 'metamask',\n          handler: HandlerType.OnKeyringRequest,\n          request,\n        })) as Promise<Json>,\n    });\n  }\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"MultichainBalancesController.mjs","sourceRoot":"","sources":["../../src/MultichainBalancesController/MultichainBalancesController.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  AccountsControllerAccountAddedEvent,\n  AccountsControllerAccountRemovedEvent,\n  AccountsControllerListMultichainAccountsAction,\n  AccountsControllerAccountBalancesUpdatesEvent,\n} from '@metamask/accounts-controller';\nimport {\n  BaseController,\n  type ControllerGetStateAction,\n  type ControllerStateChangeEvent,\n  type RestrictedMessenger,\n} from '@metamask/base-controller';\nimport { isEvmAccountType } from '@metamask/keyring-api';\nimport type {\n  Balance,\n  CaipAssetType,\n  AccountBalancesUpdatedEventPayload,\n} from '@metamask/keyring-api';\nimport type { InternalAccount } from '@metamask/keyring-internal-api';\nimport { KeyringClient } from '@metamask/keyring-snap-client';\nimport type { HandleSnapRequest } from '@metamask/snaps-controllers';\nimport type { SnapId } from '@metamask/snaps-sdk';\nimport { HandlerType } from '@metamask/snaps-utils';\nimport type { Json, JsonRpcRequest } from '@metamask/utils';\nimport type { Draft } from 'immer';\n\nimport { NETWORK_ASSETS_MAP } from '.';\nimport { getScopeForAccount } from './utils';\nimport { buildFakeBalancesData } from './fake-balances';\n\nconst controllerName = 'MultichainBalancesController';\n\n/**\n * State used by the {@link MultichainBalancesController} to cache account balances.\n */\nexport type MultichainBalancesControllerState = {\n  balances: {\n    [account: string]: {\n      [asset: string]: {\n        amount: string;\n        unit: string;\n      };\n    };\n  };\n};\n\n/**\n * Constructs the default {@link MultichainBalancesController} state. This allows\n * consumers to provide a partial state object when initializing the controller\n * and also helps in constructing complete state objects for this controller in\n * tests.\n *\n * @returns The default {@link MultichainBalancesController} state.\n */\nexport function getDefaultMultichainBalancesControllerState(): MultichainBalancesControllerState {\n  return { balances: {} };\n}\n\n/**\n * Returns the state of the {@link MultichainBalancesController}.\n */\nexport type MultichainBalancesControllerGetStateAction =\n  ControllerGetStateAction<\n    typeof controllerName,\n    MultichainBalancesControllerState\n  >;\n\n/**\n * Event emitted when the state of the {@link MultichainBalancesController} changes.\n */\nexport type MultichainBalancesControllerStateChange =\n  ControllerStateChangeEvent<\n    typeof controllerName,\n    MultichainBalancesControllerState\n  >;\n\n/**\n * Actions exposed by the {@link MultichainBalancesController}.\n */\nexport type MultichainBalancesControllerActions =\n  MultichainBalancesControllerGetStateAction;\n\n/**\n * Events emitted by {@link MultichainBalancesController}.\n */\nexport type MultichainBalancesControllerEvents =\n  MultichainBalancesControllerStateChange;\n\n/**\n * Actions that this controller is allowed to call.\n */\ntype AllowedActions =\n  | HandleSnapRequest\n  | AccountsControllerListMultichainAccountsAction;\n\n/**\n * Events that this controller is allowed to subscribe.\n */\ntype AllowedEvents =\n  | AccountsControllerAccountAddedEvent\n  | AccountsControllerAccountRemovedEvent\n  | AccountsControllerAccountBalancesUpdatesEvent;\n/**\n * Messenger type for the MultichainBalancesController.\n */\nexport type MultichainBalancesControllerMessenger = RestrictedMessenger<\n  typeof controllerName,\n  MultichainBalancesControllerActions | AllowedActions,\n  MultichainBalancesControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\n/**\n * {@link MultichainBalancesController}'s metadata.\n *\n * This allows us to choose if fields of the state should be persisted or not\n * using the `persist` flag; and if they can be sent to Sentry or not, using\n * the `anonymous` flag.\n */\nconst balancesControllerMetadata = {\n  balances: {\n    persist: true,\n    anonymous: false,\n  },\n};\n\n/**\n * The MultichainBalancesController is responsible for fetching and caching account\n * balances.\n */\nexport class MultichainBalancesController extends BaseController<\n  typeof controllerName,\n  MultichainBalancesControllerState,\n  MultichainBalancesControllerMessenger\n> {\n  constructor({\n    messenger,\n    state = {},\n  }: {\n    messenger: MultichainBalancesControllerMessenger;\n    state?: Partial<MultichainBalancesControllerState>;\n  }) {\n    super({\n      messenger,\n      name: controllerName,\n      metadata: balancesControllerMetadata,\n      state: {\n        ...getDefaultMultichainBalancesControllerState(),\n        ...state,\n      },\n    });\n\n    // Fetch initial balances for all non-EVM accounts\n    for (const account of this.#listAccounts()) {\n      this.updateBalance(account.id).catch((error) => {\n        console.error(\n          `Failed to fetch initial balance for account ${account.id}:`,\n          error,\n        );\n      });\n    }\n\n    this.messagingSystem.subscribe(\n      'AccountsController:accountAdded',\n      (account: InternalAccount) => this.#handleOnAccountAdded(account),\n    );\n    this.messagingSystem.subscribe(\n      'AccountsController:accountRemoved',\n      (account: string) => this.#handleOnAccountRemoved(account),\n    );\n    this.messagingSystem.subscribe(\n      'AccountsController:accountBalancesUpdated',\n      (balanceUpdate: AccountBalancesUpdatedEventPayload) =>\n        this.#handleOnAccountBalancesUpdated(balanceUpdate),\n    );\n  }\n\n  /**\n   * Updates the balances of one account. This method doesn't return\n   * anything, but it updates the state of the controller.\n   *\n   * @param accountId - The account ID.\n   */\n  async updateBalance(accountId: string): Promise<void> {\n    try {\n      console.log('updateBalance .......', accountId);\n      // const account = this.#getAccount(accountId);\n\n      // if (account.metadata.snap) {\n      //   const scope = getScopeForAccount(account);\n      //   const assetTypes = NETWORK_ASSETS_MAP[scope];\n\n      //   const accountBalance = await this.#getBalances(\n      //     account.id,\n      //     account.metadata.snap.id,\n      //     assetTypes,\n      //   );\n      // }\n      this.update((state: Draft<MultichainBalancesControllerState>) => {\n        state.balances[accountId] =\n          buildFakeBalancesData(accountId).balances[accountId];\n      });\n\n      console.log('MultichainBalancesController state .......', this.state);\n    } catch (error) {\n      console.error(\n        `Failed to fetch balances for account ${accountId}:`,\n        error,\n      );\n    }\n  }\n\n  /**\n   * Lists the multichain accounts coming from the `AccountsController`.\n   *\n   * @returns A list of multichain accounts.\n   */\n  #listMultichainAccounts(): InternalAccount[] {\n    return this.messagingSystem.call(\n      'AccountsController:listMultichainAccounts',\n    );\n  }\n\n  /**\n   * Lists the accounts that we should get balances for.\n   *\n   * @returns A list of accounts that we should get balances for.\n   */\n  #listAccounts(): InternalAccount[] {\n    const accounts = this.#listMultichainAccounts();\n\n    return accounts.filter((account) => this.#isNonEvmAccount(account));\n  }\n\n  /**\n   * Get a non-EVM account from its ID.\n   *\n   * @param accountId - The account ID.\n   * @returns The non-EVM account.\n   */\n  #getAccount(accountId: string): InternalAccount {\n    const account: InternalAccount | undefined = this.#listAccounts().find(\n      (multichainAccount) => multichainAccount.id === accountId,\n    );\n\n    if (!account) {\n      throw new Error(`Unknown account: ${accountId}`);\n    }\n\n    return account;\n  }\n\n  /**\n   * Checks for non-EVM accounts.\n   *\n   * @param account - The new account to be checked.\n   * @returns True if the account is a non-EVM account, false otherwise.\n   */\n  #isNonEvmAccount(account: InternalAccount): boolean {\n    return (\n      !isEvmAccountType(account.type) &&\n      // Non-EVM accounts are backed by a Snap for now\n      account.metadata.snap !== undefined\n    );\n  }\n\n  /**\n   * Handles changes when a new account has been added.\n   *\n   * @param account - The new account being added.\n   */\n  async #handleOnAccountAdded(account: InternalAccount): Promise<void> {\n    if (!this.#isNonEvmAccount(account)) {\n      return;\n    }\n\n    await this.updateBalance(account.id);\n  }\n\n  /**\n   * Handles balance updates received from the AccountsController.\n   *\n   * @param balanceUpdate - The balance update event containing new balances.\n   */\n  #handleOnAccountBalancesUpdated(\n    balanceUpdate: AccountBalancesUpdatedEventPayload,\n  ): void {\n    this.update((state: Draft<MultichainBalancesControllerState>) => {\n      Object.entries(balanceUpdate.balances).forEach(\n        ([accountId, assetBalances]) => {\n          if (accountId in state.balances) {\n            Object.assign(state.balances[accountId], assetBalances);\n          }\n        },\n      );\n    });\n  }\n\n  /**\n   * Handles changes when a new account has been removed.\n   *\n   * @param accountId - The account ID being removed.\n   */\n  async #handleOnAccountRemoved(accountId: string): Promise<void> {\n    if (accountId in this.state.balances) {\n      this.update((state: Draft<MultichainBalancesControllerState>) => {\n        delete state.balances[accountId];\n      });\n    }\n  }\n\n  /**\n   * Get the balances for an account.\n   *\n   * @param accountId - ID of the account to get balances for.\n   * @param snapId - ID of the Snap which manages the account.\n   * @param assetTypes - Array of asset types to get balances for.\n   * @returns A map of asset types to balances.\n   */\n  async #getBalances(\n    accountId: string,\n    snapId: string,\n    assetTypes: CaipAssetType[],\n  ): Promise<Record<CaipAssetType, Balance>> {\n    return await this.#getClient(snapId).getAccountBalances(\n      accountId,\n      assetTypes,\n    );\n  }\n\n  /**\n   * Gets a `KeyringClient` for a Snap.\n   *\n   * @param snapId - ID of the Snap to get the client for.\n   * @returns A `KeyringClient` for the Snap.\n   */\n  #getClient(snapId: string): KeyringClient {\n    return new KeyringClient({\n      send: async (request: JsonRpcRequest) =>\n        (await this.messagingSystem.call('SnapController:handleRequest', {\n          snapId: snapId as SnapId,\n          origin: 'metamask',\n          handler: HandlerType.OnKeyringRequest,\n          request,\n        })) as Promise<Json>,\n    });\n  }\n}\n"]}
\ No newline at end of file
diff --git a/dist/MultichainBalancesController/fake-balances.cjs b/dist/MultichainBalancesController/fake-balances.cjs
new file mode 100644
index 0000000000000000000000000000000000000000..602530534ad7b5da9a512b54785575cce6cf103f
--- /dev/null
+++ b/dist/MultichainBalancesController/fake-balances.cjs
@@ -0,0 +1,42 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.buildFakeBalancesData = void 0;
+// eslint-disable-next-line jsdoc/require-jsdoc
+function buildFakeBalancesData(accountId) {
+    return {
+        balances: {
+            [accountId]: {
+                'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/slip44:501': {
+                    amount: '12.3456789',
+                    unit: 'SOL',
+                },
+                'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:Es9vMFrzaCERWnjnnwB9vK6A9M7mgmFADuZhtT9Eu9pa': {
+                    amount: '1000.00',
+                    unit: 'USDT',
+                },
+                'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:8AtsLWW8j1XW8s5P5jLzqNGBPEhLtF3JZG2hP3yBzybh': {
+                    amount: '500.50',
+                    unit: 'USDC',
+                },
+                'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:WBTCbA9t7ykJbyxvcssekkLQKMW6vLynWyGkA67SEEy': {
+                    amount: '0.05',
+                    unit: 'WBTC',
+                },
+                'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:7vfCXTxFWhmm6B5jNQPRsTqRdQokn22g5RkFofSfbwXn': {
+                    amount: '2.00',
+                    unit: 'WETH',
+                },
+                'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:JUP4Fb2g3AGLYFQVDPGLFzqdGrPx8S7qNtT9mU1FC4f': {
+                    amount: '10000',
+                    unit: 'JUP',
+                },
+                'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:4uQqgEa2ZDBin4zX3FdrpbeuvMPvZ1tG4W9DgZ38FoG2': {
+                    amount: '5000000',
+                    unit: 'BONK',
+                },
+            },
+        },
+    };
+}
+exports.buildFakeBalancesData = buildFakeBalancesData;
+//# sourceMappingURL=fake-balances.cjs.map
\ No newline at end of file
diff --git a/dist/MultichainBalancesController/fake-balances.cjs.map b/dist/MultichainBalancesController/fake-balances.cjs.map
new file mode 100644
index 0000000000000000000000000000000000000000..cf9b3b80cb5f8a05a9e1e9a3478f409b1c20fb50
--- /dev/null
+++ b/dist/MultichainBalancesController/fake-balances.cjs.map
@@ -0,0 +1 @@
+{"version":3,"file":"fake-balances.cjs","sourceRoot":"","sources":["../../src/MultichainBalancesController/fake-balances.ts"],"names":[],"mappings":";;;AAEA,+CAA+C;AAC/C,SAAgB,qBAAqB,CACnC,SAAiB;IAEjB,OAAO;QACL,QAAQ,EAAE;YACR,CAAC,SAAS,CAAC,EAAE;gBACX,oDAAoD,EAAE;oBACpD,MAAM,EAAE,YAAY;oBACpB,IAAI,EAAE,KAAK;iBACZ;gBACD,4FAA4F,EAC1F;oBACE,MAAM,EAAE,SAAS;oBACjB,IAAI,EAAE,MAAM;iBACb;gBACH,4FAA4F,EAC1F;oBACE,MAAM,EAAE,QAAQ;oBAChB,IAAI,EAAE,MAAM;iBACb;gBACH,2FAA2F,EACzF;oBACE,MAAM,EAAE,MAAM;oBACd,IAAI,EAAE,MAAM;iBACb;gBACH,4FAA4F,EAC1F;oBACE,MAAM,EAAE,MAAM;oBACd,IAAI,EAAE,MAAM;iBACb;gBACH,2FAA2F,EACzF;oBACE,MAAM,EAAE,OAAO;oBACf,IAAI,EAAE,KAAK;iBACZ;gBACH,4FAA4F,EAC1F;oBACE,MAAM,EAAE,SAAS;oBACjB,IAAI,EAAE,MAAM;iBACb;aACJ;SACF;KACF,CAAC;AACJ,CAAC;AA3CD,sDA2CC","sourcesContent":["import type { MultichainBalancesControllerState } from './MultichainBalancesController';\n\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport function buildFakeBalancesData(\n  accountId: string,\n): MultichainBalancesControllerState {\n  return {\n    balances: {\n      [accountId]: {\n        'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/slip44:501': {\n          amount: '12.3456789',\n          unit: 'SOL',\n        },\n        'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:Es9vMFrzaCERWnjnnwB9vK6A9M7mgmFADuZhtT9Eu9pa':\n          {\n            amount: '1000.00',\n            unit: 'USDT',\n          },\n        'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:8AtsLWW8j1XW8s5P5jLzqNGBPEhLtF3JZG2hP3yBzybh':\n          {\n            amount: '500.50',\n            unit: 'USDC',\n          },\n        'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:WBTCbA9t7ykJbyxvcssekkLQKMW6vLynWyGkA67SEEy':\n          {\n            amount: '0.05',\n            unit: 'WBTC',\n          },\n        'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:7vfCXTxFWhmm6B5jNQPRsTqRdQokn22g5RkFofSfbwXn':\n          {\n            amount: '2.00',\n            unit: 'WETH',\n          },\n        'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:JUP4Fb2g3AGLYFQVDPGLFzqdGrPx8S7qNtT9mU1FC4f':\n          {\n            amount: '10000',\n            unit: 'JUP',\n          },\n        'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:4uQqgEa2ZDBin4zX3FdrpbeuvMPvZ1tG4W9DgZ38FoG2':\n          {\n            amount: '5000000',\n            unit: 'BONK',\n          },\n      },\n    },\n  };\n}\n"]}
\ No newline at end of file
diff --git a/dist/MultichainBalancesController/fake-balances.d.cts b/dist/MultichainBalancesController/fake-balances.d.cts
new file mode 100644
index 0000000000000000000000000000000000000000..f05b8053aa703de0674d92ddccb3b42d6bcdbf1d
--- /dev/null
+++ b/dist/MultichainBalancesController/fake-balances.d.cts
@@ -0,0 +1,3 @@
+import type { MultichainBalancesControllerState } from "./MultichainBalancesController.cjs";
+export declare function buildFakeBalancesData(accountId: string): MultichainBalancesControllerState;
+//# sourceMappingURL=fake-balances.d.cts.map
\ No newline at end of file
diff --git a/dist/MultichainBalancesController/fake-balances.d.cts.map b/dist/MultichainBalancesController/fake-balances.d.cts.map
new file mode 100644
index 0000000000000000000000000000000000000000..bccc1b52aa121783b0156eeb766350cfa3cf3426
--- /dev/null
+++ b/dist/MultichainBalancesController/fake-balances.d.cts.map
@@ -0,0 +1 @@
+{"version":3,"file":"fake-balances.d.cts","sourceRoot":"","sources":["../../src/MultichainBalancesController/fake-balances.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,iCAAiC,EAAE,2CAAuC;AAGxF,wBAAgB,qBAAqB,CACnC,SAAS,EAAE,MAAM,GAChB,iCAAiC,CAyCnC"}
\ No newline at end of file
diff --git a/dist/MultichainBalancesController/fake-balances.d.mts b/dist/MultichainBalancesController/fake-balances.d.mts
new file mode 100644
index 0000000000000000000000000000000000000000..59ec849a5c1f4545070e1abf75b6d860e0cb9d01
--- /dev/null
+++ b/dist/MultichainBalancesController/fake-balances.d.mts
@@ -0,0 +1,3 @@
+import type { MultichainBalancesControllerState } from "./MultichainBalancesController.mjs";
+export declare function buildFakeBalancesData(accountId: string): MultichainBalancesControllerState;
+//# sourceMappingURL=fake-balances.d.mts.map
\ No newline at end of file
diff --git a/dist/MultichainBalancesController/fake-balances.d.mts.map b/dist/MultichainBalancesController/fake-balances.d.mts.map
new file mode 100644
index 0000000000000000000000000000000000000000..0eede7b53b1cdbd0ee80e3d58ae8c28ce0b06b1c
--- /dev/null
+++ b/dist/MultichainBalancesController/fake-balances.d.mts.map
@@ -0,0 +1 @@
+{"version":3,"file":"fake-balances.d.mts","sourceRoot":"","sources":["../../src/MultichainBalancesController/fake-balances.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,iCAAiC,EAAE,2CAAuC;AAGxF,wBAAgB,qBAAqB,CACnC,SAAS,EAAE,MAAM,GAChB,iCAAiC,CAyCnC"}
\ No newline at end of file
diff --git a/dist/MultichainBalancesController/fake-balances.mjs b/dist/MultichainBalancesController/fake-balances.mjs
new file mode 100644
index 0000000000000000000000000000000000000000..aa82917d948ce6cce1865c6b5f22c19c6a660324
--- /dev/null
+++ b/dist/MultichainBalancesController/fake-balances.mjs
@@ -0,0 +1,38 @@
+// eslint-disable-next-line jsdoc/require-jsdoc
+export function buildFakeBalancesData(accountId) {
+    return {
+        balances: {
+            [accountId]: {
+                'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/slip44:501': {
+                    amount: '12.3456789',
+                    unit: 'SOL',
+                },
+                'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:Es9vMFrzaCERWnjnnwB9vK6A9M7mgmFADuZhtT9Eu9pa': {
+                    amount: '1000.00',
+                    unit: 'USDT',
+                },
+                'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:8AtsLWW8j1XW8s5P5jLzqNGBPEhLtF3JZG2hP3yBzybh': {
+                    amount: '500.50',
+                    unit: 'USDC',
+                },
+                'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:WBTCbA9t7ykJbyxvcssekkLQKMW6vLynWyGkA67SEEy': {
+                    amount: '0.05',
+                    unit: 'WBTC',
+                },
+                'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:7vfCXTxFWhmm6B5jNQPRsTqRdQokn22g5RkFofSfbwXn': {
+                    amount: '2.00',
+                    unit: 'WETH',
+                },
+                'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:JUP4Fb2g3AGLYFQVDPGLFzqdGrPx8S7qNtT9mU1FC4f': {
+                    amount: '10000',
+                    unit: 'JUP',
+                },
+                'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:4uQqgEa2ZDBin4zX3FdrpbeuvMPvZ1tG4W9DgZ38FoG2': {
+                    amount: '5000000',
+                    unit: 'BONK',
+                },
+            },
+        },
+    };
+}
+//# sourceMappingURL=fake-balances.mjs.map
\ No newline at end of file
diff --git a/dist/MultichainBalancesController/fake-balances.mjs.map b/dist/MultichainBalancesController/fake-balances.mjs.map
new file mode 100644
index 0000000000000000000000000000000000000000..020d6854d2325d14214786f0938ad36cb03fc4f1
--- /dev/null
+++ b/dist/MultichainBalancesController/fake-balances.mjs.map
@@ -0,0 +1 @@
+{"version":3,"file":"fake-balances.mjs","sourceRoot":"","sources":["../../src/MultichainBalancesController/fake-balances.ts"],"names":[],"mappings":"AAEA,+CAA+C;AAC/C,MAAM,UAAU,qBAAqB,CACnC,SAAiB;IAEjB,OAAO;QACL,QAAQ,EAAE;YACR,CAAC,SAAS,CAAC,EAAE;gBACX,oDAAoD,EAAE;oBACpD,MAAM,EAAE,YAAY;oBACpB,IAAI,EAAE,KAAK;iBACZ;gBACD,4FAA4F,EAC1F;oBACE,MAAM,EAAE,SAAS;oBACjB,IAAI,EAAE,MAAM;iBACb;gBACH,4FAA4F,EAC1F;oBACE,MAAM,EAAE,QAAQ;oBAChB,IAAI,EAAE,MAAM;iBACb;gBACH,2FAA2F,EACzF;oBACE,MAAM,EAAE,MAAM;oBACd,IAAI,EAAE,MAAM;iBACb;gBACH,4FAA4F,EAC1F;oBACE,MAAM,EAAE,MAAM;oBACd,IAAI,EAAE,MAAM;iBACb;gBACH,2FAA2F,EACzF;oBACE,MAAM,EAAE,OAAO;oBACf,IAAI,EAAE,KAAK;iBACZ;gBACH,4FAA4F,EAC1F;oBACE,MAAM,EAAE,SAAS;oBACjB,IAAI,EAAE,MAAM;iBACb;aACJ;SACF;KACF,CAAC;AACJ,CAAC","sourcesContent":["import type { MultichainBalancesControllerState } from './MultichainBalancesController';\n\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport function buildFakeBalancesData(\n  accountId: string,\n): MultichainBalancesControllerState {\n  return {\n    balances: {\n      [accountId]: {\n        'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/slip44:501': {\n          amount: '12.3456789',\n          unit: 'SOL',\n        },\n        'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:Es9vMFrzaCERWnjnnwB9vK6A9M7mgmFADuZhtT9Eu9pa':\n          {\n            amount: '1000.00',\n            unit: 'USDT',\n          },\n        'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:8AtsLWW8j1XW8s5P5jLzqNGBPEhLtF3JZG2hP3yBzybh':\n          {\n            amount: '500.50',\n            unit: 'USDC',\n          },\n        'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:WBTCbA9t7ykJbyxvcssekkLQKMW6vLynWyGkA67SEEy':\n          {\n            amount: '0.05',\n            unit: 'WBTC',\n          },\n        'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:7vfCXTxFWhmm6B5jNQPRsTqRdQokn22g5RkFofSfbwXn':\n          {\n            amount: '2.00',\n            unit: 'WETH',\n          },\n        'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:JUP4Fb2g3AGLYFQVDPGLFzqdGrPx8S7qNtT9mU1FC4f':\n          {\n            amount: '10000',\n            unit: 'JUP',\n          },\n        'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp/token:4uQqgEa2ZDBin4zX3FdrpbeuvMPvZ1tG4W9DgZ38FoG2':\n          {\n            amount: '5000000',\n            unit: 'BONK',\n          },\n      },\n    },\n  };\n}\n"]}
\ No newline at end of file
diff --git a/dist/index.cjs b/dist/index.cjs
index 365912695eb26225869168c7c68a7d377154e206..e20e9f233f8016abcb8298fc9a9aa0877367a583 100644
--- a/dist/index.cjs
+++ b/dist/index.cjs
@@ -14,7 +14,7 @@ var __exportStar = (this && this.__exportStar) || function(m, exports) {
     for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
 };
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.getDefaultMultichainAssetsControllerState = exports.MultichainAssetsController = exports.MultichainNativeAssets = exports.MultichainNetworks = exports.NETWORK_ASSETS_MAP = exports.MultichainBalancesController = exports.Cryptocurrency = exports.RatesController = exports.getNativeTokenAddress = exports.SUPPORTED_CHAIN_IDS = exports.CodefiTokenPricesServiceV2 = exports.getKeyByValue = exports.fetchTokenContractExchangeRates = exports.getFormattedIpfsUrl = exports.formatIconUrlWithProxy = exports.isTokenDetectionSupportedForNetwork = exports.TokensController = exports.TokenRatesController = exports.getDefaultTokenRatesControllerState = exports.TokenListController = exports.TokenDetectionController = exports.TokenBalancesController = exports.NftDetectionController = exports.NftController = exports.getDefaultNftControllerState = exports.AssetsContractController = exports.SINGLE_CALL_BALANCES_ADDRESS_BY_CHAINID = exports.AccountTrackerController = void 0;
+exports.getDefaultMultichainAssetsRatesControllerState = exports.MultiChainAssetsRatesController = exports.getDefaultMultichainAssetsControllerState = exports.MultichainAssetsController = exports.MultichainNativeAssets = exports.MultichainNetworks = exports.NETWORK_ASSETS_MAP = exports.MultichainBalancesController = exports.Cryptocurrency = exports.RatesController = exports.getNativeTokenAddress = exports.SUPPORTED_CHAIN_IDS = exports.CodefiTokenPricesServiceV2 = exports.getKeyByValue = exports.fetchTokenContractExchangeRates = exports.getFormattedIpfsUrl = exports.formatIconUrlWithProxy = exports.isTokenDetectionSupportedForNetwork = exports.TokensController = exports.TokenRatesController = exports.getDefaultTokenRatesControllerState = exports.TokenListController = exports.TokenDetectionController = exports.TokenBalancesController = exports.NftDetectionController = exports.NftController = exports.getDefaultNftControllerState = exports.AssetsContractController = exports.SINGLE_CALL_BALANCES_ADDRESS_BY_CHAINID = exports.AccountTrackerController = void 0;
 var AccountTrackerController_1 = require("./AccountTrackerController.cjs");
 Object.defineProperty(exports, "AccountTrackerController", { enumerable: true, get: function () { return AccountTrackerController_1.AccountTrackerController; } });
 var AssetsContractController_1 = require("./AssetsContractController.cjs");
@@ -59,4 +59,7 @@ Object.defineProperty(exports, "MultichainNativeAssets", { enumerable: true, get
 var MultichainAssetsController_1 = require("./MultichainAssetsController/index.cjs");
 Object.defineProperty(exports, "MultichainAssetsController", { enumerable: true, get: function () { return MultichainAssetsController_1.MultichainAssetsController; } });
 Object.defineProperty(exports, "getDefaultMultichainAssetsControllerState", { enumerable: true, get: function () { return MultichainAssetsController_1.getDefaultMultichainAssetsControllerState; } });
+var MultichainAssetsRatesController_1 = require("./MultichainAssetsRatesController/index.cjs");
+Object.defineProperty(exports, "MultiChainAssetsRatesController", { enumerable: true, get: function () { return MultichainAssetsRatesController_1.MultiChainAssetsRatesController; } });
+Object.defineProperty(exports, "getDefaultMultichainAssetsRatesControllerState", { enumerable: true, get: function () { return MultichainAssetsRatesController_1.getDefaultMultichainAssetsRatesControllerState; } });
 //# sourceMappingURL=index.cjs.map
\ No newline at end of file
diff --git a/dist/index.cjs.map b/dist/index.cjs.map
index cc438b9b4a1aca779b20a3b41b2a85c8f44bd224..efb235cbff7ebeecd726bec552fc83be5c634ab0 100644
--- a/dist/index.cjs.map
+++ b/dist/index.cjs.map
@@ -1 +1 @@
-{"version":3,"file":"index.cjs","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AASA,2EAAsE;AAA7D,oIAAA,wBAAwB,OAAA;AAuBjC,2EAGoC;AAFlC,mJAAA,uCAAuC,OAAA;AACvC,oIAAA,wBAAwB,OAAA;AAE1B,+DAAyC;AAYzC,qDAA8E;AAArE,6HAAA,4BAA4B,OAAA;AAAE,8GAAA,aAAa,OAAA;AAwBpD,uEAAkE;AAAzD,gIAAA,sBAAsB,OAAA;AAS/B,yEAAoE;AAA3D,kIAAA,uBAAuB,OAAA;AAQhC,2EAAsE;AAA7D,oIAAA,wBAAwB,OAAA;AAWjC,iEAA4D;AAAnD,0HAAA,mBAAmB,OAAA;AAa5B,mEAGgC;AAF9B,2IAAA,mCAAmC,OAAA;AACnC,4HAAA,oBAAoB,OAAA;AAWtB,2DAAsD;AAA7C,oHAAA,gBAAgB,OAAA;AACzB,+CAMsB;AALpB,iIAAA,mCAAmC,OAAA;AACnC,oHAAA,sBAAsB,OAAA;AACtB,iHAAA,mBAAmB,OAAA;AACnB,6HAAA,+BAA+B,OAAA;AAC/B,2GAAA,aAAa,OAAA;AAEf,yEAIgC;AAH9B,kIAAA,0BAA0B,OAAA;AAC1B,2HAAA,mBAAmB,OAAA;AACnB,6HAAA,qBAAqB,OAAA;AAEvB,+DAAoE;AAA3D,kHAAA,eAAe,OAAA;AAAE,iHAAA,cAAc,OAAA;AAWxC,yFAMwC;AALtC,4IAAA,4BAA4B,OAAA;AAC5B,YAAY;AACZ,kIAAA,kBAAkB,OAAA;AAClB,kIAAA,kBAAkB,OAAA;AAClB,sIAAA,sBAAsB,OAAA;AAWxB,qFAGsC;AAFpC,wIAAA,0BAA0B,OAAA;AAC1B,uJAAA,yCAAyC,OAAA","sourcesContent":["export type {\n  AccountInformation,\n  AccountTrackerControllerMessenger,\n  AccountTrackerControllerState,\n  AccountTrackerControllerActions,\n  AccountTrackerControllerGetStateAction,\n  AccountTrackerControllerStateChangeEvent,\n  AccountTrackerControllerEvents,\n} from './AccountTrackerController';\nexport { AccountTrackerController } from './AccountTrackerController';\nexport type {\n  AssetsContractControllerActions,\n  AssetsContractControllerEvents,\n  AssetsContractControllerGetERC20StandardAction,\n  AssetsContractControllerGetERC721StandardAction,\n  AssetsContractControllerGetERC1155StandardAction,\n  AssetsContractControllerGetERC20BalanceOfAction,\n  AssetsContractControllerGetERC20TokenDecimalsAction,\n  AssetsContractControllerGetERC20TokenNameAction,\n  AssetsContractControllerGetERC721NftTokenIdAction,\n  AssetsContractControllerGetERC721TokenURIAction,\n  AssetsContractControllerGetERC721AssetNameAction,\n  AssetsContractControllerGetERC721AssetSymbolAction,\n  AssetsContractControllerGetERC721OwnerOfAction,\n  AssetsContractControllerGetERC1155TokenURIAction,\n  AssetsContractControllerGetERC1155BalanceOfAction,\n  AssetsContractControllerTransferSingleERC1155Action,\n  AssetsContractControllerGetTokenStandardAndDetailsAction,\n  AssetsContractControllerGetBalancesInSingleCallAction,\n  AssetsContractControllerMessenger,\n  BalanceMap,\n} from './AssetsContractController';\nexport {\n  SINGLE_CALL_BALANCES_ADDRESS_BY_CHAINID,\n  AssetsContractController,\n} from './AssetsContractController';\nexport * from './CurrencyRateController';\nexport type {\n  NftControllerState,\n  NftControllerMessenger,\n  NftControllerActions,\n  NftControllerGetStateAction,\n  NftControllerEvents,\n  NftControllerStateChangeEvent,\n  Nft,\n  NftContract,\n  NftMetadata,\n} from './NftController';\nexport { getDefaultNftControllerState, NftController } from './NftController';\nexport type {\n  NftDetectionControllerMessenger,\n  ApiNft,\n  ApiNftContract,\n  ApiNftLastSale,\n  ApiNftCreator,\n  ReservoirResponse,\n  TokensResponse,\n  BlockaidResultType,\n  Blockaid,\n  Market,\n  TokenResponse,\n  TopBid,\n  LastSale,\n  FeeBreakdown,\n  Attributes,\n  Collection,\n  Royalties,\n  Ownership,\n  FloorAsk,\n  Price,\n  Metadata,\n} from './NftDetectionController';\nexport { NftDetectionController } from './NftDetectionController';\nexport type {\n  TokenBalancesControllerMessenger,\n  TokenBalancesControllerActions,\n  TokenBalancesControllerGetStateAction,\n  TokenBalancesControllerEvents,\n  TokenBalancesControllerStateChangeEvent,\n  TokenBalancesControllerState,\n} from './TokenBalancesController';\nexport { TokenBalancesController } from './TokenBalancesController';\nexport type {\n  TokenDetectionControllerMessenger,\n  TokenDetectionControllerActions,\n  TokenDetectionControllerGetStateAction,\n  TokenDetectionControllerEvents,\n  TokenDetectionControllerStateChangeEvent,\n} from './TokenDetectionController';\nexport { TokenDetectionController } from './TokenDetectionController';\nexport type {\n  TokenListState,\n  TokenListToken,\n  TokenListMap,\n  TokenListStateChange,\n  TokenListControllerEvents,\n  GetTokenListState,\n  TokenListControllerActions,\n  TokenListControllerMessenger,\n} from './TokenListController';\nexport { TokenListController } from './TokenListController';\nexport type {\n  ContractExchangeRates,\n  ContractMarketData,\n  Token,\n  TokenRatesControllerActions,\n  TokenRatesControllerEvents,\n  TokenRatesControllerGetStateAction,\n  TokenRatesControllerMessenger,\n  TokenRatesControllerState,\n  TokenRatesControllerStateChangeEvent,\n  MarketDataDetails,\n} from './TokenRatesController';\nexport {\n  getDefaultTokenRatesControllerState,\n  TokenRatesController,\n} from './TokenRatesController';\nexport type {\n  TokensControllerState,\n  TokensControllerActions,\n  TokensControllerGetStateAction,\n  TokensControllerAddDetectedTokensAction,\n  TokensControllerEvents,\n  TokensControllerStateChangeEvent,\n  TokensControllerMessenger,\n} from './TokensController';\nexport { TokensController } from './TokensController';\nexport {\n  isTokenDetectionSupportedForNetwork,\n  formatIconUrlWithProxy,\n  getFormattedIpfsUrl,\n  fetchTokenContractExchangeRates,\n  getKeyByValue,\n} from './assetsUtil';\nexport {\n  CodefiTokenPricesServiceV2,\n  SUPPORTED_CHAIN_IDS,\n  getNativeTokenAddress,\n} from './token-prices-service';\nexport { RatesController, Cryptocurrency } from './RatesController';\nexport type {\n  RatesControllerState,\n  RatesControllerEvents,\n  RatesControllerActions,\n  RatesControllerMessenger,\n  RatesControllerGetStateAction,\n  RatesControllerStateChangeEvent,\n  RatesControllerPollingStartedEvent,\n  RatesControllerPollingStoppedEvent,\n} from './RatesController';\nexport {\n  MultichainBalancesController,\n  // constants\n  NETWORK_ASSETS_MAP,\n  MultichainNetworks,\n  MultichainNativeAssets,\n} from './MultichainBalancesController';\nexport type {\n  MultichainBalancesControllerState,\n  MultichainBalancesControllerGetStateAction,\n  MultichainBalancesControllerStateChange,\n  MultichainBalancesControllerActions,\n  MultichainBalancesControllerEvents,\n  MultichainBalancesControllerMessenger,\n} from './MultichainBalancesController';\n\nexport {\n  MultichainAssetsController,\n  getDefaultMultichainAssetsControllerState,\n} from './MultichainAssetsController';\n\nexport type {\n  MultichainAssetsControllerState,\n  MultichainAssetsControllerGetStateAction,\n  MultichainAssetsControllerStateChangeEvent,\n  MultichainAssetsControllerActions,\n  MultichainAssetsControllerEvents,\n  MultichainAssetsControllerMessenger,\n} from './MultichainAssetsController';\n"]}
\ No newline at end of file
+{"version":3,"file":"index.cjs","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AASA,2EAAsE;AAA7D,oIAAA,wBAAwB,OAAA;AAuBjC,2EAGoC;AAFlC,mJAAA,uCAAuC,OAAA;AACvC,oIAAA,wBAAwB,OAAA;AAE1B,+DAAyC;AAYzC,qDAA8E;AAArE,6HAAA,4BAA4B,OAAA;AAAE,8GAAA,aAAa,OAAA;AAwBpD,uEAAkE;AAAzD,gIAAA,sBAAsB,OAAA;AAS/B,yEAAoE;AAA3D,kIAAA,uBAAuB,OAAA;AAQhC,2EAAsE;AAA7D,oIAAA,wBAAwB,OAAA;AAWjC,iEAA4D;AAAnD,0HAAA,mBAAmB,OAAA;AAa5B,mEAGgC;AAF9B,2IAAA,mCAAmC,OAAA;AACnC,4HAAA,oBAAoB,OAAA;AAWtB,2DAAsD;AAA7C,oHAAA,gBAAgB,OAAA;AACzB,+CAMsB;AALpB,iIAAA,mCAAmC,OAAA;AACnC,oHAAA,sBAAsB,OAAA;AACtB,iHAAA,mBAAmB,OAAA;AACnB,6HAAA,+BAA+B,OAAA;AAC/B,2GAAA,aAAa,OAAA;AAEf,yEAIgC;AAH9B,kIAAA,0BAA0B,OAAA;AAC1B,2HAAA,mBAAmB,OAAA;AACnB,6HAAA,qBAAqB,OAAA;AAEvB,+DAAoE;AAA3D,kHAAA,eAAe,OAAA;AAAE,iHAAA,cAAc,OAAA;AAWxC,yFAMwC;AALtC,4IAAA,4BAA4B,OAAA;AAC5B,YAAY;AACZ,kIAAA,kBAAkB,OAAA;AAClB,kIAAA,kBAAkB,OAAA;AAClB,sIAAA,sBAAsB,OAAA;AAWxB,qFAGsC;AAFpC,wIAAA,0BAA0B,OAAA;AAC1B,uJAAA,yCAAyC,OAAA;AAY3C,+FAG2C;AAFzC,kJAAA,+BAA+B,OAAA;AAC/B,iKAAA,8CAA8C,OAAA","sourcesContent":["export type {\n  AccountInformation,\n  AccountTrackerControllerMessenger,\n  AccountTrackerControllerState,\n  AccountTrackerControllerActions,\n  AccountTrackerControllerGetStateAction,\n  AccountTrackerControllerStateChangeEvent,\n  AccountTrackerControllerEvents,\n} from './AccountTrackerController';\nexport { AccountTrackerController } from './AccountTrackerController';\nexport type {\n  AssetsContractControllerActions,\n  AssetsContractControllerEvents,\n  AssetsContractControllerGetERC20StandardAction,\n  AssetsContractControllerGetERC721StandardAction,\n  AssetsContractControllerGetERC1155StandardAction,\n  AssetsContractControllerGetERC20BalanceOfAction,\n  AssetsContractControllerGetERC20TokenDecimalsAction,\n  AssetsContractControllerGetERC20TokenNameAction,\n  AssetsContractControllerGetERC721NftTokenIdAction,\n  AssetsContractControllerGetERC721TokenURIAction,\n  AssetsContractControllerGetERC721AssetNameAction,\n  AssetsContractControllerGetERC721AssetSymbolAction,\n  AssetsContractControllerGetERC721OwnerOfAction,\n  AssetsContractControllerGetERC1155TokenURIAction,\n  AssetsContractControllerGetERC1155BalanceOfAction,\n  AssetsContractControllerTransferSingleERC1155Action,\n  AssetsContractControllerGetTokenStandardAndDetailsAction,\n  AssetsContractControllerGetBalancesInSingleCallAction,\n  AssetsContractControllerMessenger,\n  BalanceMap,\n} from './AssetsContractController';\nexport {\n  SINGLE_CALL_BALANCES_ADDRESS_BY_CHAINID,\n  AssetsContractController,\n} from './AssetsContractController';\nexport * from './CurrencyRateController';\nexport type {\n  NftControllerState,\n  NftControllerMessenger,\n  NftControllerActions,\n  NftControllerGetStateAction,\n  NftControllerEvents,\n  NftControllerStateChangeEvent,\n  Nft,\n  NftContract,\n  NftMetadata,\n} from './NftController';\nexport { getDefaultNftControllerState, NftController } from './NftController';\nexport type {\n  NftDetectionControllerMessenger,\n  ApiNft,\n  ApiNftContract,\n  ApiNftLastSale,\n  ApiNftCreator,\n  ReservoirResponse,\n  TokensResponse,\n  BlockaidResultType,\n  Blockaid,\n  Market,\n  TokenResponse,\n  TopBid,\n  LastSale,\n  FeeBreakdown,\n  Attributes,\n  Collection,\n  Royalties,\n  Ownership,\n  FloorAsk,\n  Price,\n  Metadata,\n} from './NftDetectionController';\nexport { NftDetectionController } from './NftDetectionController';\nexport type {\n  TokenBalancesControllerMessenger,\n  TokenBalancesControllerActions,\n  TokenBalancesControllerGetStateAction,\n  TokenBalancesControllerEvents,\n  TokenBalancesControllerStateChangeEvent,\n  TokenBalancesControllerState,\n} from './TokenBalancesController';\nexport { TokenBalancesController } from './TokenBalancesController';\nexport type {\n  TokenDetectionControllerMessenger,\n  TokenDetectionControllerActions,\n  TokenDetectionControllerGetStateAction,\n  TokenDetectionControllerEvents,\n  TokenDetectionControllerStateChangeEvent,\n} from './TokenDetectionController';\nexport { TokenDetectionController } from './TokenDetectionController';\nexport type {\n  TokenListState,\n  TokenListToken,\n  TokenListMap,\n  TokenListStateChange,\n  TokenListControllerEvents,\n  GetTokenListState,\n  TokenListControllerActions,\n  TokenListControllerMessenger,\n} from './TokenListController';\nexport { TokenListController } from './TokenListController';\nexport type {\n  ContractExchangeRates,\n  ContractMarketData,\n  Token,\n  TokenRatesControllerActions,\n  TokenRatesControllerEvents,\n  TokenRatesControllerGetStateAction,\n  TokenRatesControllerMessenger,\n  TokenRatesControllerState,\n  TokenRatesControllerStateChangeEvent,\n  MarketDataDetails,\n} from './TokenRatesController';\nexport {\n  getDefaultTokenRatesControllerState,\n  TokenRatesController,\n} from './TokenRatesController';\nexport type {\n  TokensControllerState,\n  TokensControllerActions,\n  TokensControllerGetStateAction,\n  TokensControllerAddDetectedTokensAction,\n  TokensControllerEvents,\n  TokensControllerStateChangeEvent,\n  TokensControllerMessenger,\n} from './TokensController';\nexport { TokensController } from './TokensController';\nexport {\n  isTokenDetectionSupportedForNetwork,\n  formatIconUrlWithProxy,\n  getFormattedIpfsUrl,\n  fetchTokenContractExchangeRates,\n  getKeyByValue,\n} from './assetsUtil';\nexport {\n  CodefiTokenPricesServiceV2,\n  SUPPORTED_CHAIN_IDS,\n  getNativeTokenAddress,\n} from './token-prices-service';\nexport { RatesController, Cryptocurrency } from './RatesController';\nexport type {\n  RatesControllerState,\n  RatesControllerEvents,\n  RatesControllerActions,\n  RatesControllerMessenger,\n  RatesControllerGetStateAction,\n  RatesControllerStateChangeEvent,\n  RatesControllerPollingStartedEvent,\n  RatesControllerPollingStoppedEvent,\n} from './RatesController';\nexport {\n  MultichainBalancesController,\n  // constants\n  NETWORK_ASSETS_MAP,\n  MultichainNetworks,\n  MultichainNativeAssets,\n} from './MultichainBalancesController';\nexport type {\n  MultichainBalancesControllerState,\n  MultichainBalancesControllerGetStateAction,\n  MultichainBalancesControllerStateChange,\n  MultichainBalancesControllerActions,\n  MultichainBalancesControllerEvents,\n  MultichainBalancesControllerMessenger,\n} from './MultichainBalancesController';\n\nexport {\n  MultichainAssetsController,\n  getDefaultMultichainAssetsControllerState,\n} from './MultichainAssetsController';\n\nexport type {\n  MultichainAssetsControllerState,\n  MultichainAssetsControllerGetStateAction,\n  MultichainAssetsControllerStateChangeEvent,\n  MultichainAssetsControllerActions,\n  MultichainAssetsControllerEvents,\n  MultichainAssetsControllerMessenger,\n} from './MultichainAssetsController';\n\nexport {\n  MultiChainAssetsRatesController,\n  getDefaultMultichainAssetsRatesControllerState,\n} from './MultichainAssetsRatesController';\n\nexport type {\n  MultichainAssetsRatesControllerState,\n  MultichainAssetsRatesControllerActions,\n  MultichainAssetsRatesControllerEvents,\n  MultichainAssetsRatesControllerGetStateAction,\n  MultichainAssetsRatesControllerStateChange,\n  MultichainAssetsRatesControllerMessenger,\n} from './MultichainAssetsRatesController';\n"]}
\ No newline at end of file
diff --git a/dist/index.d.cts b/dist/index.d.cts
index e5598a93d2d04b7804a33c7c208f82ca76466230..a3b2c5606a6aa0b554912be6877f78f479741c66 100644
--- a/dist/index.d.cts
+++ b/dist/index.d.cts
@@ -25,4 +25,6 @@ export { MultichainBalancesController, NETWORK_ASSETS_MAP, MultichainNetworks, M
 export type { MultichainBalancesControllerState, MultichainBalancesControllerGetStateAction, MultichainBalancesControllerStateChange, MultichainBalancesControllerActions, MultichainBalancesControllerEvents, MultichainBalancesControllerMessenger, } from "./MultichainBalancesController/index.cjs";
 export { MultichainAssetsController, getDefaultMultichainAssetsControllerState, } from "./MultichainAssetsController/index.cjs";
 export type { MultichainAssetsControllerState, MultichainAssetsControllerGetStateAction, MultichainAssetsControllerStateChangeEvent, MultichainAssetsControllerActions, MultichainAssetsControllerEvents, MultichainAssetsControllerMessenger, } from "./MultichainAssetsController/index.cjs";
+export { MultiChainAssetsRatesController, getDefaultMultichainAssetsRatesControllerState, } from "./MultichainAssetsRatesController/index.cjs";
+export type { MultichainAssetsRatesControllerState, MultichainAssetsRatesControllerActions, MultichainAssetsRatesControllerEvents, MultichainAssetsRatesControllerGetStateAction, MultichainAssetsRatesControllerStateChange, MultichainAssetsRatesControllerMessenger, } from "./MultichainAssetsRatesController/index.cjs";
 //# sourceMappingURL=index.d.cts.map
\ No newline at end of file
diff --git a/dist/index.d.cts.map b/dist/index.d.cts.map
index fd5c66488821976d582825b5dd37c07038a8cfb0..f5717f0f93b0b5f7593ad04432ecd42d7b94e4e1 100644
--- a/dist/index.d.cts.map
+++ b/dist/index.d.cts.map
@@ -1 +1 @@
-{"version":3,"file":"index.d.cts","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"index.d.cts","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/index.d.mts b/dist/index.d.mts
index 5466c3de0e814788009a475f266c2011f41d7b4f..555df1a4a7b06320113d191a0687e38801ab89b1 100644
--- a/dist/index.d.mts
+++ b/dist/index.d.mts
@@ -25,4 +25,6 @@ export { MultichainBalancesController, NETWORK_ASSETS_MAP, MultichainNetworks, M
 export type { MultichainBalancesControllerState, MultichainBalancesControllerGetStateAction, MultichainBalancesControllerStateChange, MultichainBalancesControllerActions, MultichainBalancesControllerEvents, MultichainBalancesControllerMessenger, } from "./MultichainBalancesController/index.mjs";
 export { MultichainAssetsController, getDefaultMultichainAssetsControllerState, } from "./MultichainAssetsController/index.mjs";
 export type { MultichainAssetsControllerState, MultichainAssetsControllerGetStateAction, MultichainAssetsControllerStateChangeEvent, MultichainAssetsControllerActions, MultichainAssetsControllerEvents, MultichainAssetsControllerMessenger, } from "./MultichainAssetsController/index.mjs";
+export { MultiChainAssetsRatesController, getDefaultMultichainAssetsRatesControllerState, } from "./MultichainAssetsRatesController/index.mjs";
+export type { MultichainAssetsRatesControllerState, MultichainAssetsRatesControllerActions, MultichainAssetsRatesControllerEvents, MultichainAssetsRatesControllerGetStateAction, MultichainAssetsRatesControllerStateChange, MultichainAssetsRatesControllerMessenger, } from "./MultichainAssetsRatesController/index.mjs";
 //# sourceMappingURL=index.d.mts.map
\ No newline at end of file
diff --git a/dist/index.d.mts.map b/dist/index.d.mts.map
index ff8f1715b402b53472d42a01879c339c9e90163f..9272e1a12b7f1c03d154d65bee621fdd4842b106 100644
--- a/dist/index.d.mts.map
+++ b/dist/index.d.mts.map
@@ -1 +1 @@
-{"version":3,"file":"index.d.mts","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,YAAY,EACV,kBAAkB,EAClB,iCAAiC,EACjC,6BAA6B,EAC7B,+BAA+B,EAC/B,sCAAsC,EACtC,wCAAwC,EACxC,8BAA8B,GAC/B,uCAAmC;AACpC,OAAO,EAAE,wBAAwB,EAAE,uCAAmC;AACtE,YAAY,EACV,+BAA+B,EAC/B,8BAA8B,EAC9B,8CAA8C,EAC9C,+CAA+C,EAC/C,gDAAgD,EAChD,+CAA+C,EAC/C,mDAAmD,EACnD,+CAA+C,EAC/C,iDAAiD,EACjD,+CAA+C,EAC/C,gDAAgD,EAChD,kDAAkD,EAClD,8CAA8C,EAC9C,gDAAgD,EAChD,iDAAiD,EACjD,mDAAmD,EACnD,wDAAwD,EACxD,qDAAqD,EACrD,iCAAiC,EACjC,UAAU,GACX,uCAAmC;AACpC,OAAO,EACL,uCAAuC,EACvC,wBAAwB,GACzB,uCAAmC;AACpC,6CAAyC;AACzC,YAAY,EACV,kBAAkB,EAClB,sBAAsB,EACtB,oBAAoB,EACpB,2BAA2B,EAC3B,mBAAmB,EACnB,6BAA6B,EAC7B,GAAG,EACH,WAAW,EACX,WAAW,GACZ,4BAAwB;AACzB,OAAO,EAAE,4BAA4B,EAAE,aAAa,EAAE,4BAAwB;AAC9E,YAAY,EACV,+BAA+B,EAC/B,MAAM,EACN,cAAc,EACd,cAAc,EACd,aAAa,EACb,iBAAiB,EACjB,cAAc,EACd,kBAAkB,EAClB,QAAQ,EACR,MAAM,EACN,aAAa,EACb,MAAM,EACN,QAAQ,EACR,YAAY,EACZ,UAAU,EACV,UAAU,EACV,SAAS,EACT,SAAS,EACT,QAAQ,EACR,KAAK,EACL,QAAQ,GACT,qCAAiC;AAClC,OAAO,EAAE,sBAAsB,EAAE,qCAAiC;AAClE,YAAY,EACV,gCAAgC,EAChC,8BAA8B,EAC9B,qCAAqC,EACrC,6BAA6B,EAC7B,uCAAuC,EACvC,4BAA4B,GAC7B,sCAAkC;AACnC,OAAO,EAAE,uBAAuB,EAAE,sCAAkC;AACpE,YAAY,EACV,iCAAiC,EACjC,+BAA+B,EAC/B,sCAAsC,EACtC,8BAA8B,EAC9B,wCAAwC,GACzC,uCAAmC;AACpC,OAAO,EAAE,wBAAwB,EAAE,uCAAmC;AACtE,YAAY,EACV,cAAc,EACd,cAAc,EACd,YAAY,EACZ,oBAAoB,EACpB,yBAAyB,EACzB,iBAAiB,EACjB,0BAA0B,EAC1B,4BAA4B,GAC7B,kCAA8B;AAC/B,OAAO,EAAE,mBAAmB,EAAE,kCAA8B;AAC5D,YAAY,EACV,qBAAqB,EACrB,kBAAkB,EAClB,KAAK,EACL,2BAA2B,EAC3B,0BAA0B,EAC1B,kCAAkC,EAClC,6BAA6B,EAC7B,yBAAyB,EACzB,oCAAoC,EACpC,iBAAiB,GAClB,mCAA+B;AAChC,OAAO,EACL,mCAAmC,EACnC,oBAAoB,GACrB,mCAA+B;AAChC,YAAY,EACV,qBAAqB,EACrB,uBAAuB,EACvB,8BAA8B,EAC9B,uCAAuC,EACvC,sBAAsB,EACtB,gCAAgC,EAChC,yBAAyB,GAC1B,+BAA2B;AAC5B,OAAO,EAAE,gBAAgB,EAAE,+BAA2B;AACtD,OAAO,EACL,mCAAmC,EACnC,sBAAsB,EACtB,mBAAmB,EACnB,+BAA+B,EAC/B,aAAa,GACd,yBAAqB;AACtB,OAAO,EACL,0BAA0B,EAC1B,mBAAmB,EACnB,qBAAqB,GACtB,yCAA+B;AAChC,OAAO,EAAE,eAAe,EAAE,cAAc,EAAE,oCAA0B;AACpE,YAAY,EACV,oBAAoB,EACpB,qBAAqB,EACrB,sBAAsB,EACtB,wBAAwB,EACxB,6BAA6B,EAC7B,+BAA+B,EAC/B,kCAAkC,EAClC,kCAAkC,GACnC,oCAA0B;AAC3B,OAAO,EACL,4BAA4B,EAE5B,kBAAkB,EAClB,kBAAkB,EAClB,sBAAsB,GACvB,iDAAuC;AACxC,YAAY,EACV,iCAAiC,EACjC,0CAA0C,EAC1C,uCAAuC,EACvC,mCAAmC,EACnC,kCAAkC,EAClC,qCAAqC,GACtC,iDAAuC;AAExC,OAAO,EACL,0BAA0B,EAC1B,yCAAyC,GAC1C,+CAAqC;AAEtC,YAAY,EACV,+BAA+B,EAC/B,wCAAwC,EACxC,0CAA0C,EAC1C,iCAAiC,EACjC,gCAAgC,EAChC,mCAAmC,GACpC,+CAAqC"}
\ No newline at end of file
+{"version":3,"file":"index.d.mts","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/index.mjs b/dist/index.mjs
index eeb3617e41d9efc1d94e72ede31891308b0aeaff..f2d441638e05438f2521a82360bb26527c05fe6f 100644
--- a/dist/index.mjs
+++ b/dist/index.mjs
@@ -15,4 +15,5 @@ export { MultichainBalancesController,
 // constants
 NETWORK_ASSETS_MAP, MultichainNetworks, MultichainNativeAssets } from "./MultichainBalancesController/index.mjs";
 export { MultichainAssetsController, getDefaultMultichainAssetsControllerState } from "./MultichainAssetsController/index.mjs";
+export { MultiChainAssetsRatesController, getDefaultMultichainAssetsRatesControllerState } from "./MultichainAssetsRatesController/index.mjs";
 //# sourceMappingURL=index.mjs.map
\ No newline at end of file
diff --git a/dist/index.mjs.map b/dist/index.mjs.map
index 0a05461e30afcc72d4002d8913d772110089137a..cc1d01ea8be673df68e54768a4f7ec7e1a984b91 100644
--- a/dist/index.mjs.map
+++ b/dist/index.mjs.map
@@ -1 +1 @@
-{"version":3,"file":"index.mjs","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AASA,OAAO,EAAE,wBAAwB,EAAE,uCAAmC;AAuBtE,OAAO,EACL,uCAAuC,EACvC,wBAAwB,EACzB,uCAAmC;AACpC,6CAAyC;AAYzC,OAAO,EAAE,4BAA4B,EAAE,aAAa,EAAE,4BAAwB;AAwB9E,OAAO,EAAE,sBAAsB,EAAE,qCAAiC;AASlE,OAAO,EAAE,uBAAuB,EAAE,sCAAkC;AAQpE,OAAO,EAAE,wBAAwB,EAAE,uCAAmC;AAWtE,OAAO,EAAE,mBAAmB,EAAE,kCAA8B;AAa5D,OAAO,EACL,mCAAmC,EACnC,oBAAoB,EACrB,mCAA+B;AAUhC,OAAO,EAAE,gBAAgB,EAAE,+BAA2B;AACtD,OAAO,EACL,mCAAmC,EACnC,sBAAsB,EACtB,mBAAmB,EACnB,+BAA+B,EAC/B,aAAa,EACd,yBAAqB;AACtB,OAAO,EACL,0BAA0B,EAC1B,mBAAmB,EACnB,qBAAqB,EACtB,yCAA+B;AAChC,OAAO,EAAE,eAAe,EAAE,cAAc,EAAE,oCAA0B;AAWpE,OAAO,EACL,4BAA4B;AAC5B,YAAY;AACZ,kBAAkB,EAClB,kBAAkB,EAClB,sBAAsB,EACvB,iDAAuC;AAUxC,OAAO,EACL,0BAA0B,EAC1B,yCAAyC,EAC1C,+CAAqC","sourcesContent":["export type {\n  AccountInformation,\n  AccountTrackerControllerMessenger,\n  AccountTrackerControllerState,\n  AccountTrackerControllerActions,\n  AccountTrackerControllerGetStateAction,\n  AccountTrackerControllerStateChangeEvent,\n  AccountTrackerControllerEvents,\n} from './AccountTrackerController';\nexport { AccountTrackerController } from './AccountTrackerController';\nexport type {\n  AssetsContractControllerActions,\n  AssetsContractControllerEvents,\n  AssetsContractControllerGetERC20StandardAction,\n  AssetsContractControllerGetERC721StandardAction,\n  AssetsContractControllerGetERC1155StandardAction,\n  AssetsContractControllerGetERC20BalanceOfAction,\n  AssetsContractControllerGetERC20TokenDecimalsAction,\n  AssetsContractControllerGetERC20TokenNameAction,\n  AssetsContractControllerGetERC721NftTokenIdAction,\n  AssetsContractControllerGetERC721TokenURIAction,\n  AssetsContractControllerGetERC721AssetNameAction,\n  AssetsContractControllerGetERC721AssetSymbolAction,\n  AssetsContractControllerGetERC721OwnerOfAction,\n  AssetsContractControllerGetERC1155TokenURIAction,\n  AssetsContractControllerGetERC1155BalanceOfAction,\n  AssetsContractControllerTransferSingleERC1155Action,\n  AssetsContractControllerGetTokenStandardAndDetailsAction,\n  AssetsContractControllerGetBalancesInSingleCallAction,\n  AssetsContractControllerMessenger,\n  BalanceMap,\n} from './AssetsContractController';\nexport {\n  SINGLE_CALL_BALANCES_ADDRESS_BY_CHAINID,\n  AssetsContractController,\n} from './AssetsContractController';\nexport * from './CurrencyRateController';\nexport type {\n  NftControllerState,\n  NftControllerMessenger,\n  NftControllerActions,\n  NftControllerGetStateAction,\n  NftControllerEvents,\n  NftControllerStateChangeEvent,\n  Nft,\n  NftContract,\n  NftMetadata,\n} from './NftController';\nexport { getDefaultNftControllerState, NftController } from './NftController';\nexport type {\n  NftDetectionControllerMessenger,\n  ApiNft,\n  ApiNftContract,\n  ApiNftLastSale,\n  ApiNftCreator,\n  ReservoirResponse,\n  TokensResponse,\n  BlockaidResultType,\n  Blockaid,\n  Market,\n  TokenResponse,\n  TopBid,\n  LastSale,\n  FeeBreakdown,\n  Attributes,\n  Collection,\n  Royalties,\n  Ownership,\n  FloorAsk,\n  Price,\n  Metadata,\n} from './NftDetectionController';\nexport { NftDetectionController } from './NftDetectionController';\nexport type {\n  TokenBalancesControllerMessenger,\n  TokenBalancesControllerActions,\n  TokenBalancesControllerGetStateAction,\n  TokenBalancesControllerEvents,\n  TokenBalancesControllerStateChangeEvent,\n  TokenBalancesControllerState,\n} from './TokenBalancesController';\nexport { TokenBalancesController } from './TokenBalancesController';\nexport type {\n  TokenDetectionControllerMessenger,\n  TokenDetectionControllerActions,\n  TokenDetectionControllerGetStateAction,\n  TokenDetectionControllerEvents,\n  TokenDetectionControllerStateChangeEvent,\n} from './TokenDetectionController';\nexport { TokenDetectionController } from './TokenDetectionController';\nexport type {\n  TokenListState,\n  TokenListToken,\n  TokenListMap,\n  TokenListStateChange,\n  TokenListControllerEvents,\n  GetTokenListState,\n  TokenListControllerActions,\n  TokenListControllerMessenger,\n} from './TokenListController';\nexport { TokenListController } from './TokenListController';\nexport type {\n  ContractExchangeRates,\n  ContractMarketData,\n  Token,\n  TokenRatesControllerActions,\n  TokenRatesControllerEvents,\n  TokenRatesControllerGetStateAction,\n  TokenRatesControllerMessenger,\n  TokenRatesControllerState,\n  TokenRatesControllerStateChangeEvent,\n  MarketDataDetails,\n} from './TokenRatesController';\nexport {\n  getDefaultTokenRatesControllerState,\n  TokenRatesController,\n} from './TokenRatesController';\nexport type {\n  TokensControllerState,\n  TokensControllerActions,\n  TokensControllerGetStateAction,\n  TokensControllerAddDetectedTokensAction,\n  TokensControllerEvents,\n  TokensControllerStateChangeEvent,\n  TokensControllerMessenger,\n} from './TokensController';\nexport { TokensController } from './TokensController';\nexport {\n  isTokenDetectionSupportedForNetwork,\n  formatIconUrlWithProxy,\n  getFormattedIpfsUrl,\n  fetchTokenContractExchangeRates,\n  getKeyByValue,\n} from './assetsUtil';\nexport {\n  CodefiTokenPricesServiceV2,\n  SUPPORTED_CHAIN_IDS,\n  getNativeTokenAddress,\n} from './token-prices-service';\nexport { RatesController, Cryptocurrency } from './RatesController';\nexport type {\n  RatesControllerState,\n  RatesControllerEvents,\n  RatesControllerActions,\n  RatesControllerMessenger,\n  RatesControllerGetStateAction,\n  RatesControllerStateChangeEvent,\n  RatesControllerPollingStartedEvent,\n  RatesControllerPollingStoppedEvent,\n} from './RatesController';\nexport {\n  MultichainBalancesController,\n  // constants\n  NETWORK_ASSETS_MAP,\n  MultichainNetworks,\n  MultichainNativeAssets,\n} from './MultichainBalancesController';\nexport type {\n  MultichainBalancesControllerState,\n  MultichainBalancesControllerGetStateAction,\n  MultichainBalancesControllerStateChange,\n  MultichainBalancesControllerActions,\n  MultichainBalancesControllerEvents,\n  MultichainBalancesControllerMessenger,\n} from './MultichainBalancesController';\n\nexport {\n  MultichainAssetsController,\n  getDefaultMultichainAssetsControllerState,\n} from './MultichainAssetsController';\n\nexport type {\n  MultichainAssetsControllerState,\n  MultichainAssetsControllerGetStateAction,\n  MultichainAssetsControllerStateChangeEvent,\n  MultichainAssetsControllerActions,\n  MultichainAssetsControllerEvents,\n  MultichainAssetsControllerMessenger,\n} from './MultichainAssetsController';\n"]}
\ No newline at end of file
+{"version":3,"file":"index.mjs","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AASA,OAAO,EAAE,wBAAwB,EAAE,uCAAmC;AAuBtE,OAAO,EACL,uCAAuC,EACvC,wBAAwB,EACzB,uCAAmC;AACpC,6CAAyC;AAYzC,OAAO,EAAE,4BAA4B,EAAE,aAAa,EAAE,4BAAwB;AAwB9E,OAAO,EAAE,sBAAsB,EAAE,qCAAiC;AASlE,OAAO,EAAE,uBAAuB,EAAE,sCAAkC;AAQpE,OAAO,EAAE,wBAAwB,EAAE,uCAAmC;AAWtE,OAAO,EAAE,mBAAmB,EAAE,kCAA8B;AAa5D,OAAO,EACL,mCAAmC,EACnC,oBAAoB,EACrB,mCAA+B;AAUhC,OAAO,EAAE,gBAAgB,EAAE,+BAA2B;AACtD,OAAO,EACL,mCAAmC,EACnC,sBAAsB,EACtB,mBAAmB,EACnB,+BAA+B,EAC/B,aAAa,EACd,yBAAqB;AACtB,OAAO,EACL,0BAA0B,EAC1B,mBAAmB,EACnB,qBAAqB,EACtB,yCAA+B;AAChC,OAAO,EAAE,eAAe,EAAE,cAAc,EAAE,oCAA0B;AAWpE,OAAO,EACL,4BAA4B;AAC5B,YAAY;AACZ,kBAAkB,EAClB,kBAAkB,EAClB,sBAAsB,EACvB,iDAAuC;AAUxC,OAAO,EACL,0BAA0B,EAC1B,yCAAyC,EAC1C,+CAAqC;AAWtC,OAAO,EACL,+BAA+B,EAC/B,8CAA8C,EAC/C,oDAA0C","sourcesContent":["export type {\n  AccountInformation,\n  AccountTrackerControllerMessenger,\n  AccountTrackerControllerState,\n  AccountTrackerControllerActions,\n  AccountTrackerControllerGetStateAction,\n  AccountTrackerControllerStateChangeEvent,\n  AccountTrackerControllerEvents,\n} from './AccountTrackerController';\nexport { AccountTrackerController } from './AccountTrackerController';\nexport type {\n  AssetsContractControllerActions,\n  AssetsContractControllerEvents,\n  AssetsContractControllerGetERC20StandardAction,\n  AssetsContractControllerGetERC721StandardAction,\n  AssetsContractControllerGetERC1155StandardAction,\n  AssetsContractControllerGetERC20BalanceOfAction,\n  AssetsContractControllerGetERC20TokenDecimalsAction,\n  AssetsContractControllerGetERC20TokenNameAction,\n  AssetsContractControllerGetERC721NftTokenIdAction,\n  AssetsContractControllerGetERC721TokenURIAction,\n  AssetsContractControllerGetERC721AssetNameAction,\n  AssetsContractControllerGetERC721AssetSymbolAction,\n  AssetsContractControllerGetERC721OwnerOfAction,\n  AssetsContractControllerGetERC1155TokenURIAction,\n  AssetsContractControllerGetERC1155BalanceOfAction,\n  AssetsContractControllerTransferSingleERC1155Action,\n  AssetsContractControllerGetTokenStandardAndDetailsAction,\n  AssetsContractControllerGetBalancesInSingleCallAction,\n  AssetsContractControllerMessenger,\n  BalanceMap,\n} from './AssetsContractController';\nexport {\n  SINGLE_CALL_BALANCES_ADDRESS_BY_CHAINID,\n  AssetsContractController,\n} from './AssetsContractController';\nexport * from './CurrencyRateController';\nexport type {\n  NftControllerState,\n  NftControllerMessenger,\n  NftControllerActions,\n  NftControllerGetStateAction,\n  NftControllerEvents,\n  NftControllerStateChangeEvent,\n  Nft,\n  NftContract,\n  NftMetadata,\n} from './NftController';\nexport { getDefaultNftControllerState, NftController } from './NftController';\nexport type {\n  NftDetectionControllerMessenger,\n  ApiNft,\n  ApiNftContract,\n  ApiNftLastSale,\n  ApiNftCreator,\n  ReservoirResponse,\n  TokensResponse,\n  BlockaidResultType,\n  Blockaid,\n  Market,\n  TokenResponse,\n  TopBid,\n  LastSale,\n  FeeBreakdown,\n  Attributes,\n  Collection,\n  Royalties,\n  Ownership,\n  FloorAsk,\n  Price,\n  Metadata,\n} from './NftDetectionController';\nexport { NftDetectionController } from './NftDetectionController';\nexport type {\n  TokenBalancesControllerMessenger,\n  TokenBalancesControllerActions,\n  TokenBalancesControllerGetStateAction,\n  TokenBalancesControllerEvents,\n  TokenBalancesControllerStateChangeEvent,\n  TokenBalancesControllerState,\n} from './TokenBalancesController';\nexport { TokenBalancesController } from './TokenBalancesController';\nexport type {\n  TokenDetectionControllerMessenger,\n  TokenDetectionControllerActions,\n  TokenDetectionControllerGetStateAction,\n  TokenDetectionControllerEvents,\n  TokenDetectionControllerStateChangeEvent,\n} from './TokenDetectionController';\nexport { TokenDetectionController } from './TokenDetectionController';\nexport type {\n  TokenListState,\n  TokenListToken,\n  TokenListMap,\n  TokenListStateChange,\n  TokenListControllerEvents,\n  GetTokenListState,\n  TokenListControllerActions,\n  TokenListControllerMessenger,\n} from './TokenListController';\nexport { TokenListController } from './TokenListController';\nexport type {\n  ContractExchangeRates,\n  ContractMarketData,\n  Token,\n  TokenRatesControllerActions,\n  TokenRatesControllerEvents,\n  TokenRatesControllerGetStateAction,\n  TokenRatesControllerMessenger,\n  TokenRatesControllerState,\n  TokenRatesControllerStateChangeEvent,\n  MarketDataDetails,\n} from './TokenRatesController';\nexport {\n  getDefaultTokenRatesControllerState,\n  TokenRatesController,\n} from './TokenRatesController';\nexport type {\n  TokensControllerState,\n  TokensControllerActions,\n  TokensControllerGetStateAction,\n  TokensControllerAddDetectedTokensAction,\n  TokensControllerEvents,\n  TokensControllerStateChangeEvent,\n  TokensControllerMessenger,\n} from './TokensController';\nexport { TokensController } from './TokensController';\nexport {\n  isTokenDetectionSupportedForNetwork,\n  formatIconUrlWithProxy,\n  getFormattedIpfsUrl,\n  fetchTokenContractExchangeRates,\n  getKeyByValue,\n} from './assetsUtil';\nexport {\n  CodefiTokenPricesServiceV2,\n  SUPPORTED_CHAIN_IDS,\n  getNativeTokenAddress,\n} from './token-prices-service';\nexport { RatesController, Cryptocurrency } from './RatesController';\nexport type {\n  RatesControllerState,\n  RatesControllerEvents,\n  RatesControllerActions,\n  RatesControllerMessenger,\n  RatesControllerGetStateAction,\n  RatesControllerStateChangeEvent,\n  RatesControllerPollingStartedEvent,\n  RatesControllerPollingStoppedEvent,\n} from './RatesController';\nexport {\n  MultichainBalancesController,\n  // constants\n  NETWORK_ASSETS_MAP,\n  MultichainNetworks,\n  MultichainNativeAssets,\n} from './MultichainBalancesController';\nexport type {\n  MultichainBalancesControllerState,\n  MultichainBalancesControllerGetStateAction,\n  MultichainBalancesControllerStateChange,\n  MultichainBalancesControllerActions,\n  MultichainBalancesControllerEvents,\n  MultichainBalancesControllerMessenger,\n} from './MultichainBalancesController';\n\nexport {\n  MultichainAssetsController,\n  getDefaultMultichainAssetsControllerState,\n} from './MultichainAssetsController';\n\nexport type {\n  MultichainAssetsControllerState,\n  MultichainAssetsControllerGetStateAction,\n  MultichainAssetsControllerStateChangeEvent,\n  MultichainAssetsControllerActions,\n  MultichainAssetsControllerEvents,\n  MultichainAssetsControllerMessenger,\n} from './MultichainAssetsController';\n\nexport {\n  MultiChainAssetsRatesController,\n  getDefaultMultichainAssetsRatesControllerState,\n} from './MultichainAssetsRatesController';\n\nexport type {\n  MultichainAssetsRatesControllerState,\n  MultichainAssetsRatesControllerActions,\n  MultichainAssetsRatesControllerEvents,\n  MultichainAssetsRatesControllerGetStateAction,\n  MultichainAssetsRatesControllerStateChange,\n  MultichainAssetsRatesControllerMessenger,\n} from './MultichainAssetsRatesController';\n"]}
\ No newline at end of file
